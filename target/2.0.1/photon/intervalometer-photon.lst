
c:/Personal/Development/intervalometer-photon/target/2.0.1/photon/intervalometer-photon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000047c0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a47e0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000204  20000000  080a47e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000fc  20000204  20000204  00040204  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a49e8  080a49e8  000349e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a4a10  080a4a10  00034a10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000fbba0  00000000  00000000  00034a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000130cd  00000000  00000000  001305b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a5db  00000000  00000000  00143681  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001fa0  00000000  00000000  0015dc5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005328  00000000  00000000  0015fbfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00026412  00000000  00000000  00164f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a50b  00000000  00000000  0018b336  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b2082  00000000  00000000  001b5841  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000591c  00000000  00000000  002678c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f002 fb1d 	bl	80a2670 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f002 fb25 	bl	80a268c <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a47e4 	.word	0x080a47e4
 80a0050:	20000204 	.word	0x20000204
 80a0054:	20000204 	.word	0x20000204
 80a0058:	20000300 	.word	0x20000300
 80a005c:	20000300 	.word	0x20000300

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f000 fe3b 	bl	80a0cdc <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a47bc 	.word	0x080a47bc
 80a0084:	080a47dc 	.word	0x080a47dc

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b912 	b.w	80a02b0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f927 	bl	80a02e0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f000 bde3 	b.w	80a0c60 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f000 bc15 	b.w	80a08c8 <malloc>

080a009e <_Znaj>:
 80a009e:	f000 bc13 	b.w	80a08c8 <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f000 bc19 	b.w	80a08d8 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a00b6:	2300      	movs	r3, #0
 80a00b8:	2202      	movs	r2, #2
 80a00ba:	f000 bbd5 	b.w	80a0868 <spark_variable>
	...

080a00c0 <_Z10startPhasev>:

bool phaseStarted(){
  return currentPhaseStartTime > -1;
}

void startPhase(){
 80a00c0:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a00c2:	f000 fa73 	bl	80a05ac <HAL_Timer_Get_Milli_Seconds>
  currentPhaseStartTime = millis();
 80a00c6:	4b01      	ldr	r3, [pc, #4]	; (80a00cc <_Z10startPhasev+0xc>)
 80a00c8:	6018      	str	r0, [r3, #0]
}
 80a00ca:	bd08      	pop	{r3, pc}
 80a00cc:	2000021c 	.word	0x2000021c

080a00d0 <_Z16phaseElapsedTimev>:

int phaseElapsedTime(){
 80a00d0:	b508      	push	{r3, lr}
 80a00d2:	f000 fa6b 	bl	80a05ac <HAL_Timer_Get_Milli_Seconds>
  return millis() - currentPhaseStartTime;
 80a00d6:	4b02      	ldr	r3, [pc, #8]	; (80a00e0 <_Z16phaseElapsedTimev+0x10>)
 80a00d8:	681b      	ldr	r3, [r3, #0]
}
 80a00da:	1ac0      	subs	r0, r0, r3
 80a00dc:	bd08      	pop	{r3, pc}
 80a00de:	bf00      	nop
 80a00e0:	2000021c 	.word	0x2000021c

080a00e4 <_Z10setShutteri>:

void setShutter(int value){
 80a00e4:	b510      	push	{r4, lr}
  digitalWrite(shutterPin, value);
 80a00e6:	4b06      	ldr	r3, [pc, #24]	; (80a0100 <_Z10setShutteri+0x1c>)
 80a00e8:	b2c4      	uxtb	r4, r0
 80a00ea:	4621      	mov	r1, r4
 80a00ec:	8818      	ldrh	r0, [r3, #0]
 80a00ee:	f001 fc04 	bl	80a18fa <digitalWrite>
  digitalWrite(LEDPin, value);
 80a00f2:	4b04      	ldr	r3, [pc, #16]	; (80a0104 <_Z10setShutteri+0x20>)
 80a00f4:	4621      	mov	r1, r4

}
 80a00f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(LEDPin, value);
 80a00fa:	8818      	ldrh	r0, [r3, #0]
 80a00fc:	f001 bbfd 	b.w	80a18fa <digitalWrite>
 80a0100:	20000020 	.word	0x20000020
 80a0104:	20000000 	.word	0x20000000

080a0108 <_Z3endv>:
  started = false;
 80a0108:	2000      	movs	r0, #0
 80a010a:	4b02      	ldr	r3, [pc, #8]	; (80a0114 <_Z3endv+0xc>)
 80a010c:	7018      	strb	r0, [r3, #0]
  setShutter(LOW);
 80a010e:	f7ff bfe9 	b.w	80a00e4 <_Z10setShutteri>
 80a0112:	bf00      	nop
 80a0114:	20000228 	.word	0x20000228

080a0118 <_Z9debuggingv>:

bool debugging(){
 80a0118:	b508      	push	{r3, lr}
 80a011a:	f000 fa47 	bl	80a05ac <HAL_Timer_Get_Milli_Seconds>
  return millis() < debugTimeout;
 80a011e:	4b03      	ldr	r3, [pc, #12]	; (80a012c <_Z9debuggingv+0x14>)
 80a0120:	681b      	ldr	r3, [r3, #0]
}
 80a0122:	4283      	cmp	r3, r0
 80a0124:	bf94      	ite	ls
 80a0126:	2000      	movls	r0, #0
 80a0128:	2001      	movhi	r0, #1
 80a012a:	bd08      	pop	{r3, pc}
 80a012c:	20000220 	.word	0x20000220

080a0130 <_Z12debugMessage6StringS_>:
  debugTimeout = millis() + duration.toFloat();
  debugMessage("DebugStart","");
  return duration.toFloat();
}

bool debugMessage(String eventName, String data){
 80a0130:	b530      	push	{r4, r5, lr}
 80a0132:	4604      	mov	r4, r0
 80a0134:	460d      	mov	r5, r1
 80a0136:	b085      	sub	sp, #20
  if (debugging()){
 80a0138:	f7ff ffee 	bl	80a0118 <_Z9debuggingv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a013c:	4b1e      	ldr	r3, [pc, #120]	; (80a01b8 <_Z12debugMessage6StringS_+0x88>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a013e:	a802      	add	r0, sp, #8
 80a0140:	781b      	ldrb	r3, [r3, #0]
 80a0142:	f88d 3000 	strb.w	r3, [sp]
 80a0146:	6821      	ldr	r1, [r4, #0]
 80a0148:	233c      	movs	r3, #60	; 0x3c
 80a014a:	682a      	ldr	r2, [r5, #0]
 80a014c:	f000 ff46 	bl	80a0fdc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0150:	2000      	movs	r0, #0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a0152:	9c02      	ldr	r4, [sp, #8]
 80a0154:	f000 fb14 	bl	80a0780 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a0158:	b120      	cbz	r0, 80a0164 <_Z12debugMessage6StringS_+0x34>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 80a015a:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 80a015c:	b913      	cbnz	r3, 80a0164 <_Z12debugMessage6StringS_+0x34>
        spark_process();
 80a015e:	f000 fb93 	bl	80a0888 <spark_process>
    }
 80a0162:	e7fa      	b.n	80a015a <_Z12debugMessage6StringS_+0x2a>
 80a0164:	7863      	ldrb	r3, [r4, #1]
 80a0166:	1c65      	adds	r5, r4, #1
 80a0168:	f3bf 8f5b 	dmb	ish
        if (this->acquireDone() && this->isSucceeded()) {
 80a016c:	b9ab      	cbnz	r3, 80a019a <_Z12debugMessage6StringS_+0x6a>
        return std::move(defaultValue);
 80a016e:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
 80a0170:	9c03      	ldr	r4, [sp, #12]
 80a0172:	b17c      	cbz	r4, 80a0194 <_Z12debugMessage6StringS_+0x64>
      if (--_M_use_count == 0)
 80a0174:	6863      	ldr	r3, [r4, #4]
 80a0176:	3b01      	subs	r3, #1
 80a0178:	6063      	str	r3, [r4, #4]
 80a017a:	b95b      	cbnz	r3, 80a0194 <_Z12debugMessage6StringS_+0x64>
          _M_dispose();
 80a017c:	6823      	ldr	r3, [r4, #0]
 80a017e:	4620      	mov	r0, r4
 80a0180:	689b      	ldr	r3, [r3, #8]
 80a0182:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0184:	68a3      	ldr	r3, [r4, #8]
 80a0186:	3b01      	subs	r3, #1
 80a0188:	60a3      	str	r3, [r4, #8]
 80a018a:	b91b      	cbnz	r3, 80a0194 <_Z12debugMessage6StringS_+0x64>
            _M_destroy();
 80a018c:	6823      	ldr	r3, [r4, #0]
 80a018e:	4620      	mov	r0, r4
 80a0190:	68db      	ldr	r3, [r3, #12]
 80a0192:	4798      	blx	r3
    return Particle.publish(eventName, data);
  }
}
 80a0194:	4628      	mov	r0, r5
 80a0196:	b005      	add	sp, #20
 80a0198:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
 80a019a:	2000      	movs	r0, #0
 80a019c:	f000 faf0 	bl	80a0780 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a01a0:	b120      	cbz	r0, 80a01ac <_Z12debugMessage6StringS_+0x7c>
 80a01a2:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 80a01a4:	b913      	cbnz	r3, 80a01ac <_Z12debugMessage6StringS_+0x7c>
        spark_process();
 80a01a6:	f000 fb6f 	bl	80a0888 <spark_process>
    }
 80a01aa:	e7fa      	b.n	80a01a2 <_Z12debugMessage6StringS_+0x72>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a01ac:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
 80a01ae:	2b01      	cmp	r3, #1
 80a01b0:	d1dd      	bne.n	80a016e <_Z12debugMessage6StringS_+0x3e>
            return result_;
 80a01b2:	7b25      	ldrb	r5, [r4, #12]
 80a01b4:	e7dc      	b.n	80a0170 <_Z12debugMessage6StringS_+0x40>
 80a01b6:	bf00      	nop
 80a01b8:	20000208 	.word	0x20000208

080a01bc <_Z5startv>:
void start(){
 80a01bc:	b500      	push	{lr}
 80a01be:	b089      	sub	sp, #36	; 0x24
  debugMessage("start", "");
 80a01c0:	4668      	mov	r0, sp
 80a01c2:	490b      	ldr	r1, [pc, #44]	; (80a01f0 <_Z5startv+0x34>)
 80a01c4:	f000 fc36 	bl	80a0a34 <_ZN6StringC1EPKc>
 80a01c8:	490a      	ldr	r1, [pc, #40]	; (80a01f4 <_Z5startv+0x38>)
 80a01ca:	a804      	add	r0, sp, #16
 80a01cc:	f000 fc32 	bl	80a0a34 <_ZN6StringC1EPKc>
 80a01d0:	a904      	add	r1, sp, #16
 80a01d2:	4668      	mov	r0, sp
 80a01d4:	f7ff ffac 	bl	80a0130 <_Z12debugMessage6StringS_>
 80a01d8:	a804      	add	r0, sp, #16
 80a01da:	f000 fbe1 	bl	80a09a0 <_ZN6StringD1Ev>
 80a01de:	4668      	mov	r0, sp
 80a01e0:	f000 fbde 	bl	80a09a0 <_ZN6StringD1Ev>
  started = true;
 80a01e4:	2201      	movs	r2, #1
 80a01e6:	4b04      	ldr	r3, [pc, #16]	; (80a01f8 <_Z5startv+0x3c>)
 80a01e8:	701a      	strb	r2, [r3, #0]
}
 80a01ea:	b009      	add	sp, #36	; 0x24
 80a01ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80a01f0:	080a435c 	.word	0x080a435c
 80a01f4:	080a46aa 	.word	0x080a46aa
 80a01f8:	20000228 	.word	0x20000228

080a01fc <_Z8setPhase10PhotoPhase>:
void setPhase(PhotoPhase value){
 80a01fc:	b510      	push	{r4, lr}
 80a01fe:	b088      	sub	sp, #32
 80a0200:	4604      	mov	r4, r0
  debugMessage("set phase", "");
 80a0202:	490d      	ldr	r1, [pc, #52]	; (80a0238 <_Z8setPhase10PhotoPhase+0x3c>)
 80a0204:	4668      	mov	r0, sp
 80a0206:	f000 fc15 	bl	80a0a34 <_ZN6StringC1EPKc>
 80a020a:	490c      	ldr	r1, [pc, #48]	; (80a023c <_Z8setPhase10PhotoPhase+0x40>)
 80a020c:	a804      	add	r0, sp, #16
 80a020e:	f000 fc11 	bl	80a0a34 <_ZN6StringC1EPKc>
 80a0212:	a904      	add	r1, sp, #16
 80a0214:	4668      	mov	r0, sp
 80a0216:	f7ff ff8b 	bl	80a0130 <_Z12debugMessage6StringS_>
 80a021a:	a804      	add	r0, sp, #16
 80a021c:	f000 fbc0 	bl	80a09a0 <_ZN6StringD1Ev>
 80a0220:	4668      	mov	r0, sp
 80a0222:	f000 fbbd 	bl	80a09a0 <_ZN6StringD1Ev>
  currentPhaseStartTime = -1;//indicates that the phase has not started yet
 80a0226:	f04f 32ff 	mov.w	r2, #4294967295
  currentPhase = value;
 80a022a:	4b05      	ldr	r3, [pc, #20]	; (80a0240 <_Z8setPhase10PhotoPhase+0x44>)
 80a022c:	701c      	strb	r4, [r3, #0]
  currentPhaseStartTime = -1;//indicates that the phase has not started yet
 80a022e:	4b05      	ldr	r3, [pc, #20]	; (80a0244 <_Z8setPhase10PhotoPhase+0x48>)
 80a0230:	601a      	str	r2, [r3, #0]
}
 80a0232:	b008      	add	sp, #32
 80a0234:	bd10      	pop	{r4, pc}
 80a0236:	bf00      	nop
 80a0238:	080a4362 	.word	0x080a4362
 80a023c:	080a46aa 	.word	0x080a46aa
 80a0240:	20000218 	.word	0x20000218
 80a0244:	2000021c 	.word	0x2000021c

080a0248 <_Z14startDebugging6String>:
int startDebugging(String duration){
 80a0248:	b570      	push	{r4, r5, r6, lr}
 80a024a:	b088      	sub	sp, #32
 80a024c:	4604      	mov	r4, r0
 80a024e:	f000 f9ad 	bl	80a05ac <HAL_Timer_Get_Milli_Seconds>
 80a0252:	4606      	mov	r6, r0
  debugTimeout = millis() + duration.toFloat();
 80a0254:	4620      	mov	r0, r4
 80a0256:	f000 fc1a 	bl	80a0a8e <_ZNK6String7toFloatEv>
 80a025a:	4605      	mov	r5, r0
 80a025c:	4630      	mov	r0, r6
 80a025e:	f002 f959 	bl	80a2514 <__aeabi_ui2f>
 80a0262:	4629      	mov	r1, r5
 80a0264:	f002 f8a6 	bl	80a23b4 <__addsf3>
 80a0268:	f002 f9ac 	bl	80a25c4 <__aeabi_f2iz>
 80a026c:	4b0d      	ldr	r3, [pc, #52]	; (80a02a4 <_Z14startDebugging6String+0x5c>)
  debugMessage("DebugStart","");
 80a026e:	490e      	ldr	r1, [pc, #56]	; (80a02a8 <_Z14startDebugging6String+0x60>)
  debugTimeout = millis() + duration.toFloat();
 80a0270:	6018      	str	r0, [r3, #0]
  debugMessage("DebugStart","");
 80a0272:	4668      	mov	r0, sp
 80a0274:	f000 fbde 	bl	80a0a34 <_ZN6StringC1EPKc>
 80a0278:	490c      	ldr	r1, [pc, #48]	; (80a02ac <_Z14startDebugging6String+0x64>)
 80a027a:	a804      	add	r0, sp, #16
 80a027c:	f000 fbda 	bl	80a0a34 <_ZN6StringC1EPKc>
 80a0280:	a904      	add	r1, sp, #16
 80a0282:	4668      	mov	r0, sp
 80a0284:	f7ff ff54 	bl	80a0130 <_Z12debugMessage6StringS_>
 80a0288:	a804      	add	r0, sp, #16
 80a028a:	f000 fb89 	bl	80a09a0 <_ZN6StringD1Ev>
 80a028e:	4668      	mov	r0, sp
 80a0290:	f000 fb86 	bl	80a09a0 <_ZN6StringD1Ev>
  return duration.toFloat();
 80a0294:	4620      	mov	r0, r4
 80a0296:	f000 fbfa 	bl	80a0a8e <_ZNK6String7toFloatEv>
 80a029a:	f002 f993 	bl	80a25c4 <__aeabi_f2iz>
}
 80a029e:	b008      	add	sp, #32
 80a02a0:	bd70      	pop	{r4, r5, r6, pc}
 80a02a2:	bf00      	nop
 80a02a4:	20000220 	.word	0x20000220
 80a02a8:	080a436c 	.word	0x080a436c
 80a02ac:	080a46aa 	.word	0x080a46aa

080a02b0 <setup>:
//--------------------------------------------------------------
// Setup
//--------------------------------------------------------------

// setup() runs once, when the device is first turned on.
void setup() {
 80a02b0:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(shutterPin, OUTPUT);
 80a02b2:	4b08      	ldr	r3, [pc, #32]	; (80a02d4 <setup+0x24>)
 80a02b4:	2101      	movs	r1, #1
 80a02b6:	8818      	ldrh	r0, [r3, #0]
 80a02b8:	f001 fb0e 	bl	80a18d8 <pinMode>
  pinMode(LEDPin, OUTPUT);
 80a02bc:	4b06      	ldr	r3, [pc, #24]	; (80a02d8 <setup+0x28>)
 80a02be:	2101      	movs	r1, #1
 80a02c0:	8818      	ldrh	r0, [r3, #0]
 80a02c2:	f001 fb09 	bl	80a18d8 <pinMode>
  pinMode(switchPin, INPUT_PULLDOWN);
 80a02c6:	4b05      	ldr	r3, [pc, #20]	; (80a02dc <setup+0x2c>)
 80a02c8:	2103      	movs	r1, #3
 80a02ca:	8818      	ldrh	r0, [r3, #0]
}
 80a02cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(switchPin, INPUT_PULLDOWN);
 80a02d0:	f001 bb02 	b.w	80a18d8 <pinMode>
 80a02d4:	20000020 	.word	0x20000020
 80a02d8:	20000000 	.word	0x20000000
 80a02dc:	20000028 	.word	0x20000028

080a02e0 <loop>:
//--------------------------------------------------------------
// Loop
//--------------------------------------------------------------

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a02e0:	b537      	push	{r0, r1, r2, r4, r5, lr}

  //code to register cloud functions once the particle is connected
  if (connectedOnce == false) {
 80a02e2:	4d7d      	ldr	r5, [pc, #500]	; (80a04d8 <loop+0x1f8>)
 80a02e4:	782c      	ldrb	r4, [r5, #0]
 80a02e6:	2c00      	cmp	r4, #0
 80a02e8:	d13e      	bne.n	80a0368 <loop+0x88>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a02ea:	f000 fad5 	bl	80a0898 <spark_cloud_flag_connected>
    if (Particle.connected()) {
 80a02ee:	2800      	cmp	r0, #0
 80a02f0:	d03a      	beq.n	80a0368 <loop+0x88>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a02f2:	497a      	ldr	r1, [pc, #488]	; (80a04dc <loop+0x1fc>)
 80a02f4:	4623      	mov	r3, r4
 80a02f6:	2204      	movs	r2, #4
 80a02f8:	6809      	ldr	r1, [r1, #0]
 80a02fa:	4879      	ldr	r0, [pc, #484]	; (80a04e0 <loop+0x200>)
 80a02fc:	f000 fab4 	bl	80a0868 <spark_variable>
        return _variable(varKey, &var, INT);
 80a0300:	4978      	ldr	r1, [pc, #480]	; (80a04e4 <loop+0x204>)
 80a0302:	4879      	ldr	r0, [pc, #484]	; (80a04e8 <loop+0x208>)
 80a0304:	f7ff fed7 	bl	80a00b6 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a0308:	4623      	mov	r3, r4
 80a030a:	2201      	movs	r2, #1
 80a030c:	4977      	ldr	r1, [pc, #476]	; (80a04ec <loop+0x20c>)
 80a030e:	4878      	ldr	r0, [pc, #480]	; (80a04f0 <loop+0x210>)
 80a0310:	f000 faaa 	bl	80a0868 <spark_variable>
 80a0314:	2201      	movs	r2, #1
 80a0316:	4623      	mov	r3, r4
 80a0318:	4976      	ldr	r1, [pc, #472]	; (80a04f4 <loop+0x214>)
 80a031a:	4877      	ldr	r0, [pc, #476]	; (80a04f8 <loop+0x218>)
 80a031c:	f000 faa4 	bl	80a0868 <spark_variable>
        return _variable(varKey, &var, INT);
 80a0320:	4976      	ldr	r1, [pc, #472]	; (80a04fc <loop+0x21c>)
 80a0322:	4877      	ldr	r0, [pc, #476]	; (80a0500 <loop+0x220>)
 80a0324:	f7ff fec7 	bl	80a00b6 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
      Particle.variable("lockup", mirrorLockupDelay);
      Particle.variable("blackFrame", blackFrameEnabled);
      Particle.variable("exposure", exposureLengthMillis);
      Particle.variable("bracket", bracketExposureLengthMillis);
      Particle.variable("phaseStart", currentPhaseStartTime);
      Particle.variable("phase", currentPhase);
 80a0328:	4c76      	ldr	r4, [pc, #472]	; (80a0504 <loop+0x224>)
 80a032a:	4977      	ldr	r1, [pc, #476]	; (80a0508 <loop+0x228>)
 80a032c:	4877      	ldr	r0, [pc, #476]	; (80a050c <loop+0x22c>)
 80a032e:	f7ff fec2 	bl	80a00b6 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
 80a0332:	4977      	ldr	r1, [pc, #476]	; (80a0510 <loop+0x230>)
 80a0334:	4877      	ldr	r0, [pc, #476]	; (80a0514 <loop+0x234>)
 80a0336:	f7ff febe 	bl	80a00b6 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
        return _variable(name, std::forward<ArgsT>(args)...);
 80a033a:	7823      	ldrb	r3, [r4, #0]
        return _variable(varKey, &var, INT);
 80a033c:	a901      	add	r1, sp, #4
 80a033e:	4876      	ldr	r0, [pc, #472]	; (80a0518 <loop+0x238>)
        return _variable(name, std::forward<ArgsT>(args)...);
 80a0340:	9301      	str	r3, [sp, #4]
        return _variable(varKey, &var, INT);
 80a0342:	f7ff feb8 	bl	80a00b6 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
 80a0346:	4975      	ldr	r1, [pc, #468]	; (80a051c <loop+0x23c>)
 80a0348:	4875      	ldr	r0, [pc, #468]	; (80a0520 <loop+0x240>)
 80a034a:	f7ff feb4 	bl	80a00b6 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
        return _variable(name, std::forward<ArgsT>(args)...);
 80a034e:	7823      	ldrb	r3, [r4, #0]
        return _variable(varKey, &var, INT);
 80a0350:	a901      	add	r1, sp, #4
 80a0352:	4871      	ldr	r0, [pc, #452]	; (80a0518 <loop+0x238>)
        return _variable(name, std::forward<ArgsT>(args)...);
 80a0354:	9301      	str	r3, [sp, #4]
        return _variable(varKey, &var, INT);
 80a0356:	f7ff feae 	bl	80a00b6 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a035a:	4a72      	ldr	r2, [pc, #456]	; (80a0524 <loop+0x244>)
 80a035c:	4972      	ldr	r1, [pc, #456]	; (80a0528 <loop+0x248>)
 80a035e:	4873      	ldr	r0, [pc, #460]	; (80a052c <loop+0x24c>)
 80a0360:	f000 fd49 	bl	80a0df6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      Particle.variable("lastPhoto", lastPhotoStartTime);
      Particle.variable("phase", currentPhase);
      Particle.function("startDebug", startDebugging);
      connectedOnce = true;
 80a0364:	2301      	movs	r3, #1
 80a0366:	702b      	strb	r3, [r5, #0]
    }
  }
  if(digitalRead(switchPin) == HIGH){
 80a0368:	4b71      	ldr	r3, [pc, #452]	; (80a0530 <loop+0x250>)
 80a036a:	8818      	ldrh	r0, [r3, #0]
 80a036c:	f001 fade 	bl	80a192c <digitalRead>
 80a0370:	2801      	cmp	r0, #1
 80a0372:	d10e      	bne.n	80a0392 <loop+0xb2>
    start();
 80a0374:	f7ff ff22 	bl	80a01bc <_Z5startv>
  }else{
    end();
  }

  if(started){
 80a0378:	4b6e      	ldr	r3, [pc, #440]	; (80a0534 <loop+0x254>)
 80a037a:	781b      	ldrb	r3, [r3, #0]
 80a037c:	2b00      	cmp	r3, #0
 80a037e:	d04f      	beq.n	80a0420 <loop+0x140>
    switch(currentPhase){
 80a0380:	4b60      	ldr	r3, [pc, #384]	; (80a0504 <loop+0x224>)
 80a0382:	781b      	ldrb	r3, [r3, #0]
 80a0384:	2b05      	cmp	r3, #5
 80a0386:	d84b      	bhi.n	80a0420 <loop+0x140>
 80a0388:	e8df f003 	tbb	[pc, r3]
 80a038c:	4c382006 	.word	0x4c382006
 80a0390:	8778      	.short	0x8778
    end();
 80a0392:	f7ff feb9 	bl	80a0108 <_Z3endv>
 80a0396:	e7ef      	b.n	80a0378 <loop+0x98>
 80a0398:	f000 f908 	bl	80a05ac <HAL_Timer_Get_Milli_Seconds>
      case None:
        if(millis() - lastPhotoStartTime >= photoIntervalSeconds * 1000){
 80a039c:	4c5f      	ldr	r4, [pc, #380]	; (80a051c <loop+0x23c>)
 80a039e:	6823      	ldr	r3, [r4, #0]
 80a03a0:	1ac0      	subs	r0, r0, r3
 80a03a2:	4b50      	ldr	r3, [pc, #320]	; (80a04e4 <loop+0x204>)
 80a03a4:	681a      	ldr	r2, [r3, #0]
 80a03a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a03aa:	4353      	muls	r3, r2
 80a03ac:	4298      	cmp	r0, r3
 80a03ae:	d337      	bcc.n	80a0420 <loop+0x140>
 80a03b0:	f000 f8fc 	bl	80a05ac <HAL_Timer_Get_Milli_Seconds>
          lastPhotoStartTime = millis();
          if (bracketExposureLengthMillis > 0){
 80a03b4:	4b54      	ldr	r3, [pc, #336]	; (80a0508 <loop+0x228>)
          lastPhotoStartTime = millis();
 80a03b6:	6020      	str	r0, [r4, #0]
          if (bracketExposureLengthMillis > 0){
 80a03b8:	681b      	ldr	r3, [r3, #0]
            currentBracketShot = UnderExposed;
          }
          setPhase(MirrorLockupDelay);
 80a03ba:	2001      	movs	r0, #1
          if (bracketExposureLengthMillis > 0){
 80a03bc:	2b00      	cmp	r3, #0
            currentBracketShot = UnderExposed;
 80a03be:	bfc2      	ittt	gt
 80a03c0:	2200      	movgt	r2, #0
 80a03c2:	4b5d      	ldrgt	r3, [pc, #372]	; (80a0538 <loop+0x258>)
 80a03c4:	701a      	strbgt	r2, [r3, #0]
                case Exposed:
                  currentBracketShot = OverExposed;
                  setPhase(MirrorLockupDelay);
                  break;
                case OverExposed:
                  setPhase(None);
 80a03c6:	f7ff ff19 	bl	80a01fc <_Z8setPhase10PhotoPhase>
          startPhase();
        }
        break;
    }
  }
}
 80a03ca:	e029      	b.n	80a0420 <loop+0x140>
        if (mirrorLockupDelay){
 80a03cc:	4b47      	ldr	r3, [pc, #284]	; (80a04ec <loop+0x20c>)
 80a03ce:	781b      	ldrb	r3, [r3, #0]
 80a03d0:	b313      	cbz	r3, 80a0418 <loop+0x138>
  return currentPhaseStartTime > -1;
 80a03d2:	4b4f      	ldr	r3, [pc, #316]	; (80a0510 <loop+0x230>)
          if (phaseStarted()){
 80a03d4:	681b      	ldr	r3, [r3, #0]
 80a03d6:	2b00      	cmp	r3, #0
 80a03d8:	db0a      	blt.n	80a03f0 <loop+0x110>
            if (phaseElapsedTime() >= mirrorLockupDuration){
 80a03da:	f7ff fe79 	bl	80a00d0 <_Z16phaseElapsedTimev>
 80a03de:	4b57      	ldr	r3, [pc, #348]	; (80a053c <loop+0x25c>)
 80a03e0:	681b      	ldr	r3, [r3, #0]
 80a03e2:	4298      	cmp	r0, r3
 80a03e4:	db1c      	blt.n	80a0420 <loop+0x140>
              setShutter(LOW);
 80a03e6:	2000      	movs	r0, #0
 80a03e8:	f7ff fe7c 	bl	80a00e4 <_Z10setShutteri>
              setPhase(MirrorLockupBuffer);
 80a03ec:	2002      	movs	r0, #2
 80a03ee:	e7ea      	b.n	80a03c6 <loop+0xe6>
              startPhase();
 80a03f0:	f7ff fe66 	bl	80a00c0 <_Z10startPhasev>
          setShutter(HIGH);
 80a03f4:	2001      	movs	r0, #1
 80a03f6:	f7ff fe75 	bl	80a00e4 <_Z10setShutteri>
 80a03fa:	e011      	b.n	80a0420 <loop+0x140>
          if (mirrorLockupDuration > 0){
 80a03fc:	4b4f      	ldr	r3, [pc, #316]	; (80a053c <loop+0x25c>)
 80a03fe:	681b      	ldr	r3, [r3, #0]
 80a0400:	2b00      	cmp	r3, #0
 80a0402:	dd09      	ble.n	80a0418 <loop+0x138>
  return currentPhaseStartTime > -1;
 80a0404:	4b42      	ldr	r3, [pc, #264]	; (80a0510 <loop+0x230>)
            if (phaseStarted()){
 80a0406:	681b      	ldr	r3, [r3, #0]
 80a0408:	2b00      	cmp	r3, #0
 80a040a:	db07      	blt.n	80a041c <loop+0x13c>
              if (phaseElapsedTime() >= mirrorLockupBuffer){
 80a040c:	f7ff fe60 	bl	80a00d0 <_Z16phaseElapsedTimev>
 80a0410:	4b4b      	ldr	r3, [pc, #300]	; (80a0540 <loop+0x260>)
 80a0412:	681b      	ldr	r3, [r3, #0]
 80a0414:	4298      	cmp	r0, r3
 80a0416:	db03      	blt.n	80a0420 <loop+0x140>
          setPhase(Exposure);
 80a0418:	2003      	movs	r0, #3
 80a041a:	e7d4      	b.n	80a03c6 <loop+0xe6>
              startPhase();
 80a041c:	f7ff fe50 	bl	80a00c0 <_Z10startPhasev>
}
 80a0420:	b003      	add	sp, #12
 80a0422:	bd30      	pop	{r4, r5, pc}
  return currentPhaseStartTime > -1;
 80a0424:	4b3a      	ldr	r3, [pc, #232]	; (80a0510 <loop+0x230>)
        if (phaseStarted()){
 80a0426:	681b      	ldr	r3, [r3, #0]
 80a0428:	2b00      	cmp	r3, #0
 80a042a:	db0a      	blt.n	80a0442 <loop+0x162>
          if (phaseElapsedTime() >= currentBracketExposureDuration){
 80a042c:	f7ff fe50 	bl	80a00d0 <_Z16phaseElapsedTimev>
 80a0430:	4b44      	ldr	r3, [pc, #272]	; (80a0544 <loop+0x264>)
 80a0432:	681b      	ldr	r3, [r3, #0]
 80a0434:	4298      	cmp	r0, r3
 80a0436:	dbf3      	blt.n	80a0420 <loop+0x140>
            setShutter(LOW);
 80a0438:	2000      	movs	r0, #0
 80a043a:	f7ff fe53 	bl	80a00e4 <_Z10setShutteri>
            setPhase(BlackFrameDelay);
 80a043e:	2004      	movs	r0, #4
 80a0440:	e7c1      	b.n	80a03c6 <loop+0xe6>
          startPhase();
 80a0442:	f7ff fe3d 	bl	80a00c0 <_Z10startPhasev>
          switch (currentBracketShot) {
 80a0446:	4b3c      	ldr	r3, [pc, #240]	; (80a0538 <loop+0x258>)
 80a0448:	781b      	ldrb	r3, [r3, #0]
 80a044a:	2b01      	cmp	r3, #1
 80a044c:	d00b      	beq.n	80a0466 <loop+0x186>
 80a044e:	2b02      	cmp	r3, #2
 80a0450:	d00e      	beq.n	80a0470 <loop+0x190>
 80a0452:	2b00      	cmp	r3, #0
 80a0454:	d1ce      	bne.n	80a03f4 <loop+0x114>
              currentBracketExposureDuration = exposureLengthMillis - bracketExposureLengthMillis;
 80a0456:	4b29      	ldr	r3, [pc, #164]	; (80a04fc <loop+0x21c>)
 80a0458:	4a2b      	ldr	r2, [pc, #172]	; (80a0508 <loop+0x228>)
 80a045a:	681b      	ldr	r3, [r3, #0]
 80a045c:	6812      	ldr	r2, [r2, #0]
 80a045e:	1a9b      	subs	r3, r3, r2
              currentBracketExposureDuration = exposureLengthMillis + bracketExposureLengthMillis;
 80a0460:	4a38      	ldr	r2, [pc, #224]	; (80a0544 <loop+0x264>)
 80a0462:	6013      	str	r3, [r2, #0]
              break;
 80a0464:	e7c6      	b.n	80a03f4 <loop+0x114>
              currentBracketExposureDuration = exposureLengthMillis;
 80a0466:	4b25      	ldr	r3, [pc, #148]	; (80a04fc <loop+0x21c>)
 80a0468:	681a      	ldr	r2, [r3, #0]
 80a046a:	4b36      	ldr	r3, [pc, #216]	; (80a0544 <loop+0x264>)
 80a046c:	601a      	str	r2, [r3, #0]
              break;
 80a046e:	e7c1      	b.n	80a03f4 <loop+0x114>
              currentBracketExposureDuration = exposureLengthMillis + bracketExposureLengthMillis;
 80a0470:	4b22      	ldr	r3, [pc, #136]	; (80a04fc <loop+0x21c>)
 80a0472:	4a25      	ldr	r2, [pc, #148]	; (80a0508 <loop+0x228>)
 80a0474:	681b      	ldr	r3, [r3, #0]
 80a0476:	6812      	ldr	r2, [r2, #0]
 80a0478:	4413      	add	r3, r2
 80a047a:	e7f1      	b.n	80a0460 <loop+0x180>
        if (blackFrameEnabled){
 80a047c:	4b1d      	ldr	r3, [pc, #116]	; (80a04f4 <loop+0x214>)
 80a047e:	781b      	ldrb	r3, [r3, #0]
 80a0480:	b14b      	cbz	r3, 80a0496 <loop+0x1b6>
  return currentPhaseStartTime > -1;
 80a0482:	4b23      	ldr	r3, [pc, #140]	; (80a0510 <loop+0x230>)
          if (phaseStarted()){
 80a0484:	681b      	ldr	r3, [r3, #0]
 80a0486:	2b00      	cmp	r3, #0
 80a0488:	dbc8      	blt.n	80a041c <loop+0x13c>
            if (phaseElapsedTime() >= currentBracketExposureDuration){
 80a048a:	f7ff fe21 	bl	80a00d0 <_Z16phaseElapsedTimev>
 80a048e:	4b2d      	ldr	r3, [pc, #180]	; (80a0544 <loop+0x264>)
 80a0490:	681b      	ldr	r3, [r3, #0]
 80a0492:	4298      	cmp	r0, r3
 80a0494:	dbc4      	blt.n	80a0420 <loop+0x140>
              setPhase(Processing);
 80a0496:	2005      	movs	r0, #5
 80a0498:	e795      	b.n	80a03c6 <loop+0xe6>
  return currentPhaseStartTime > -1;
 80a049a:	4b1d      	ldr	r3, [pc, #116]	; (80a0510 <loop+0x230>)
        if (phaseStarted()){
 80a049c:	681b      	ldr	r3, [r3, #0]
 80a049e:	2b00      	cmp	r3, #0
 80a04a0:	dbbc      	blt.n	80a041c <loop+0x13c>
          if (phaseElapsedTime() >= processingDuration){
 80a04a2:	f7ff fe15 	bl	80a00d0 <_Z16phaseElapsedTimev>
 80a04a6:	4b28      	ldr	r3, [pc, #160]	; (80a0548 <loop+0x268>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	4298      	cmp	r0, r3
 80a04ac:	dbb8      	blt.n	80a0420 <loop+0x140>
            if (bracketExposureLengthMillis == 0){
 80a04ae:	4b16      	ldr	r3, [pc, #88]	; (80a0508 <loop+0x228>)
 80a04b0:	6818      	ldr	r0, [r3, #0]
 80a04b2:	2800      	cmp	r0, #0
 80a04b4:	d087      	beq.n	80a03c6 <loop+0xe6>
              switch(currentBracketShot){
 80a04b6:	4b20      	ldr	r3, [pc, #128]	; (80a0538 <loop+0x258>)
 80a04b8:	7818      	ldrb	r0, [r3, #0]
 80a04ba:	2801      	cmp	r0, #1
 80a04bc:	d006      	beq.n	80a04cc <loop+0x1ec>
 80a04be:	2802      	cmp	r0, #2
 80a04c0:	d007      	beq.n	80a04d2 <loop+0x1f2>
 80a04c2:	2800      	cmp	r0, #0
 80a04c4:	d1ac      	bne.n	80a0420 <loop+0x140>
                  currentBracketShot = Exposed;
 80a04c6:	2001      	movs	r0, #1
 80a04c8:	7018      	strb	r0, [r3, #0]
                  setPhase(MirrorLockupDelay);
 80a04ca:	e77c      	b.n	80a03c6 <loop+0xe6>
                  currentBracketShot = OverExposed;
 80a04cc:	2202      	movs	r2, #2
 80a04ce:	701a      	strb	r2, [r3, #0]
                  setPhase(MirrorLockupDelay);
 80a04d0:	e779      	b.n	80a03c6 <loop+0xe6>
                  setPhase(None);
 80a04d2:	2000      	movs	r0, #0
 80a04d4:	e777      	b.n	80a03c6 <loop+0xe6>
 80a04d6:	bf00      	nop
 80a04d8:	20000210 	.word	0x20000210
 80a04dc:	20000024 	.word	0x20000024
 80a04e0:	080a4377 	.word	0x080a4377
 80a04e4:	20000018 	.word	0x20000018
 80a04e8:	080a4382 	.word	0x080a4382
 80a04ec:	20000010 	.word	0x20000010
 80a04f0:	080a438b 	.word	0x080a438b
 80a04f4:	20000004 	.word	0x20000004
 80a04f8:	080a4392 	.word	0x080a4392
 80a04fc:	20000008 	.word	0x20000008
 80a0500:	080a439d 	.word	0x080a439d
 80a0504:	20000218 	.word	0x20000218
 80a0508:	2000020c 	.word	0x2000020c
 80a050c:	080a43a6 	.word	0x080a43a6
 80a0510:	2000021c 	.word	0x2000021c
 80a0514:	080a43ae 	.word	0x080a43ae
 80a0518:	080a4366 	.word	0x080a4366
 80a051c:	20000224 	.word	0x20000224
 80a0520:	080a43b9 	.word	0x080a43b9
 80a0524:	080a43c3 	.word	0x080a43c3
 80a0528:	080a0249 	.word	0x080a0249
 80a052c:	080a0dcb 	.word	0x080a0dcb
 80a0530:	20000028 	.word	0x20000028
 80a0534:	20000228 	.word	0x20000228
 80a0538:	20000005 	.word	0x20000005
 80a053c:	20000014 	.word	0x20000014
 80a0540:	2000000c 	.word	0x2000000c
 80a0544:	20000214 	.word	0x20000214
 80a0548:	2000001c 	.word	0x2000001c

080a054c <_GLOBAL__sub_I_shutterPin>:
        val_(val) {
 80a054c:	2100      	movs	r1, #0
 80a054e:	4b02      	ldr	r3, [pc, #8]	; (80a0558 <_GLOBAL__sub_I_shutterPin+0xc>)
SYSTEM_THREAD(ENABLED); //enables system functions to happen in a separate thread from the application setup and loop
 80a0550:	2001      	movs	r0, #1
 80a0552:	7019      	strb	r1, [r3, #0]
 80a0554:	f000 b90c 	b.w	80a0770 <system_thread_set_state>
 80a0558:	20000208 	.word	0x20000208

080a055c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a055c:	b508      	push	{r3, lr}
 80a055e:	4b02      	ldr	r3, [pc, #8]	; (80a0568 <HAL_Pin_Mode+0xc>)
 80a0560:	681b      	ldr	r3, [r3, #0]
 80a0562:	689b      	ldr	r3, [r3, #8]
 80a0564:	9301      	str	r3, [sp, #4]
 80a0566:	bd08      	pop	{r3, pc}
 80a0568:	080601b0 	.word	0x080601b0

080a056c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a056c:	b508      	push	{r3, lr}
 80a056e:	4b02      	ldr	r3, [pc, #8]	; (80a0578 <HAL_Get_Pin_Mode+0xc>)
 80a0570:	681b      	ldr	r3, [r3, #0]
 80a0572:	68db      	ldr	r3, [r3, #12]
 80a0574:	9301      	str	r3, [sp, #4]
 80a0576:	bd08      	pop	{r3, pc}
 80a0578:	080601b0 	.word	0x080601b0

080a057c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a057c:	b508      	push	{r3, lr}
 80a057e:	4b02      	ldr	r3, [pc, #8]	; (80a0588 <HAL_GPIO_Write+0xc>)
 80a0580:	681b      	ldr	r3, [r3, #0]
 80a0582:	691b      	ldr	r3, [r3, #16]
 80a0584:	9301      	str	r3, [sp, #4]
 80a0586:	bd08      	pop	{r3, pc}
 80a0588:	080601b0 	.word	0x080601b0

080a058c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a058c:	b508      	push	{r3, lr}
 80a058e:	4b02      	ldr	r3, [pc, #8]	; (80a0598 <HAL_GPIO_Read+0xc>)
 80a0590:	681b      	ldr	r3, [r3, #0]
 80a0592:	695b      	ldr	r3, [r3, #20]
 80a0594:	9301      	str	r3, [sp, #4]
 80a0596:	bd08      	pop	{r3, pc}
 80a0598:	080601b0 	.word	0x080601b0

080a059c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a059c:	b508      	push	{r3, lr}
 80a059e:	4b02      	ldr	r3, [pc, #8]	; (80a05a8 <HAL_RNG_GetRandomNumber+0xc>)
 80a05a0:	681b      	ldr	r3, [r3, #0]
 80a05a2:	685b      	ldr	r3, [r3, #4]
 80a05a4:	9301      	str	r3, [sp, #4]
 80a05a6:	bd08      	pop	{r3, pc}
 80a05a8:	0806019c 	.word	0x0806019c

080a05ac <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a05ac:	b508      	push	{r3, lr}
 80a05ae:	4b02      	ldr	r3, [pc, #8]	; (80a05b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a05b0:	681b      	ldr	r3, [r3, #0]
 80a05b2:	695b      	ldr	r3, [r3, #20]
 80a05b4:	9301      	str	r3, [sp, #4]
 80a05b6:	bd08      	pop	{r3, pc}
 80a05b8:	0806019c 	.word	0x0806019c

080a05bc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a05bc:	b508      	push	{r3, lr}
 80a05be:	4b02      	ldr	r3, [pc, #8]	; (80a05c8 <os_mutex_recursive_create+0xc>)
 80a05c0:	681b      	ldr	r3, [r3, #0]
 80a05c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a05c4:	9301      	str	r3, [sp, #4]
 80a05c6:	bd08      	pop	{r3, pc}
 80a05c8:	080601d0 	.word	0x080601d0

080a05cc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a05cc:	b508      	push	{r3, lr}
 80a05ce:	4b02      	ldr	r3, [pc, #8]	; (80a05d8 <os_mutex_recursive_destroy+0xc>)
 80a05d0:	681b      	ldr	r3, [r3, #0]
 80a05d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a05d4:	9301      	str	r3, [sp, #4]
 80a05d6:	bd08      	pop	{r3, pc}
 80a05d8:	080601d0 	.word	0x080601d0

080a05dc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a05dc:	b508      	push	{r3, lr}
 80a05de:	4b02      	ldr	r3, [pc, #8]	; (80a05e8 <hal_usart_init+0xc>)
 80a05e0:	681b      	ldr	r3, [r3, #0]
 80a05e2:	699b      	ldr	r3, [r3, #24]
 80a05e4:	9301      	str	r3, [sp, #4]
 80a05e6:	bd08      	pop	{r3, pc}
 80a05e8:	080601c4 	.word	0x080601c4

080a05ec <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a05ec:	b508      	push	{r3, lr}
 80a05ee:	4b02      	ldr	r3, [pc, #8]	; (80a05f8 <hal_usart_write+0xc>)
 80a05f0:	681b      	ldr	r3, [r3, #0]
 80a05f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a05f4:	9301      	str	r3, [sp, #4]
 80a05f6:	bd08      	pop	{r3, pc}
 80a05f8:	080601c4 	.word	0x080601c4

080a05fc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a05fc:	b508      	push	{r3, lr}
 80a05fe:	4b02      	ldr	r3, [pc, #8]	; (80a0608 <hal_usart_available+0xc>)
 80a0600:	681b      	ldr	r3, [r3, #0]
 80a0602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0604:	9301      	str	r3, [sp, #4]
 80a0606:	bd08      	pop	{r3, pc}
 80a0608:	080601c4 	.word	0x080601c4

080a060c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a060c:	b508      	push	{r3, lr}
 80a060e:	4b02      	ldr	r3, [pc, #8]	; (80a0618 <hal_usart_read+0xc>)
 80a0610:	681b      	ldr	r3, [r3, #0]
 80a0612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0614:	9301      	str	r3, [sp, #4]
 80a0616:	bd08      	pop	{r3, pc}
 80a0618:	080601c4 	.word	0x080601c4

080a061c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a061c:	b508      	push	{r3, lr}
 80a061e:	4b02      	ldr	r3, [pc, #8]	; (80a0628 <hal_usart_peek+0xc>)
 80a0620:	681b      	ldr	r3, [r3, #0]
 80a0622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0624:	9301      	str	r3, [sp, #4]
 80a0626:	bd08      	pop	{r3, pc}
 80a0628:	080601c4 	.word	0x080601c4

080a062c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a062c:	b508      	push	{r3, lr}
 80a062e:	4b02      	ldr	r3, [pc, #8]	; (80a0638 <hal_usart_flush+0xc>)
 80a0630:	681b      	ldr	r3, [r3, #0]
 80a0632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0634:	9301      	str	r3, [sp, #4]
 80a0636:	bd08      	pop	{r3, pc}
 80a0638:	080601c4 	.word	0x080601c4

080a063c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a063c:	b508      	push	{r3, lr}
 80a063e:	4b02      	ldr	r3, [pc, #8]	; (80a0648 <hal_usart_is_enabled+0xc>)
 80a0640:	681b      	ldr	r3, [r3, #0]
 80a0642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0644:	9301      	str	r3, [sp, #4]
 80a0646:	bd08      	pop	{r3, pc}
 80a0648:	080601c4 	.word	0x080601c4

080a064c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a064c:	b508      	push	{r3, lr}
 80a064e:	4b02      	ldr	r3, [pc, #8]	; (80a0658 <hal_usart_available_data_for_write+0xc>)
 80a0650:	681b      	ldr	r3, [r3, #0]
 80a0652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0654:	9301      	str	r3, [sp, #4]
 80a0656:	bd08      	pop	{r3, pc}
 80a0658:	080601c4 	.word	0x080601c4

080a065c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a065c:	b508      	push	{r3, lr}
 80a065e:	4b02      	ldr	r3, [pc, #8]	; (80a0668 <hal_i2c_write+0xc>)
 80a0660:	681b      	ldr	r3, [r3, #0]
 80a0662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0664:	9301      	str	r3, [sp, #4]
 80a0666:	bd08      	pop	{r3, pc}
 80a0668:	080601ac 	.word	0x080601ac

080a066c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a066c:	b508      	push	{r3, lr}
 80a066e:	4b02      	ldr	r3, [pc, #8]	; (80a0678 <hal_i2c_available+0xc>)
 80a0670:	681b      	ldr	r3, [r3, #0]
 80a0672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0674:	9301      	str	r3, [sp, #4]
 80a0676:	bd08      	pop	{r3, pc}
 80a0678:	080601ac 	.word	0x080601ac

080a067c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a067c:	b508      	push	{r3, lr}
 80a067e:	4b02      	ldr	r3, [pc, #8]	; (80a0688 <hal_i2c_read+0xc>)
 80a0680:	681b      	ldr	r3, [r3, #0]
 80a0682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0684:	9301      	str	r3, [sp, #4]
 80a0686:	bd08      	pop	{r3, pc}
 80a0688:	080601ac 	.word	0x080601ac

080a068c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a068c:	b508      	push	{r3, lr}
 80a068e:	4b02      	ldr	r3, [pc, #8]	; (80a0698 <hal_i2c_peek+0xc>)
 80a0690:	681b      	ldr	r3, [r3, #0]
 80a0692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0694:	9301      	str	r3, [sp, #4]
 80a0696:	bd08      	pop	{r3, pc}
 80a0698:	080601ac 	.word	0x080601ac

080a069c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a069c:	b508      	push	{r3, lr}
 80a069e:	4b02      	ldr	r3, [pc, #8]	; (80a06a8 <hal_i2c_flush+0xc>)
 80a06a0:	681b      	ldr	r3, [r3, #0]
 80a06a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a06a4:	9301      	str	r3, [sp, #4]
 80a06a6:	bd08      	pop	{r3, pc}
 80a06a8:	080601ac 	.word	0x080601ac

080a06ac <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a06ac:	b508      	push	{r3, lr}
 80a06ae:	4b02      	ldr	r3, [pc, #8]	; (80a06b8 <hal_i2c_is_enabled+0xc>)
 80a06b0:	681b      	ldr	r3, [r3, #0]
 80a06b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a06b4:	9301      	str	r3, [sp, #4]
 80a06b6:	bd08      	pop	{r3, pc}
 80a06b8:	080601ac 	.word	0x080601ac

080a06bc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a06bc:	b508      	push	{r3, lr}
 80a06be:	4b03      	ldr	r3, [pc, #12]	; (80a06cc <hal_i2c_init+0x10>)
 80a06c0:	681b      	ldr	r3, [r3, #0]
 80a06c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a06c6:	9301      	str	r3, [sp, #4]
 80a06c8:	bd08      	pop	{r3, pc}
 80a06ca:	0000      	.short	0x0000
 80a06cc:	080601ac 	.word	0x080601ac

080a06d0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a06d0:	b508      	push	{r3, lr}
 80a06d2:	4b02      	ldr	r3, [pc, #8]	; (80a06dc <hal_spi_init+0xc>)
 80a06d4:	681b      	ldr	r3, [r3, #0]
 80a06d6:	69db      	ldr	r3, [r3, #28]
 80a06d8:	9301      	str	r3, [sp, #4]
 80a06da:	bd08      	pop	{r3, pc}
 80a06dc:	080601b4 	.word	0x080601b4

080a06e0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a06e0:	b508      	push	{r3, lr}
 80a06e2:	4b02      	ldr	r3, [pc, #8]	; (80a06ec <hal_spi_is_enabled+0xc>)
 80a06e4:	681b      	ldr	r3, [r3, #0]
 80a06e6:	6a1b      	ldr	r3, [r3, #32]
 80a06e8:	9301      	str	r3, [sp, #4]
 80a06ea:	bd08      	pop	{r3, pc}
 80a06ec:	080601b4 	.word	0x080601b4

080a06f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a06f0:	b508      	push	{r3, lr}
 80a06f2:	4b02      	ldr	r3, [pc, #8]	; (80a06fc <HAL_USB_USART_Init+0xc>)
 80a06f4:	681b      	ldr	r3, [r3, #0]
 80a06f6:	681b      	ldr	r3, [r3, #0]
 80a06f8:	9301      	str	r3, [sp, #4]
 80a06fa:	bd08      	pop	{r3, pc}
 80a06fc:	080601d8 	.word	0x080601d8

080a0700 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0700:	b508      	push	{r3, lr}
 80a0702:	4b02      	ldr	r3, [pc, #8]	; (80a070c <HAL_USB_USART_Available_Data+0xc>)
 80a0704:	681b      	ldr	r3, [r3, #0]
 80a0706:	691b      	ldr	r3, [r3, #16]
 80a0708:	9301      	str	r3, [sp, #4]
 80a070a:	bd08      	pop	{r3, pc}
 80a070c:	080601d8 	.word	0x080601d8

080a0710 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0710:	b508      	push	{r3, lr}
 80a0712:	4b02      	ldr	r3, [pc, #8]	; (80a071c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0714:	681b      	ldr	r3, [r3, #0]
 80a0716:	695b      	ldr	r3, [r3, #20]
 80a0718:	9301      	str	r3, [sp, #4]
 80a071a:	bd08      	pop	{r3, pc}
 80a071c:	080601d8 	.word	0x080601d8

080a0720 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0720:	b508      	push	{r3, lr}
 80a0722:	4b02      	ldr	r3, [pc, #8]	; (80a072c <HAL_USB_USART_Receive_Data+0xc>)
 80a0724:	681b      	ldr	r3, [r3, #0]
 80a0726:	699b      	ldr	r3, [r3, #24]
 80a0728:	9301      	str	r3, [sp, #4]
 80a072a:	bd08      	pop	{r3, pc}
 80a072c:	080601d8 	.word	0x080601d8

080a0730 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0730:	b508      	push	{r3, lr}
 80a0732:	4b02      	ldr	r3, [pc, #8]	; (80a073c <HAL_USB_USART_Send_Data+0xc>)
 80a0734:	681b      	ldr	r3, [r3, #0]
 80a0736:	69db      	ldr	r3, [r3, #28]
 80a0738:	9301      	str	r3, [sp, #4]
 80a073a:	bd08      	pop	{r3, pc}
 80a073c:	080601d8 	.word	0x080601d8

080a0740 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0740:	b508      	push	{r3, lr}
 80a0742:	4b02      	ldr	r3, [pc, #8]	; (80a074c <HAL_USB_USART_Flush_Data+0xc>)
 80a0744:	681b      	ldr	r3, [r3, #0]
 80a0746:	6a1b      	ldr	r3, [r3, #32]
 80a0748:	9301      	str	r3, [sp, #4]
 80a074a:	bd08      	pop	{r3, pc}
 80a074c:	080601d8 	.word	0x080601d8

080a0750 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0750:	b508      	push	{r3, lr}
 80a0752:	4b02      	ldr	r3, [pc, #8]	; (80a075c <inet_gethostbyname+0xc>)
 80a0754:	681b      	ldr	r3, [r3, #0]
 80a0756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0758:	9301      	str	r3, [sp, #4]
 80a075a:	bd08      	pop	{r3, pc}
 80a075c:	080601c0 	.word	0x080601c0

080a0760 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0760:	b508      	push	{r3, lr}
 80a0762:	4b02      	ldr	r3, [pc, #8]	; (80a076c <set_system_mode+0xc>)
 80a0764:	681b      	ldr	r3, [r3, #0]
 80a0766:	685b      	ldr	r3, [r3, #4]
 80a0768:	9301      	str	r3, [sp, #4]
 80a076a:	bd08      	pop	{r3, pc}
 80a076c:	080601a4 	.word	0x080601a4

080a0770 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0770:	b508      	push	{r3, lr}
 80a0772:	4b02      	ldr	r3, [pc, #8]	; (80a077c <system_thread_set_state+0xc>)
 80a0774:	681b      	ldr	r3, [r3, #0]
 80a0776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0778:	9301      	str	r3, [sp, #4]
 80a077a:	bd08      	pop	{r3, pc}
 80a077c:	080601a4 	.word	0x080601a4

080a0780 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0780:	b508      	push	{r3, lr}
 80a0782:	4b02      	ldr	r3, [pc, #8]	; (80a078c <application_thread_current+0xc>)
 80a0784:	681b      	ldr	r3, [r3, #0]
 80a0786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0788:	9301      	str	r3, [sp, #4]
 80a078a:	bd08      	pop	{r3, pc}
 80a078c:	080601a4 	.word	0x080601a4

080a0790 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0790:	b508      	push	{r3, lr}
 80a0792:	4b02      	ldr	r3, [pc, #8]	; (80a079c <application_thread_invoke+0xc>)
 80a0794:	681b      	ldr	r3, [r3, #0]
 80a0796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0798:	9301      	str	r3, [sp, #4]
 80a079a:	bd08      	pop	{r3, pc}
 80a079c:	080601a4 	.word	0x080601a4

080a07a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a07a0:	b508      	push	{r3, lr}
 80a07a2:	4b03      	ldr	r3, [pc, #12]	; (80a07b0 <system_ctrl_set_app_request_handler+0x10>)
 80a07a4:	681b      	ldr	r3, [r3, #0]
 80a07a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a07aa:	9301      	str	r3, [sp, #4]
 80a07ac:	bd08      	pop	{r3, pc}
 80a07ae:	0000      	.short	0x0000
 80a07b0:	080601a4 	.word	0x080601a4

080a07b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a07b4:	b508      	push	{r3, lr}
 80a07b6:	4b03      	ldr	r3, [pc, #12]	; (80a07c4 <system_ctrl_set_result+0x10>)
 80a07b8:	681b      	ldr	r3, [r3, #0]
 80a07ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a07be:	9301      	str	r3, [sp, #4]
 80a07c0:	bd08      	pop	{r3, pc}
 80a07c2:	0000      	.short	0x0000
 80a07c4:	080601a4 	.word	0x080601a4

080a07c8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a07c8:	b508      	push	{r3, lr}
 80a07ca:	4b02      	ldr	r3, [pc, #8]	; (80a07d4 <network_connect+0xc>)
 80a07cc:	681b      	ldr	r3, [r3, #0]
 80a07ce:	685b      	ldr	r3, [r3, #4]
 80a07d0:	9301      	str	r3, [sp, #4]
 80a07d2:	bd08      	pop	{r3, pc}
 80a07d4:	080601c8 	.word	0x080601c8

080a07d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a07d8:	b508      	push	{r3, lr}
 80a07da:	4b02      	ldr	r3, [pc, #8]	; (80a07e4 <network_connecting+0xc>)
 80a07dc:	681b      	ldr	r3, [r3, #0]
 80a07de:	689b      	ldr	r3, [r3, #8]
 80a07e0:	9301      	str	r3, [sp, #4]
 80a07e2:	bd08      	pop	{r3, pc}
 80a07e4:	080601c8 	.word	0x080601c8

080a07e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a07e8:	b508      	push	{r3, lr}
 80a07ea:	4b02      	ldr	r3, [pc, #8]	; (80a07f4 <network_disconnect+0xc>)
 80a07ec:	681b      	ldr	r3, [r3, #0]
 80a07ee:	68db      	ldr	r3, [r3, #12]
 80a07f0:	9301      	str	r3, [sp, #4]
 80a07f2:	bd08      	pop	{r3, pc}
 80a07f4:	080601c8 	.word	0x080601c8

080a07f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a07f8:	b508      	push	{r3, lr}
 80a07fa:	4b02      	ldr	r3, [pc, #8]	; (80a0804 <network_ready+0xc>)
 80a07fc:	681b      	ldr	r3, [r3, #0]
 80a07fe:	691b      	ldr	r3, [r3, #16]
 80a0800:	9301      	str	r3, [sp, #4]
 80a0802:	bd08      	pop	{r3, pc}
 80a0804:	080601c8 	.word	0x080601c8

080a0808 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0808:	b508      	push	{r3, lr}
 80a080a:	4b02      	ldr	r3, [pc, #8]	; (80a0814 <network_on+0xc>)
 80a080c:	681b      	ldr	r3, [r3, #0]
 80a080e:	695b      	ldr	r3, [r3, #20]
 80a0810:	9301      	str	r3, [sp, #4]
 80a0812:	bd08      	pop	{r3, pc}
 80a0814:	080601c8 	.word	0x080601c8

080a0818 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0818:	b508      	push	{r3, lr}
 80a081a:	4b02      	ldr	r3, [pc, #8]	; (80a0824 <network_off+0xc>)
 80a081c:	681b      	ldr	r3, [r3, #0]
 80a081e:	699b      	ldr	r3, [r3, #24]
 80a0820:	9301      	str	r3, [sp, #4]
 80a0822:	bd08      	pop	{r3, pc}
 80a0824:	080601c8 	.word	0x080601c8

080a0828 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0828:	b508      	push	{r3, lr}
 80a082a:	4b02      	ldr	r3, [pc, #8]	; (80a0834 <network_listen+0xc>)
 80a082c:	681b      	ldr	r3, [r3, #0]
 80a082e:	69db      	ldr	r3, [r3, #28]
 80a0830:	9301      	str	r3, [sp, #4]
 80a0832:	bd08      	pop	{r3, pc}
 80a0834:	080601c8 	.word	0x080601c8

080a0838 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0838:	b508      	push	{r3, lr}
 80a083a:	4b02      	ldr	r3, [pc, #8]	; (80a0844 <network_listening+0xc>)
 80a083c:	681b      	ldr	r3, [r3, #0]
 80a083e:	6a1b      	ldr	r3, [r3, #32]
 80a0840:	9301      	str	r3, [sp, #4]
 80a0842:	bd08      	pop	{r3, pc}
 80a0844:	080601c8 	.word	0x080601c8

080a0848 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <network_set_listen_timeout+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601c8 	.word	0x080601c8

080a0858 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <network_get_listen_timeout+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601c8 	.word	0x080601c8

080a0868 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <spark_variable+0xc>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	681b      	ldr	r3, [r3, #0]
 80a0870:	9301      	str	r3, [sp, #4]
 80a0872:	bd08      	pop	{r3, pc}
 80a0874:	080601cc 	.word	0x080601cc

080a0878 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <spark_function+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	685b      	ldr	r3, [r3, #4]
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	080601cc 	.word	0x080601cc

080a0888 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <spark_process+0xc>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	689b      	ldr	r3, [r3, #8]
 80a0890:	9301      	str	r3, [sp, #4]
 80a0892:	bd08      	pop	{r3, pc}
 80a0894:	080601cc 	.word	0x080601cc

080a0898 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0898:	b508      	push	{r3, lr}
 80a089a:	4b02      	ldr	r3, [pc, #8]	; (80a08a4 <spark_cloud_flag_connected+0xc>)
 80a089c:	681b      	ldr	r3, [r3, #0]
 80a089e:	695b      	ldr	r3, [r3, #20]
 80a08a0:	9301      	str	r3, [sp, #4]
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	080601cc 	.word	0x080601cc

080a08a8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a08a8:	b508      	push	{r3, lr}
 80a08aa:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <spark_send_event+0xc>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	6a1b      	ldr	r3, [r3, #32]
 80a08b0:	9301      	str	r3, [sp, #4]
 80a08b2:	bd08      	pop	{r3, pc}
 80a08b4:	080601cc 	.word	0x080601cc

080a08b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a08b8:	b508      	push	{r3, lr}
 80a08ba:	4b02      	ldr	r3, [pc, #8]	; (80a08c4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a08bc:	681b      	ldr	r3, [r3, #0]
 80a08be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a08c0:	9301      	str	r3, [sp, #4]
 80a08c2:	bd08      	pop	{r3, pc}
 80a08c4:	080601cc 	.word	0x080601cc

080a08c8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a08c8:	b508      	push	{r3, lr}
 80a08ca:	4b02      	ldr	r3, [pc, #8]	; (80a08d4 <malloc+0xc>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	681b      	ldr	r3, [r3, #0]
 80a08d0:	9301      	str	r3, [sp, #4]
 80a08d2:	bd08      	pop	{r3, pc}
 80a08d4:	080601a0 	.word	0x080601a0

080a08d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a08d8:	b508      	push	{r3, lr}
 80a08da:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <free+0xc>)
 80a08dc:	681b      	ldr	r3, [r3, #0]
 80a08de:	685b      	ldr	r3, [r3, #4]
 80a08e0:	9301      	str	r3, [sp, #4]
 80a08e2:	bd08      	pop	{r3, pc}
 80a08e4:	080601a0 	.word	0x080601a0

080a08e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a08e8:	b508      	push	{r3, lr}
 80a08ea:	4b02      	ldr	r3, [pc, #8]	; (80a08f4 <realloc+0xc>)
 80a08ec:	681b      	ldr	r3, [r3, #0]
 80a08ee:	689b      	ldr	r3, [r3, #8]
 80a08f0:	9301      	str	r3, [sp, #4]
 80a08f2:	bd08      	pop	{r3, pc}
 80a08f4:	080601a0 	.word	0x080601a0

080a08f8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a08f8:	b508      	push	{r3, lr}
 80a08fa:	4b02      	ldr	r3, [pc, #8]	; (80a0904 <abort+0xc>)
 80a08fc:	681b      	ldr	r3, [r3, #0]
 80a08fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0900:	9301      	str	r3, [sp, #4]
 80a0902:	bd08      	pop	{r3, pc}
 80a0904:	080601a0 	.word	0x080601a0

080a0908 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0908:	b508      	push	{r3, lr}
 80a090a:	4b02      	ldr	r3, [pc, #8]	; (80a0914 <_malloc_r+0xc>)
 80a090c:	681b      	ldr	r3, [r3, #0]
 80a090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0910:	9301      	str	r3, [sp, #4]
 80a0912:	bd08      	pop	{r3, pc}
 80a0914:	080601a0 	.word	0x080601a0

080a0918 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0918:	b508      	push	{r3, lr}
 80a091a:	4b02      	ldr	r3, [pc, #8]	; (80a0924 <newlib_impure_ptr_callback+0xc>)
 80a091c:	681b      	ldr	r3, [r3, #0]
 80a091e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0920:	9301      	str	r3, [sp, #4]
 80a0922:	bd08      	pop	{r3, pc}
 80a0924:	080601a0 	.word	0x080601a0

080a0928 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0928:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a092a:	2600      	movs	r6, #0
 80a092c:	4604      	mov	r4, r0
 80a092e:	460d      	mov	r5, r1
 80a0930:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0934:	f7ff fe42 	bl	80a05bc <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0938:	4628      	mov	r0, r5
    _spi = spi;
 80a093a:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a093c:	f7ff fec8 	bl	80a06d0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0940:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0942:	6066      	str	r6, [r4, #4]
}
 80a0944:	bd70      	pop	{r4, r5, r6, pc}

080a0946 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0946:	b510      	push	{r4, lr}
 80a0948:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a094a:	6800      	ldr	r0, [r0, #0]
 80a094c:	b118      	cbz	r0, 80a0956 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a094e:	f7ff ffc3 	bl	80a08d8 <free>
            wakeupSource_ = nullptr;
 80a0952:	2300      	movs	r3, #0
 80a0954:	6023      	str	r3, [r4, #0]
        }
    }
 80a0956:	bd10      	pop	{r4, pc}

080a0958 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0958:	b510      	push	{r4, lr}
 80a095a:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a095c:	f7ff fff3 	bl	80a0946 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a0960:	4620      	mov	r0, r4
 80a0962:	bd10      	pop	{r4, pc}

080a0964 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0964:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a0966:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0968:	b510      	push	{r4, lr}
 80a096a:	4b08      	ldr	r3, [pc, #32]	; (80a098c <_GLOBAL__sub_I_System+0x28>)
 80a096c:	4c08      	ldr	r4, [pc, #32]	; (80a0990 <_GLOBAL__sub_I_System+0x2c>)
 80a096e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a0970:	4b08      	ldr	r3, [pc, #32]	; (80a0994 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a0972:	6020      	str	r0, [r4, #0]
 80a0974:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a0976:	71a0      	strb	r0, [r4, #6]
 80a0978:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a097a:	f7ff fef1 	bl	80a0760 <set_system_mode>
SystemClass System;
 80a097e:	4620      	mov	r0, r4
 80a0980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a0984:	4a04      	ldr	r2, [pc, #16]	; (80a0998 <_GLOBAL__sub_I_System+0x34>)
 80a0986:	4905      	ldr	r1, [pc, #20]	; (80a099c <_GLOBAL__sub_I_System+0x38>)
 80a0988:	f001 b83c 	b.w	80a1a04 <__aeabi_atexit>
 80a098c:	20000238 	.word	0x20000238
 80a0990:	2000022c 	.word	0x2000022c
 80a0994:	ffff0000 	.word	0xffff0000
 80a0998:	20000204 	.word	0x20000204
 80a099c:	080a0959 	.word	0x080a0959

080a09a0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a09a0:	b510      	push	{r4, lr}
 80a09a2:	4604      	mov	r4, r0
{
	free(buffer);
 80a09a4:	6800      	ldr	r0, [r0, #0]
 80a09a6:	f7ff ff97 	bl	80a08d8 <free>
}
 80a09aa:	4620      	mov	r0, r4
 80a09ac:	bd10      	pop	{r4, pc}

080a09ae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a09ae:	b510      	push	{r4, lr}
 80a09b0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a09b2:	6800      	ldr	r0, [r0, #0]
 80a09b4:	b108      	cbz	r0, 80a09ba <_ZN6String10invalidateEv+0xc>
 80a09b6:	f7ff ff8f 	bl	80a08d8 <free>
	buffer = NULL;
 80a09ba:	2300      	movs	r3, #0
	capacity = len = 0;
 80a09bc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a09c0:	6023      	str	r3, [r4, #0]
}
 80a09c2:	bd10      	pop	{r4, pc}

080a09c4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a09c4:	b538      	push	{r3, r4, r5, lr}
 80a09c6:	4604      	mov	r4, r0
 80a09c8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a09ca:	6800      	ldr	r0, [r0, #0]
 80a09cc:	3101      	adds	r1, #1
 80a09ce:	f7ff ff8b 	bl	80a08e8 <realloc>
	if (newbuffer) {
 80a09d2:	b110      	cbz	r0, 80a09da <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a09d4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a09d8:	2001      	movs	r0, #1
	}
	return 0;
}
 80a09da:	bd38      	pop	{r3, r4, r5, pc}

080a09dc <_ZN6String7reserveEj>:
{
 80a09dc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a09de:	6803      	ldr	r3, [r0, #0]
{
 80a09e0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a09e2:	b123      	cbz	r3, 80a09ee <_ZN6String7reserveEj+0x12>
 80a09e4:	6843      	ldr	r3, [r0, #4]
 80a09e6:	428b      	cmp	r3, r1
 80a09e8:	d301      	bcc.n	80a09ee <_ZN6String7reserveEj+0x12>
 80a09ea:	2001      	movs	r0, #1
}
 80a09ec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a09ee:	4620      	mov	r0, r4
 80a09f0:	f7ff ffe8 	bl	80a09c4 <_ZN6String12changeBufferEj>
 80a09f4:	2800      	cmp	r0, #0
 80a09f6:	d0f9      	beq.n	80a09ec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a09f8:	68a3      	ldr	r3, [r4, #8]
 80a09fa:	2b00      	cmp	r3, #0
 80a09fc:	d1f5      	bne.n	80a09ea <_ZN6String7reserveEj+0xe>
 80a09fe:	6822      	ldr	r2, [r4, #0]
 80a0a00:	7013      	strb	r3, [r2, #0]
 80a0a02:	e7f2      	b.n	80a09ea <_ZN6String7reserveEj+0xe>

080a0a04 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0a04:	b570      	push	{r4, r5, r6, lr}
 80a0a06:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0a08:	4611      	mov	r1, r2
{
 80a0a0a:	4604      	mov	r4, r0
 80a0a0c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0a0e:	f7ff ffe5 	bl	80a09dc <_ZN6String7reserveEj>
 80a0a12:	b920      	cbnz	r0, 80a0a1e <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a0a14:	4620      	mov	r0, r4
 80a0a16:	f7ff ffca 	bl	80a09ae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a0a1a:	4620      	mov	r0, r4
 80a0a1c:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a0a1e:	462a      	mov	r2, r5
 80a0a20:	4631      	mov	r1, r6
 80a0a22:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a0a24:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0a26:	f001 fe23 	bl	80a2670 <memcpy>
	buffer[len] = 0;
 80a0a2a:	2100      	movs	r1, #0
 80a0a2c:	6822      	ldr	r2, [r4, #0]
 80a0a2e:	68a3      	ldr	r3, [r4, #8]
 80a0a30:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a0a32:	e7f2      	b.n	80a0a1a <_ZN6String4copyEPKcj+0x16>

080a0a34 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a0a34:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a0a36:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a0a38:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0a3a:	460d      	mov	r5, r1
	capacity = 0;
 80a0a3c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0a40:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0a42:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a0a44:	b139      	cbz	r1, 80a0a56 <_ZN6StringC1EPKc+0x22>
 80a0a46:	4608      	mov	r0, r1
 80a0a48:	f001 fe67 	bl	80a271a <strlen>
 80a0a4c:	4629      	mov	r1, r5
 80a0a4e:	4602      	mov	r2, r0
 80a0a50:	4620      	mov	r0, r4
 80a0a52:	f7ff ffd7 	bl	80a0a04 <_ZN6String4copyEPKcj>
}
 80a0a56:	4620      	mov	r0, r4
 80a0a58:	bd38      	pop	{r3, r4, r5, pc}

080a0a5a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a0a5a:	4288      	cmp	r0, r1
{
 80a0a5c:	b510      	push	{r4, lr}
 80a0a5e:	460b      	mov	r3, r1
 80a0a60:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a0a62:	d004      	beq.n	80a0a6e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a0a64:	6809      	ldr	r1, [r1, #0]
 80a0a66:	b121      	cbz	r1, 80a0a72 <_ZN6StringaSERKS_+0x18>
 80a0a68:	689a      	ldr	r2, [r3, #8]
 80a0a6a:	f7ff ffcb 	bl	80a0a04 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a0a6e:	4620      	mov	r0, r4
 80a0a70:	bd10      	pop	{r4, pc}
	else invalidate();
 80a0a72:	f7ff ff9c 	bl	80a09ae <_ZN6String10invalidateEv>
 80a0a76:	e7fa      	b.n	80a0a6e <_ZN6StringaSERKS_+0x14>

080a0a78 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a0a78:	2300      	movs	r3, #0
String::String(const String &value)
 80a0a7a:	b510      	push	{r4, lr}
 80a0a7c:	4604      	mov	r4, r0
	capacity = 0;
 80a0a7e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0a82:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0a84:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a0a86:	f7ff ffe8 	bl	80a0a5a <_ZN6StringaSERKS_>
}
 80a0a8a:	4620      	mov	r0, r4
 80a0a8c:	bd10      	pop	{r4, pc}

080a0a8e <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
 80a0a8e:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 80a0a90:	6800      	ldr	r0, [r0, #0]
 80a0a92:	b120      	cbz	r0, 80a0a9e <_ZNK6String7toFloatEv+0x10>
 80a0a94:	f001 fdda 	bl	80a264c <atof>
 80a0a98:	f001 fc36 	bl	80a2308 <__aeabi_d2f>
	return 0;
}
 80a0a9c:	bd08      	pop	{r3, pc}
	return 0;
 80a0a9e:	2000      	movs	r0, #0
 80a0aa0:	e7fc      	b.n	80a0a9c <_ZNK6String7toFloatEv+0xe>

080a0aa2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0aa4:	4606      	mov	r6, r0
 80a0aa6:	460d      	mov	r5, r1
  size_t n = 0;
 80a0aa8:	2400      	movs	r4, #0
 80a0aaa:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0aac:	42bd      	cmp	r5, r7
 80a0aae:	d00c      	beq.n	80a0aca <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0ab0:	6833      	ldr	r3, [r6, #0]
 80a0ab2:	4630      	mov	r0, r6
 80a0ab4:	689b      	ldr	r3, [r3, #8]
 80a0ab6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0aba:	4798      	blx	r3
     if (chunk>=0)
 80a0abc:	1e03      	subs	r3, r0, #0
 80a0abe:	db01      	blt.n	80a0ac4 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0ac0:	441c      	add	r4, r3
  while (size--) {
 80a0ac2:	e7f3      	b.n	80a0aac <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0ac4:	2c00      	cmp	r4, #0
 80a0ac6:	bf08      	it	eq
 80a0ac8:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0aca:	4620      	mov	r0, r4
 80a0acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0ace <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0ace:	b570      	push	{r4, r5, r6, lr}
 80a0ad0:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0ad2:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0ad4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0ad6:	b149      	cbz	r1, 80a0aec <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0ad8:	f001 fe1f 	bl	80a271a <strlen>
 80a0adc:	682b      	ldr	r3, [r5, #0]
 80a0ade:	4602      	mov	r2, r0
 80a0ae0:	4621      	mov	r1, r4
 80a0ae2:	4628      	mov	r0, r5
    }
 80a0ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0ae8:	68db      	ldr	r3, [r3, #12]
 80a0aea:	4718      	bx	r3
    }
 80a0aec:	bd70      	pop	{r4, r5, r6, pc}

080a0aee <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0aee:	6803      	ldr	r3, [r0, #0]
 80a0af0:	689b      	ldr	r3, [r3, #8]
 80a0af2:	4718      	bx	r3

080a0af4 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0af4:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0af6:	2a01      	cmp	r2, #1
 80a0af8:	bf98      	it	ls
 80a0afa:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0afc:	b530      	push	{r4, r5, lr}
 80a0afe:	b08b      	sub	sp, #44	; 0x2c
 80a0b00:	460c      	mov	r4, r1
  *str = '\0';
 80a0b02:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0b06:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0b08:	4625      	mov	r5, r4
 80a0b0a:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0b0e:	fb04 5312 	mls	r3, r4, r2, r5
 80a0b12:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0b14:	2b09      	cmp	r3, #9
 80a0b16:	bf94      	ite	ls
 80a0b18:	3330      	addls	r3, #48	; 0x30
 80a0b1a:	3337      	addhi	r3, #55	; 0x37
 80a0b1c:	b2db      	uxtb	r3, r3
  } while(n);
 80a0b1e:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0b20:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0b24:	d9f0      	bls.n	80a0b08 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0b26:	f7ff ffd2 	bl	80a0ace <_ZN5Print5writeEPKc>
}
 80a0b2a:	b00b      	add	sp, #44	; 0x2c
 80a0b2c:	bd30      	pop	{r4, r5, pc}

080a0b2e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0b2e:	2300      	movs	r3, #0
 80a0b30:	6840      	ldr	r0, [r0, #4]
 80a0b32:	461a      	mov	r2, r3
 80a0b34:	4619      	mov	r1, r3
 80a0b36:	f7ff be67 	b.w	80a0808 <network_on>

080a0b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a0b3a:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a0b3c:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a0b3e:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a0b40:	b17c      	cbz	r4, 80a0b62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a0b42:	6863      	ldr	r3, [r4, #4]
 80a0b44:	3b01      	subs	r3, #1
 80a0b46:	6063      	str	r3, [r4, #4]
 80a0b48:	b95b      	cbnz	r3, 80a0b62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a0b4a:	6823      	ldr	r3, [r4, #0]
 80a0b4c:	4620      	mov	r0, r4
 80a0b4e:	689b      	ldr	r3, [r3, #8]
 80a0b50:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0b52:	68a3      	ldr	r3, [r4, #8]
 80a0b54:	3b01      	subs	r3, #1
 80a0b56:	60a3      	str	r3, [r4, #8]
 80a0b58:	b91b      	cbnz	r3, 80a0b62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0b5a:	6823      	ldr	r3, [r4, #0]
 80a0b5c:	4620      	mov	r0, r4
 80a0b5e:	68db      	ldr	r3, [r3, #12]
 80a0b60:	4798      	blx	r3
      }
 80a0b62:	4628      	mov	r0, r5
 80a0b64:	bd38      	pop	{r3, r4, r5, pc}

080a0b66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a0b66:	680b      	ldr	r3, [r1, #0]
 80a0b68:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a0b6a:	b113      	cbz	r3, 80a0b72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a0b6c:	685a      	ldr	r2, [r3, #4]
 80a0b6e:	3201      	adds	r2, #1
 80a0b70:	605a      	str	r2, [r3, #4]
      }
 80a0b72:	4770      	bx	lr

080a0b74 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0b74:	4b01      	ldr	r3, [pc, #4]	; (80a0b7c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0b76:	4a02      	ldr	r2, [pc, #8]	; (80a0b80 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0b78:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0b7a:	4770      	bx	lr
 80a0b7c:	2000023c 	.word	0x2000023c
 80a0b80:	080a4402 	.word	0x080a4402

080a0b84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0b84:	4b02      	ldr	r3, [pc, #8]	; (80a0b90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0b86:	681a      	ldr	r2, [r3, #0]
 80a0b88:	4b02      	ldr	r3, [pc, #8]	; (80a0b94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0b8a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0b8c:	4770      	bx	lr
 80a0b8e:	bf00      	nop
 80a0b90:	2000002c 	.word	0x2000002c
 80a0b94:	20000240 	.word	0x20000240

080a0b98 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0b98:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0b9a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0b9c:	4604      	mov	r4, r0
      if (_M_manager)
 80a0b9e:	b113      	cbz	r3, 80a0ba6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0ba0:	2203      	movs	r2, #3
 80a0ba2:	4601      	mov	r1, r0
 80a0ba4:	4798      	blx	r3
    }
 80a0ba6:	4620      	mov	r0, r4
 80a0ba8:	bd10      	pop	{r4, pc}

080a0baa <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0baa:	b510      	push	{r4, lr}
 80a0bac:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0bae:	f7ff fff3 	bl	80a0b98 <_ZNSt14_Function_baseD1Ev>
 80a0bb2:	4620      	mov	r0, r4
 80a0bb4:	bd10      	pop	{r4, pc}

080a0bb6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80a0bb6:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0bb8:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a0bba:	460b      	mov	r3, r1
 80a0bbc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0bbe:	c803      	ldmia	r0, {r0, r1}
 80a0bc0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0bc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0bc8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0bcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a0bd0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0bd4:	b002      	add	sp, #8
 80a0bd6:	bd10      	pop	{r4, pc}

080a0bd8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a0bd8:	2300      	movs	r3, #0
 80a0bda:	4803      	ldr	r0, [pc, #12]	; (80a0be8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0bdc:	4a03      	ldr	r2, [pc, #12]	; (80a0bec <_GLOBAL__sub_I_RGB+0x14>)
 80a0bde:	4904      	ldr	r1, [pc, #16]	; (80a0bf0 <_GLOBAL__sub_I_RGB+0x18>)
 80a0be0:	6083      	str	r3, [r0, #8]
 80a0be2:	f000 bf0f 	b.w	80a1a04 <__aeabi_atexit>
 80a0be6:	bf00      	nop
 80a0be8:	20000244 	.word	0x20000244
 80a0bec:	20000204 	.word	0x20000204
 80a0bf0:	080a0bab 	.word	0x080a0bab

080a0bf4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0bf4:	4b01      	ldr	r3, [pc, #4]	; (80a0bfc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0bf6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0bf8:	4770      	bx	lr
 80a0bfa:	bf00      	nop
 80a0bfc:	20000030 	.word	0x20000030

080a0c00 <serialEventRun>:
{
 80a0c00:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0c02:	4b13      	ldr	r3, [pc, #76]	; (80a0c50 <serialEventRun+0x50>)
 80a0c04:	b143      	cbz	r3, 80a0c18 <serialEventRun+0x18>
 80a0c06:	f000 fc1b 	bl	80a1440 <_Z16_fetch_usbserialv>
 80a0c0a:	6803      	ldr	r3, [r0, #0]
 80a0c0c:	691b      	ldr	r3, [r3, #16]
 80a0c0e:	4798      	blx	r3
 80a0c10:	2800      	cmp	r0, #0
 80a0c12:	dd01      	ble.n	80a0c18 <serialEventRun+0x18>
        serialEvent();
 80a0c14:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a0c18:	4b0e      	ldr	r3, [pc, #56]	; (80a0c54 <serialEventRun+0x54>)
 80a0c1a:	b143      	cbz	r3, 80a0c2e <serialEventRun+0x2e>
 80a0c1c:	f000 fcba 	bl	80a1594 <_Z22__fetch_global_Serial1v>
 80a0c20:	6803      	ldr	r3, [r0, #0]
 80a0c22:	691b      	ldr	r3, [r3, #16]
 80a0c24:	4798      	blx	r3
 80a0c26:	2800      	cmp	r0, #0
 80a0c28:	dd01      	ble.n	80a0c2e <serialEventRun+0x2e>
        serialEvent1();
 80a0c2a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a0c2e:	4b0a      	ldr	r3, [pc, #40]	; (80a0c58 <serialEventRun+0x58>)
 80a0c30:	b10b      	cbz	r3, 80a0c36 <serialEventRun+0x36>
 80a0c32:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0c36:	4b09      	ldr	r3, [pc, #36]	; (80a0c5c <serialEventRun+0x5c>)
 80a0c38:	b143      	cbz	r3, 80a0c4c <serialEventRun+0x4c>
 80a0c3a:	f000 fc31 	bl	80a14a0 <_Z17_fetch_usbserial1v>
 80a0c3e:	6803      	ldr	r3, [r0, #0]
 80a0c40:	691b      	ldr	r3, [r3, #16]
 80a0c42:	4798      	blx	r3
 80a0c44:	2800      	cmp	r0, #0
 80a0c46:	dd01      	ble.n	80a0c4c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0c48:	f3af 8000 	nop.w
}
 80a0c4c:	bd08      	pop	{r3, pc}
 80a0c4e:	bf00      	nop
	...

080a0c60 <_post_loop>:
{
 80a0c60:	b508      	push	{r3, lr}
	serialEventRun();
 80a0c62:	f7ff ffcd 	bl	80a0c00 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0c66:	f7ff fca1 	bl	80a05ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0c6a:	4b01      	ldr	r3, [pc, #4]	; (80a0c70 <_post_loop+0x10>)
 80a0c6c:	6018      	str	r0, [r3, #0]
}
 80a0c6e:	bd08      	pop	{r3, pc}
 80a0c70:	200002cc 	.word	0x200002cc

080a0c74 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0c74:	4802      	ldr	r0, [pc, #8]	; (80a0c80 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0c76:	4a03      	ldr	r2, [pc, #12]	; (80a0c84 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0c78:	4903      	ldr	r1, [pc, #12]	; (80a0c88 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0c7a:	1a12      	subs	r2, r2, r0
 80a0c7c:	f001 bcf8 	b.w	80a2670 <memcpy>
 80a0c80:	40024000 	.word	0x40024000
 80a0c84:	40024004 	.word	0x40024004
 80a0c88:	080a47e0 	.word	0x080a47e0

080a0c8c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c8c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0c8e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c90:	461a      	mov	r2, r3
 80a0c92:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0c96:	9300      	str	r3, [sp, #0]
 80a0c98:	f7ff fd8c 	bl	80a07b4 <system_ctrl_set_result>
}
 80a0c9c:	b003      	add	sp, #12
 80a0c9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0ca4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0ca4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0ca6:	8843      	ldrh	r3, [r0, #2]
 80a0ca8:	2b0a      	cmp	r3, #10
 80a0caa:	d008      	beq.n	80a0cbe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0cac:	2b50      	cmp	r3, #80	; 0x50
 80a0cae:	d10b      	bne.n	80a0cc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0cb0:	4b09      	ldr	r3, [pc, #36]	; (80a0cd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0cb2:	681b      	ldr	r3, [r3, #0]
 80a0cb4:	b14b      	cbz	r3, 80a0cca <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0cb6:	b003      	add	sp, #12
 80a0cb8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0cbc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0cbe:	f7ff ffe5 	bl	80a0c8c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0cc2:	b003      	add	sp, #12
 80a0cc4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0cc8:	2300      	movs	r3, #0
 80a0cca:	461a      	mov	r2, r3
 80a0ccc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0cd0:	9300      	str	r3, [sp, #0]
 80a0cd2:	f7ff fd6f 	bl	80a07b4 <system_ctrl_set_result>
}
 80a0cd6:	e7f4      	b.n	80a0cc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0cd8:	20000258 	.word	0x20000258

080a0cdc <module_user_init_hook>:
{
 80a0cdc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0cde:	4c12      	ldr	r4, [pc, #72]	; (80a0d28 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0ce0:	2100      	movs	r1, #0
 80a0ce2:	4812      	ldr	r0, [pc, #72]	; (80a0d2c <module_user_init_hook+0x50>)
 80a0ce4:	f7ff fe18 	bl	80a0918 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0ce8:	4d11      	ldr	r5, [pc, #68]	; (80a0d30 <module_user_init_hook+0x54>)
 80a0cea:	6823      	ldr	r3, [r4, #0]
 80a0cec:	42ab      	cmp	r3, r5
 80a0cee:	bf0c      	ite	eq
 80a0cf0:	2201      	moveq	r2, #1
 80a0cf2:	2200      	movne	r2, #0
 80a0cf4:	4b0f      	ldr	r3, [pc, #60]	; (80a0d34 <module_user_init_hook+0x58>)
 80a0cf6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0cf8:	d002      	beq.n	80a0d00 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a0cfa:	f7ff ffbb 	bl	80a0c74 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0cfe:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0d00:	f7ff fc4c 	bl	80a059c <HAL_RNG_GetRandomNumber>
 80a0d04:	4604      	mov	r4, r0
    srand(seed);
 80a0d06:	f001 fcc9 	bl	80a269c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0d0a:	4b0b      	ldr	r3, [pc, #44]	; (80a0d38 <module_user_init_hook+0x5c>)
 80a0d0c:	b113      	cbz	r3, 80a0d14 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a0d0e:	4620      	mov	r0, r4
 80a0d10:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0d14:	2100      	movs	r1, #0
 80a0d16:	4808      	ldr	r0, [pc, #32]	; (80a0d38 <module_user_init_hook+0x5c>)
 80a0d18:	f7ff fdce 	bl	80a08b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0d20:	2100      	movs	r1, #0
 80a0d22:	4806      	ldr	r0, [pc, #24]	; (80a0d3c <module_user_init_hook+0x60>)
 80a0d24:	f7ff bd3c 	b.w	80a07a0 <system_ctrl_set_app_request_handler>
 80a0d28:	40024000 	.word	0x40024000
 80a0d2c:	080a0bf5 	.word	0x080a0bf5
 80a0d30:	9a271c1e 	.word	0x9a271c1e
 80a0d34:	20000254 	.word	0x20000254
 80a0d38:	00000000 	.word	0x00000000
 80a0d3c:	080a0ca5 	.word	0x080a0ca5

080a0d40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0d40:	4770      	bx	lr

080a0d42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a0d42:	2000      	movs	r0, #0
 80a0d44:	4770      	bx	lr

080a0d46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0d46:	b510      	push	{r4, lr}
 80a0d48:	4604      	mov	r4, r0
 80a0d4a:	2110      	movs	r1, #16
 80a0d4c:	f000 fe5f 	bl	80a1a0e <_ZdlPvj>
 80a0d50:	4620      	mov	r0, r4
 80a0d52:	bd10      	pop	{r4, pc}

080a0d54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a0d54:	b508      	push	{r3, lr}
      { delete this; }
 80a0d56:	f7ff fff6 	bl	80a0d46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0d5a:	bd08      	pop	{r3, pc}

080a0d5c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0d5c:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0d5e:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a0d60:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a0d64:	6002      	str	r2, [r0, #0]
 80a0d66:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a0d68:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d6a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a0d6c:	680c      	ldr	r4, [r1, #0]
 80a0d6e:	8085      	strh	r5, [r0, #4]
 80a0d70:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d72:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0d74:	bd30      	pop	{r4, r5, pc}

080a0d76 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0d76:	b510      	push	{r4, lr}
 80a0d78:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0d7a:	6800      	ldr	r0, [r0, #0]
 80a0d7c:	f7ff fdac 	bl	80a08d8 <free>
}
 80a0d80:	4620      	mov	r0, r4
 80a0d82:	bd10      	pop	{r4, pc}

080a0d84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a0d84:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0d86:	68c4      	ldr	r4, [r0, #12]
 80a0d88:	b1f4      	cbz	r4, 80a0dc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
 80a0d8a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0d8c:	2b02      	cmp	r3, #2
 80a0d8e:	d103      	bne.n	80a0d98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0d90:	f104 000c 	add.w	r0, r4, #12
 80a0d94:	f7ff ffef 	bl	80a0d76 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a0d98:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0d9a:	b135      	cbz	r5, 80a0daa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a0d9c:	4628      	mov	r0, r5
 80a0d9e:	f7ff fefb 	bl	80a0b98 <_ZNSt14_Function_baseD1Ev>
 80a0da2:	2110      	movs	r1, #16
 80a0da4:	4628      	mov	r0, r5
 80a0da6:	f000 fe32 	bl	80a1a0e <_ZdlPvj>
 80a0daa:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0dac:	b135      	cbz	r5, 80a0dbc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0dae:	4628      	mov	r0, r5
 80a0db0:	f7ff fef2 	bl	80a0b98 <_ZNSt14_Function_baseD1Ev>
 80a0db4:	2110      	movs	r1, #16
 80a0db6:	4628      	mov	r0, r5
 80a0db8:	f000 fe29 	bl	80a1a0e <_ZdlPvj>
 80a0dbc:	4620      	mov	r0, r4
 80a0dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0dc2:	2114      	movs	r1, #20
 80a0dc4:	f000 be23 	b.w	80a1a0e <_ZdlPvj>
 80a0dc8:	bd38      	pop	{r3, r4, r5, pc}

080a0dca <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a0dca:	b510      	push	{r4, lr}
 80a0dcc:	b088      	sub	sp, #32
 80a0dce:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0dd0:	4668      	mov	r0, sp
 80a0dd2:	f7ff fe2f 	bl	80a0a34 <_ZN6StringC1EPKc>
    return (*fn)(p);
 80a0dd6:	4669      	mov	r1, sp
 80a0dd8:	a804      	add	r0, sp, #16
 80a0dda:	f7ff fe4d 	bl	80a0a78 <_ZN6StringC1ERKS_>
 80a0dde:	a804      	add	r0, sp, #16
 80a0de0:	47a0      	blx	r4
 80a0de2:	4604      	mov	r4, r0
 80a0de4:	a804      	add	r0, sp, #16
 80a0de6:	f7ff fddb 	bl	80a09a0 <_ZN6StringD1Ev>
    String p(param);
 80a0dea:	4668      	mov	r0, sp
 80a0dec:	f7ff fdd8 	bl	80a09a0 <_ZN6StringD1Ev>
}
 80a0df0:	4620      	mov	r0, r4
 80a0df2:	b008      	add	sp, #32
 80a0df4:	bd10      	pop	{r4, pc}

080a0df6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a0df6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a0df8:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a0dfa:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a0dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a0e00:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a0e02:	4669      	mov	r1, sp
 80a0e04:	461a      	mov	r2, r3
 80a0e06:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a0e08:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a0e0c:	f8ad 4000 	strh.w	r4, [sp]
 80a0e10:	f7ff fd32 	bl	80a0878 <spark_function>
}
 80a0e14:	b004      	add	sp, #16
 80a0e16:	bd10      	pop	{r4, pc}

080a0e18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0e18:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0e1a:	460e      	mov	r6, r1
 80a0e1c:	4604      	mov	r4, r0
 80a0e1e:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0e22:	460d      	mov	r5, r1
 80a0e24:	a801      	add	r0, sp, #4
 80a0e26:	4631      	mov	r1, r6
 80a0e28:	9300      	str	r3, [sp, #0]
 80a0e2a:	f7ff fe9c 	bl	80a0b66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0e2e:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0e30:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0e32:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a0e34:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a0e36:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a0e38:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a0e3a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0e3c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a0e3e:	f7ff fe7c 	bl	80a0b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0e42:	4630      	mov	r0, r6
 80a0e44:	f7ff fe79 	bl	80a0b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a0e48:	4628      	mov	r0, r5
 80a0e4a:	2108      	movs	r1, #8
 80a0e4c:	f000 fddf 	bl	80a1a0e <_ZdlPvj>
        return p;
    }
 80a0e50:	4620      	mov	r0, r4
 80a0e52:	b002      	add	sp, #8
 80a0e54:	bd70      	pop	{r4, r5, r6, pc}

080a0e56 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e56:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a0e58:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0e5a:	b90a      	cbnz	r2, 80a0e60 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0e5c:	f000 fddb 	bl	80a1a16 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e60:	68c3      	ldr	r3, [r0, #12]
    }
 80a0e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e66:	4718      	bx	r3

080a0e68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0e68:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a0e6a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a0e6c:	f100 0110 	add.w	r1, r0, #16
 80a0e70:	f7ff fff1 	bl	80a0e56 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a0e74:	bd08      	pop	{r3, pc}

080a0e76 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a0e76:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a0e78:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0e7a:	b90a      	cbnz	r2, 80a0e80 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0e7c:	f000 fdcb 	bl	80a1a16 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e80:	68c3      	ldr	r3, [r0, #12]
    }
 80a0e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e86:	4718      	bx	r3

080a0e88 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0e88:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a0e8a:	6800      	ldr	r0, [r0, #0]
 80a0e8c:	f100 0110 	add.w	r1, r0, #16
 80a0e90:	f7ff fff1 	bl	80a0e76 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a0e94:	bd08      	pop	{r3, pc}
	...

080a0e98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0e98:	b538      	push	{r3, r4, r5, lr}
 80a0e9a:	2300      	movs	r3, #0
 80a0e9c:	4604      	mov	r4, r0
 80a0e9e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0ea0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0ea2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0ea4:	f7ff f8f9 	bl	80a009a <_Znwj>
 80a0ea8:	b128      	cbz	r0, 80a0eb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a0eaa:	2301      	movs	r3, #1
 80a0eac:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a0eb0:	4b02      	ldr	r3, [pc, #8]	; (80a0ebc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0eb2:	60c5      	str	r5, [r0, #12]
 80a0eb4:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0eb6:	6020      	str	r0, [r4, #0]
	}
 80a0eb8:	4620      	mov	r0, r4
 80a0eba:	bd38      	pop	{r3, r4, r5, pc}
 80a0ebc:	080a442c 	.word	0x080a442c

080a0ec0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a0ec0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a0ec2:	2300      	movs	r3, #0
 80a0ec4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a0ec6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a0ec8:	4604      	mov	r4, r0
 80a0eca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a0ecc:	b12b      	cbz	r3, 80a0eda <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0ece:	2202      	movs	r2, #2
 80a0ed0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0ed2:	68eb      	ldr	r3, [r5, #12]
 80a0ed4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0ed6:	68ab      	ldr	r3, [r5, #8]
 80a0ed8:	60a3      	str	r3, [r4, #8]
    }
 80a0eda:	4620      	mov	r0, r4
 80a0edc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0ee0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a0ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0ee2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a0ee4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0ee6:	4668      	mov	r0, sp
 80a0ee8:	f7ff ff38 	bl	80a0d5c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a0eec:	f04f 0302 	mov.w	r3, #2
 80a0ef0:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a0ef4:	2a00      	cmp	r2, #0
 80a0ef6:	d103      	bne.n	80a0f00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a0ef8:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a0efc:	2900      	cmp	r1, #0
 80a0efe:	d1f7      	bne.n	80a0ef0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a0f00:	d125      	bne.n	80a0f4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a0f02:	f104 050c 	add.w	r5, r4, #12
 80a0f06:	4669      	mov	r1, sp
 80a0f08:	4628      	mov	r0, r5
 80a0f0a:	f7ff ff27 	bl	80a0d5c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a0f0e:	2301      	movs	r3, #1
 80a0f10:	f3bf 8f5b 	dmb	ish
 80a0f14:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a0f16:	2000      	movs	r0, #0
 80a0f18:	f3bf 8f5b 	dmb	ish
 80a0f1c:	f104 0308 	add.w	r3, r4, #8
 80a0f20:	e853 6f00 	ldrex	r6, [r3]
 80a0f24:	e843 0200 	strex	r2, r0, [r3]
 80a0f28:	2a00      	cmp	r2, #0
 80a0f2a:	d1f9      	bne.n	80a0f20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a0f2c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a0f30:	b16e      	cbz	r6, 80a0f4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a0f32:	f7ff fc25 	bl	80a0780 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a0f36:	b178      	cbz	r0, 80a0f58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0f38:	4629      	mov	r1, r5
 80a0f3a:	4630      	mov	r0, r6
 80a0f3c:	f7ff ff8b 	bl	80a0e56 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a0f40:	4630      	mov	r0, r6
 80a0f42:	f7ff fe29 	bl	80a0b98 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a0f46:	2110      	movs	r1, #16
 80a0f48:	4630      	mov	r0, r6
 80a0f4a:	f000 fd60 	bl	80a1a0e <_ZdlPvj>
        p_->setError(std::move(error));
 80a0f4e:	4668      	mov	r0, sp
 80a0f50:	f7ff ff11 	bl	80a0d76 <_ZN8particle5ErrorD1Ev>
    }
 80a0f54:	b009      	add	sp, #36	; 0x24
 80a0f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0f58:	4631      	mov	r1, r6
 80a0f5a:	a802      	add	r0, sp, #8
 80a0f5c:	f7ff ffb0 	bl	80a0ec0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a0f60:	68e0      	ldr	r0, [r4, #12]
 80a0f62:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0f66:	b108      	cbz	r0, 80a0f6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a0f68:	f001 fbbc 	bl	80a26e4 <strdup>
        type_(type) {
 80a0f6c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0f6e:	2010      	movs	r0, #16
 80a0f70:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0f74:	f7ff f891 	bl	80a009a <_Znwj>
 80a0f78:	4605      	mov	r5, r0
 80a0f7a:	b1e8      	cbz	r0, 80a0fb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a0f7c:	2700      	movs	r7, #0
 80a0f7e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f80:	2018      	movs	r0, #24
 80a0f82:	f7ff f88a 	bl	80a009a <_Znwj>
 80a0f86:	4604      	mov	r4, r0
 80a0f88:	b188      	cbz	r0, 80a0fae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a0f8a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a0f8c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a0f8e:	a802      	add	r0, sp, #8
 80a0f90:	f7ff fe11 	bl	80a0bb6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f94:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0f96:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f98:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f9a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0f9c:	9204      	str	r2, [sp, #16]
 80a0f9e:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0fa0:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a0fa2:	60e3      	str	r3, [r4, #12]
 80a0fa4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a0fa8:	9205      	str	r2, [sp, #20]
 80a0faa:	f7ff fed7 	bl	80a0d5c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a0fae:	4b08      	ldr	r3, [pc, #32]	; (80a0fd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0fb0:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0fb2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0fb4:	4b07      	ldr	r3, [pc, #28]	; (80a0fd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a0fb6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a0fb8:	a806      	add	r0, sp, #24
 80a0fba:	f7ff fedc 	bl	80a0d76 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a0fbe:	a802      	add	r0, sp, #8
 80a0fc0:	f7ff fdea 	bl	80a0b98 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0fc4:	2200      	movs	r2, #0
 80a0fc6:	4629      	mov	r1, r5
 80a0fc8:	4803      	ldr	r0, [pc, #12]	; (80a0fd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a0fca:	f7ff fbe1 	bl	80a0790 <application_thread_invoke>
 80a0fce:	e7b7      	b.n	80a0f40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a0fd0:	080a0e69 	.word	0x080a0e69
 80a0fd4:	080a1101 	.word	0x080a1101
 80a0fd8:	080a1619 	.word	0x080a1619

080a0fdc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0fe0:	b08a      	sub	sp, #40	; 0x28
 80a0fe2:	4605      	mov	r5, r0
 80a0fe4:	460c      	mov	r4, r1
 80a0fe6:	4617      	mov	r7, r2
 80a0fe8:	4698      	mov	r8, r3
 80a0fea:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0fee:	f7ff fc53 	bl	80a0898 <spark_cloud_flag_connected>
 80a0ff2:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a0ff4:	4682      	mov	sl, r0
 80a0ff6:	bb38      	cbnz	r0, 80a1048 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a0ff8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0ffc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0ffe:	a905      	add	r1, sp, #20
 80a1000:	4630      	mov	r0, r6
 80a1002:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1006:	f7ff fea9 	bl	80a0d5c <_ZN8particle5ErrorC1EOS0_>
 80a100a:	2014      	movs	r0, #20
 80a100c:	f7ff f845 	bl	80a009a <_Znwj>
 80a1010:	4604      	mov	r4, r0
 80a1012:	b148      	cbz	r0, 80a1028 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1014:	2302      	movs	r3, #2
 80a1016:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1018:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a101a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a101e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a1020:	4631      	mov	r1, r6
 80a1022:	300c      	adds	r0, #12
 80a1024:	f7ff fe9a 	bl	80a0d5c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1028:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a102a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a102c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a1030:	f7ff ff32 	bl	80a0e98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1034:	4630      	mov	r0, r6
 80a1036:	f7ff fe9e 	bl	80a0d76 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a103a:	a805      	add	r0, sp, #20
 80a103c:	f7ff fe9b 	bl	80a0d76 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a1040:	4628      	mov	r0, r5
 80a1042:	b00a      	add	sp, #40	; 0x28
 80a1044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1048:	230c      	movs	r3, #12
 80a104a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a104e:	2014      	movs	r0, #20
 80a1050:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a1054:	9307      	str	r3, [sp, #28]
 80a1056:	f7ff f820 	bl	80a009a <_Znwj>
 80a105a:	4601      	mov	r1, r0
 80a105c:	b128      	cbz	r0, 80a106a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a105e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a1062:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1066:	f880 a001 	strb.w	sl, [r0, #1]
 80a106a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a106c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a106e:	f7ff ff13 	bl	80a0e98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a1072:	4b22      	ldr	r3, [pc, #136]	; (80a10fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1074:	2008      	movs	r0, #8
 80a1076:	9308      	str	r3, [sp, #32]
 80a1078:	f7ff f80f 	bl	80a009a <_Znwj>
 80a107c:	4682      	mov	sl, r0
 80a107e:	b128      	cbz	r0, 80a108c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1080:	9b03      	ldr	r3, [sp, #12]
 80a1082:	a904      	add	r1, sp, #16
 80a1084:	f840 3b04 	str.w	r3, [r0], #4
 80a1088:	f7ff fd6d 	bl	80a0b66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a108c:	4642      	mov	r2, r8
 80a108e:	4639      	mov	r1, r7
 80a1090:	4620      	mov	r0, r4
 80a1092:	9600      	str	r6, [sp, #0]
 80a1094:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a1098:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a109c:	f7ff fc04 	bl	80a08a8 <spark_send_event>
 80a10a0:	b9b8      	cbnz	r0, 80a10d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a10a2:	9b03      	ldr	r3, [sp, #12]
 80a10a4:	785b      	ldrb	r3, [r3, #1]
 80a10a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a10aa:	b993      	cbnz	r3, 80a10d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a10ac:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a10b0:	a905      	add	r1, sp, #20
 80a10b2:	a803      	add	r0, sp, #12
 80a10b4:	9205      	str	r2, [sp, #20]
 80a10b6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a10ba:	f7ff ff11 	bl	80a0ee0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a10be:	a805      	add	r0, sp, #20
 80a10c0:	f7ff fe59 	bl	80a0d76 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a10c4:	a805      	add	r0, sp, #20
 80a10c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a10c8:	f7ff fea6 	bl	80a0e18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a10cc:	a806      	add	r0, sp, #24
 80a10ce:	f7ff fd34 	bl	80a0b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a10d2:	9b03      	ldr	r3, [sp, #12]
 80a10d4:	a904      	add	r1, sp, #16
 80a10d6:	a806      	add	r0, sp, #24
 80a10d8:	9305      	str	r3, [sp, #20]
 80a10da:	f7ff fd44 	bl	80a0b66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a10de:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a10e0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a10e2:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a10e4:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a10e6:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a10e8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a10ea:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a10ec:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a10ee:	f7ff fd24 	bl	80a0b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a10f2:	a804      	add	r0, sp, #16
 80a10f4:	f7ff fd21 	bl	80a0b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a10f8:	e7a2      	b.n	80a1040 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a10fa:	bf00      	nop
 80a10fc:	080a11c5 	.word	0x080a11c5

080a1100 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a1100:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1104:	4605      	mov	r5, r0
	  switch (__op)
 80a1106:	d007      	beq.n	80a1118 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a1108:	2a03      	cmp	r2, #3
 80a110a:	d018      	beq.n	80a113e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a110c:	2a01      	cmp	r2, #1
 80a110e:	d101      	bne.n	80a1114 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a1110:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1112:	6003      	str	r3, [r0, #0]
	}
 80a1114:	2000      	movs	r0, #0
 80a1116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1118:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a111a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a111c:	f7fe ffbd 	bl	80a009a <_Znwj>
 80a1120:	4604      	mov	r4, r0
 80a1122:	b150      	cbz	r0, 80a113a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1124:	4631      	mov	r1, r6
 80a1126:	f7ff fecb 	bl	80a0ec0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a112a:	6930      	ldr	r0, [r6, #16]
 80a112c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1130:	b108      	cbz	r0, 80a1136 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a1132:	f001 fad7 	bl	80a26e4 <strdup>
        type_(type) {
 80a1136:	6120      	str	r0, [r4, #16]
 80a1138:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a113a:	602c      	str	r4, [r5, #0]
	}
 80a113c:	e7ea      	b.n	80a1114 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a113e:	6804      	ldr	r4, [r0, #0]
 80a1140:	2c00      	cmp	r4, #0
 80a1142:	d0e7      	beq.n	80a1114 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a1144:	f104 0010 	add.w	r0, r4, #16
 80a1148:	f7ff fe15 	bl	80a0d76 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a114c:	4620      	mov	r0, r4
 80a114e:	f7ff fd23 	bl	80a0b98 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1152:	2118      	movs	r1, #24
 80a1154:	4620      	mov	r0, r4
 80a1156:	f000 fc5a 	bl	80a1a0e <_ZdlPvj>
 80a115a:	e7db      	b.n	80a1114 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a115c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a115c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a115e:	2300      	movs	r3, #0
 80a1160:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a1162:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1164:	4604      	mov	r4, r0
 80a1166:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1168:	b12b      	cbz	r3, 80a1176 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a116a:	2202      	movs	r2, #2
 80a116c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a116e:	68eb      	ldr	r3, [r5, #12]
 80a1170:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1172:	68ab      	ldr	r3, [r5, #8]
 80a1174:	60a3      	str	r3, [r4, #8]
    }
 80a1176:	4620      	mov	r0, r4
 80a1178:	bd38      	pop	{r3, r4, r5, pc}

080a117a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a117a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a117c:	b570      	push	{r4, r5, r6, lr}
 80a117e:	4604      	mov	r4, r0
	  switch (__op)
 80a1180:	d007      	beq.n	80a1192 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a1182:	2a03      	cmp	r2, #3
 80a1184:	d012      	beq.n	80a11ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a1186:	2a01      	cmp	r2, #1
 80a1188:	d101      	bne.n	80a118e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a118a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a118c:	6003      	str	r3, [r0, #0]
	}
 80a118e:	2000      	movs	r0, #0
 80a1190:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1192:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a1194:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1196:	f7fe ff80 	bl	80a009a <_Znwj>
 80a119a:	4605      	mov	r5, r0
 80a119c:	b120      	cbz	r0, 80a11a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a119e:	4631      	mov	r1, r6
 80a11a0:	f7ff ffdc 	bl	80a115c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a11a4:	7c33      	ldrb	r3, [r6, #16]
 80a11a6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a11a8:	6025      	str	r5, [r4, #0]
	}
 80a11aa:	e7f0      	b.n	80a118e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a11ac:	6804      	ldr	r4, [r0, #0]
 80a11ae:	2c00      	cmp	r4, #0
 80a11b0:	d0ed      	beq.n	80a118e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a11b2:	4620      	mov	r0, r4
 80a11b4:	f7ff fcf0 	bl	80a0b98 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a11b8:	2114      	movs	r1, #20
 80a11ba:	4620      	mov	r0, r4
 80a11bc:	f000 fc27 	bl	80a1a0e <_ZdlPvj>
 80a11c0:	e7e5      	b.n	80a118e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a11c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a11c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a11c6:	4604      	mov	r4, r0
 80a11c8:	b089      	sub	sp, #36	; 0x24
 80a11ca:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a11cc:	a801      	add	r0, sp, #4
 80a11ce:	4611      	mov	r1, r2
 80a11d0:	f7ff fe22 	bl	80a0e18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a11d4:	b1a4      	cbz	r4, 80a1200 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a11d6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a11d8:	b11d      	cbz	r5, 80a11e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a11da:	4628      	mov	r0, r5
 80a11dc:	f001 fa82 	bl	80a26e4 <strdup>
 80a11e0:	4605      	mov	r5, r0
 80a11e2:	a801      	add	r0, sp, #4
 80a11e4:	a903      	add	r1, sp, #12
        type_(type) {
 80a11e6:	9503      	str	r5, [sp, #12]
 80a11e8:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a11ec:	f7ff fe78 	bl	80a0ee0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a11f0:	a803      	add	r0, sp, #12
 80a11f2:	f7ff fdc0 	bl	80a0d76 <_ZN8particle5ErrorD1Ev>
 80a11f6:	a802      	add	r0, sp, #8
 80a11f8:	f7ff fc9f 	bl	80a0b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a11fc:	b009      	add	sp, #36	; 0x24
 80a11fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1200:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1202:	9d01      	ldr	r5, [sp, #4]
 80a1204:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a1208:	2a00      	cmp	r2, #0
 80a120a:	d103      	bne.n	80a1214 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a120c:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a1210:	2900      	cmp	r1, #0
 80a1212:	d1f7      	bne.n	80a1204 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a1214:	d1ef      	bne.n	80a11f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a1216:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a1218:	f3bf 8f5b 	dmb	ish
 80a121c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a121e:	f3bf 8f5b 	dmb	ish
 80a1222:	1d2b      	adds	r3, r5, #4
 80a1224:	e853 6f00 	ldrex	r6, [r3]
 80a1228:	e843 4200 	strex	r2, r4, [r3]
 80a122c:	2a00      	cmp	r2, #0
 80a122e:	d1f9      	bne.n	80a1224 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a1230:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a1234:	2e00      	cmp	r6, #0
 80a1236:	d0de      	beq.n	80a11f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a1238:	4620      	mov	r0, r4
 80a123a:	f7ff faa1 	bl	80a0780 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a123e:	4607      	mov	r7, r0
 80a1240:	b160      	cbz	r0, 80a125c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1242:	4630      	mov	r0, r6
 80a1244:	f105 010c 	add.w	r1, r5, #12
 80a1248:	f7ff fe15 	bl	80a0e76 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a124c:	4630      	mov	r0, r6
 80a124e:	f7ff fca3 	bl	80a0b98 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a1252:	2110      	movs	r1, #16
 80a1254:	4630      	mov	r0, r6
 80a1256:	f000 fbda 	bl	80a1a0e <_ZdlPvj>
 80a125a:	e7cc      	b.n	80a11f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a125c:	4631      	mov	r1, r6
 80a125e:	a803      	add	r0, sp, #12
 80a1260:	f7ff ff7c 	bl	80a115c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1264:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1266:	2010      	movs	r0, #16
 80a1268:	f88d 301c 	strb.w	r3, [sp, #28]
 80a126c:	f7fe ff15 	bl	80a009a <_Znwj>
 80a1270:	4605      	mov	r5, r0
 80a1272:	b1d0      	cbz	r0, 80a12aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a1274:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1276:	2014      	movs	r0, #20
 80a1278:	f7fe ff0f 	bl	80a009a <_Znwj>
 80a127c:	4604      	mov	r4, r0
 80a127e:	b178      	cbz	r0, 80a12a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a1280:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a1282:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a1284:	a803      	add	r0, sp, #12
 80a1286:	f7ff fc96 	bl	80a0bb6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a128a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a128c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a128e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1290:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a1292:	9205      	str	r2, [sp, #20]
 80a1294:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1296:	60e3      	str	r3, [r4, #12]
 80a1298:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a129c:	9206      	str	r2, [sp, #24]
 80a129e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a12a0:	4b06      	ldr	r3, [pc, #24]	; (80a12bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a12a2:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a12a4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a12a6:	4b06      	ldr	r3, [pc, #24]	; (80a12c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a12a8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a12aa:	a803      	add	r0, sp, #12
 80a12ac:	f7ff fc74 	bl	80a0b98 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a12b0:	2200      	movs	r2, #0
 80a12b2:	4629      	mov	r1, r5
 80a12b4:	4803      	ldr	r0, [pc, #12]	; (80a12c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a12b6:	f7ff fa6b 	bl	80a0790 <application_thread_invoke>
 80a12ba:	e7c7      	b.n	80a124c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a12bc:	080a0e89 	.word	0x080a0e89
 80a12c0:	080a117b 	.word	0x080a117b
 80a12c4:	080a1619 	.word	0x080a1619

080a12c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a12c8:	4770      	bx	lr

080a12ca <_ZN9IPAddressD0Ev>:
 80a12ca:	b510      	push	{r4, lr}
 80a12cc:	4604      	mov	r4, r0
 80a12ce:	2118      	movs	r1, #24
 80a12d0:	f000 fb9d 	bl	80a1a0e <_ZdlPvj>
 80a12d4:	4620      	mov	r0, r4
 80a12d6:	bd10      	pop	{r4, pc}

080a12d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a12d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12da:	460e      	mov	r6, r1
 80a12dc:	2400      	movs	r4, #0
 80a12de:	f100 0708 	add.w	r7, r0, #8
 80a12e2:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a12e4:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a12e8:	220a      	movs	r2, #10
 80a12ea:	4630      	mov	r0, r6
 80a12ec:	f7ff fc02 	bl	80a0af4 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a12f0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a12f2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a12f4:	d101      	bne.n	80a12fa <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a12f6:	4620      	mov	r0, r4
 80a12f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a12fa:	2c00      	cmp	r4, #0
 80a12fc:	d0f2      	beq.n	80a12e4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a12fe:	212e      	movs	r1, #46	; 0x2e
 80a1300:	4630      	mov	r0, r6
 80a1302:	f7ff fbf4 	bl	80a0aee <_ZN5Print5printEc>
 80a1306:	4404      	add	r4, r0
 80a1308:	e7ec      	b.n	80a12e4 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a130c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a130c:	b510      	push	{r4, lr}
 80a130e:	4604      	mov	r4, r0
 80a1310:	4b04      	ldr	r3, [pc, #16]	; (80a1324 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1312:	2211      	movs	r2, #17
 80a1314:	2100      	movs	r1, #0
 80a1316:	f840 3b04 	str.w	r3, [r0], #4
 80a131a:	f001 f9b7 	bl	80a268c <memset>
}
 80a131e:	4620      	mov	r0, r4
 80a1320:	bd10      	pop	{r4, pc}
 80a1322:	bf00      	nop
 80a1324:	080a4448 	.word	0x080a4448

080a1328 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1328:	4603      	mov	r3, r0
 80a132a:	4a07      	ldr	r2, [pc, #28]	; (80a1348 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a132c:	b510      	push	{r4, lr}
 80a132e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1332:	f101 0210 	add.w	r2, r1, #16
 80a1336:	f851 4b04 	ldr.w	r4, [r1], #4
 80a133a:	4291      	cmp	r1, r2
 80a133c:	f843 4b04 	str.w	r4, [r3], #4
 80a1340:	d1f9      	bne.n	80a1336 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1342:	780a      	ldrb	r2, [r1, #0]
 80a1344:	701a      	strb	r2, [r3, #0]
}
 80a1346:	bd10      	pop	{r4, pc}
 80a1348:	080a4448 	.word	0x080a4448

080a134c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a134c:	4a02      	ldr	r2, [pc, #8]	; (80a1358 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a134e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1352:	2204      	movs	r2, #4
 80a1354:	7502      	strb	r2, [r0, #20]
}
 80a1356:	4770      	bx	lr
 80a1358:	080a4448 	.word	0x080a4448

080a135c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a135c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a135e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1362:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1366:	2304      	movs	r3, #4
 80a1368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a136c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1370:	6044      	str	r4, [r0, #4]
 80a1372:	7503      	strb	r3, [r0, #20]
}
 80a1374:	bd10      	pop	{r4, pc}
	...

080a1378 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a137a:	4d04      	ldr	r5, [pc, #16]	; (80a138c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a137c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a137e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1382:	9500      	str	r5, [sp, #0]
 80a1384:	f7ff ffea 	bl	80a135c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1388:	b003      	add	sp, #12
 80a138a:	bd30      	pop	{r4, r5, pc}
 80a138c:	080a4448 	.word	0x080a4448

080a1390 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1390:	7441      	strb	r1, [r0, #17]
}
 80a1392:	4770      	bx	lr

080a1394 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1394:	4770      	bx	lr

080a1396 <_ZN9USBSerial4readEv>:
{
 80a1396:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1398:	2100      	movs	r1, #0
 80a139a:	7c00      	ldrb	r0, [r0, #16]
 80a139c:	f7ff f9c0 	bl	80a0720 <HAL_USB_USART_Receive_Data>
}
 80a13a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a13a4:	bd08      	pop	{r3, pc}

080a13a6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a13a6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a13a8:	2101      	movs	r1, #1
 80a13aa:	7c00      	ldrb	r0, [r0, #16]
 80a13ac:	f7ff f9b8 	bl	80a0720 <HAL_USB_USART_Receive_Data>
}
 80a13b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a13b4:	bd08      	pop	{r3, pc}

080a13b6 <_ZN9USBSerial17availableForWriteEv>:
{
 80a13b6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a13b8:	7c00      	ldrb	r0, [r0, #16]
 80a13ba:	f7ff f9a9 	bl	80a0710 <HAL_USB_USART_Available_Data_For_Write>
}
 80a13be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a13c2:	bd08      	pop	{r3, pc}

080a13c4 <_ZN9USBSerial9availableEv>:
{
 80a13c4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a13c6:	7c00      	ldrb	r0, [r0, #16]
 80a13c8:	f7ff f99a 	bl	80a0700 <HAL_USB_USART_Available_Data>
}
 80a13cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a13d0:	bd08      	pop	{r3, pc}

080a13d2 <_ZN9USBSerial5writeEh>:
{
 80a13d2:	b538      	push	{r3, r4, r5, lr}
 80a13d4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a13d6:	7c00      	ldrb	r0, [r0, #16]
{
 80a13d8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a13da:	f7ff f999 	bl	80a0710 <HAL_USB_USART_Available_Data_For_Write>
 80a13de:	2800      	cmp	r0, #0
 80a13e0:	dc01      	bgt.n	80a13e6 <_ZN9USBSerial5writeEh+0x14>
 80a13e2:	7c60      	ldrb	r0, [r4, #17]
 80a13e4:	b128      	cbz	r0, 80a13f2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a13e6:	4629      	mov	r1, r5
 80a13e8:	7c20      	ldrb	r0, [r4, #16]
 80a13ea:	f7ff f9a1 	bl	80a0730 <HAL_USB_USART_Send_Data>
 80a13ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a13f2:	bd38      	pop	{r3, r4, r5, pc}

080a13f4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a13f4:	7c00      	ldrb	r0, [r0, #16]
 80a13f6:	f7ff b9a3 	b.w	80a0740 <HAL_USB_USART_Flush_Data>

080a13fa <_ZN9USBSerialD0Ev>:
 80a13fa:	b510      	push	{r4, lr}
 80a13fc:	4604      	mov	r4, r0
 80a13fe:	2114      	movs	r1, #20
 80a1400:	f000 fb05 	bl	80a1a0e <_ZdlPvj>
 80a1404:	4620      	mov	r0, r4
 80a1406:	bd10      	pop	{r4, pc}

080a1408 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1408:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a140a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a140e:	4604      	mov	r4, r0
 80a1410:	4608      	mov	r0, r1
 80a1412:	2100      	movs	r1, #0
 80a1414:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1418:	4b04      	ldr	r3, [pc, #16]	; (80a142c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a141a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a141c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a141e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1420:	4611      	mov	r1, r2
  _blocking = true;
 80a1422:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1424:	f7ff f964 	bl	80a06f0 <HAL_USB_USART_Init>
}
 80a1428:	4620      	mov	r0, r4
 80a142a:	bd10      	pop	{r4, pc}
 80a142c:	080a445c 	.word	0x080a445c

080a1430 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1430:	b510      	push	{r4, lr}
 80a1432:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1434:	2214      	movs	r2, #20
 80a1436:	2100      	movs	r1, #0
 80a1438:	f001 f928 	bl	80a268c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a143c:	4620      	mov	r0, r4
 80a143e:	bd10      	pop	{r4, pc}

080a1440 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1440:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1442:	4d0f      	ldr	r5, [pc, #60]	; (80a1480 <_Z16_fetch_usbserialv+0x40>)
{
 80a1444:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1446:	a801      	add	r0, sp, #4
 80a1448:	f7ff fff2 	bl	80a1430 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a144c:	7829      	ldrb	r1, [r5, #0]
 80a144e:	f3bf 8f5b 	dmb	ish
 80a1452:	f011 0401 	ands.w	r4, r1, #1
 80a1456:	d110      	bne.n	80a147a <_Z16_fetch_usbserialv+0x3a>
 80a1458:	4628      	mov	r0, r5
 80a145a:	f7fe fe24 	bl	80a00a6 <__cxa_guard_acquire>
 80a145e:	b160      	cbz	r0, 80a147a <_Z16_fetch_usbserialv+0x3a>
 80a1460:	4621      	mov	r1, r4
 80a1462:	aa01      	add	r2, sp, #4
 80a1464:	4807      	ldr	r0, [pc, #28]	; (80a1484 <_Z16_fetch_usbserialv+0x44>)
 80a1466:	f7ff ffcf 	bl	80a1408 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a146a:	4628      	mov	r0, r5
 80a146c:	f7fe fe20 	bl	80a00b0 <__cxa_guard_release>
 80a1470:	4a05      	ldr	r2, [pc, #20]	; (80a1488 <_Z16_fetch_usbserialv+0x48>)
 80a1472:	4906      	ldr	r1, [pc, #24]	; (80a148c <_Z16_fetch_usbserialv+0x4c>)
 80a1474:	4803      	ldr	r0, [pc, #12]	; (80a1484 <_Z16_fetch_usbserialv+0x44>)
 80a1476:	f000 fac5 	bl	80a1a04 <__aeabi_atexit>
	return _usbserial;
}
 80a147a:	4802      	ldr	r0, [pc, #8]	; (80a1484 <_Z16_fetch_usbserialv+0x44>)
 80a147c:	b007      	add	sp, #28
 80a147e:	bd30      	pop	{r4, r5, pc}
 80a1480:	2000025c 	.word	0x2000025c
 80a1484:	20000264 	.word	0x20000264
 80a1488:	20000204 	.word	0x20000204
 80a148c:	080a1395 	.word	0x080a1395

080a1490 <_Z23acquireUSBSerial1Bufferv>:
 80a1490:	b510      	push	{r4, lr}
 80a1492:	4604      	mov	r4, r0
 80a1494:	2214      	movs	r2, #20
 80a1496:	2100      	movs	r1, #0
 80a1498:	f001 f8f8 	bl	80a268c <memset>
 80a149c:	4620      	mov	r0, r4
 80a149e:	bd10      	pop	{r4, pc}

080a14a0 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a14a0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14a2:	4c0f      	ldr	r4, [pc, #60]	; (80a14e0 <_Z17_fetch_usbserial1v+0x40>)
{
 80a14a4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a14a6:	a801      	add	r0, sp, #4
 80a14a8:	f7ff fff2 	bl	80a1490 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14ac:	7823      	ldrb	r3, [r4, #0]
 80a14ae:	f3bf 8f5b 	dmb	ish
 80a14b2:	07db      	lsls	r3, r3, #31
 80a14b4:	d410      	bmi.n	80a14d8 <_Z17_fetch_usbserial1v+0x38>
 80a14b6:	4620      	mov	r0, r4
 80a14b8:	f7fe fdf5 	bl	80a00a6 <__cxa_guard_acquire>
 80a14bc:	b160      	cbz	r0, 80a14d8 <_Z17_fetch_usbserial1v+0x38>
 80a14be:	2101      	movs	r1, #1
 80a14c0:	aa01      	add	r2, sp, #4
 80a14c2:	4808      	ldr	r0, [pc, #32]	; (80a14e4 <_Z17_fetch_usbserial1v+0x44>)
 80a14c4:	f7ff ffa0 	bl	80a1408 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a14c8:	4620      	mov	r0, r4
 80a14ca:	f7fe fdf1 	bl	80a00b0 <__cxa_guard_release>
 80a14ce:	4a06      	ldr	r2, [pc, #24]	; (80a14e8 <_Z17_fetch_usbserial1v+0x48>)
 80a14d0:	4906      	ldr	r1, [pc, #24]	; (80a14ec <_Z17_fetch_usbserial1v+0x4c>)
 80a14d2:	4804      	ldr	r0, [pc, #16]	; (80a14e4 <_Z17_fetch_usbserial1v+0x44>)
 80a14d4:	f000 fa96 	bl	80a1a04 <__aeabi_atexit>
  return _usbserial1;
}
 80a14d8:	4802      	ldr	r0, [pc, #8]	; (80a14e4 <_Z17_fetch_usbserial1v+0x44>)
 80a14da:	b006      	add	sp, #24
 80a14dc:	bd10      	pop	{r4, pc}
 80a14de:	bf00      	nop
 80a14e0:	20000260 	.word	0x20000260
 80a14e4:	20000278 	.word	0x20000278
 80a14e8:	20000204 	.word	0x20000204
 80a14ec:	080a1395 	.word	0x080a1395

080a14f0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a14f0:	4770      	bx	lr

080a14f2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a14f2:	7441      	strb	r1, [r0, #17]
}
 80a14f4:	4770      	bx	lr

080a14f6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a14f6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a14f8:	7c00      	ldrb	r0, [r0, #16]
 80a14fa:	f7ff f8a7 	bl	80a064c <hal_usart_available_data_for_write>
}
 80a14fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1502:	bd08      	pop	{r3, pc}

080a1504 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1504:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1506:	7c00      	ldrb	r0, [r0, #16]
 80a1508:	f7ff f878 	bl	80a05fc <hal_usart_available>
}
 80a150c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1510:	bd08      	pop	{r3, pc}

080a1512 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1512:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1514:	7c00      	ldrb	r0, [r0, #16]
 80a1516:	f7ff f881 	bl	80a061c <hal_usart_peek>
}
 80a151a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a151e:	bd08      	pop	{r3, pc}

080a1520 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1520:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1522:	7c00      	ldrb	r0, [r0, #16]
 80a1524:	f7ff f872 	bl	80a060c <hal_usart_read>
}
 80a1528:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a152c:	bd08      	pop	{r3, pc}

080a152e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a152e:	7c00      	ldrb	r0, [r0, #16]
 80a1530:	f7ff b87c 	b.w	80a062c <hal_usart_flush>

080a1534 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1534:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1536:	7c46      	ldrb	r6, [r0, #17]
{
 80a1538:	4604      	mov	r4, r0
 80a153a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a153c:	b12e      	cbz	r6, 80a154a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a153e:	4629      	mov	r1, r5
 80a1540:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1546:	f7ff b851 	b.w	80a05ec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a154a:	7c00      	ldrb	r0, [r0, #16]
 80a154c:	f7ff f87e 	bl	80a064c <hal_usart_available_data_for_write>
 80a1550:	2800      	cmp	r0, #0
 80a1552:	dcf4      	bgt.n	80a153e <_ZN11USARTSerial5writeEh+0xa>
}
 80a1554:	4630      	mov	r0, r6
 80a1556:	bd70      	pop	{r4, r5, r6, pc}

080a1558 <_ZN11USARTSerialD0Ev>:
 80a1558:	b510      	push	{r4, lr}
 80a155a:	4604      	mov	r4, r0
 80a155c:	2114      	movs	r1, #20
 80a155e:	f000 fa56 	bl	80a1a0e <_ZdlPvj>
 80a1562:	4620      	mov	r0, r4
 80a1564:	bd10      	pop	{r4, pc}
	...

080a1568 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1568:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a156c:	b510      	push	{r4, lr}
 80a156e:	4604      	mov	r4, r0
 80a1570:	4608      	mov	r0, r1
 80a1572:	4611      	mov	r1, r2
 80a1574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1578:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a157c:	4a04      	ldr	r2, [pc, #16]	; (80a1590 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a157e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1580:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a1582:	2201      	movs	r2, #1
 80a1584:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1586:	461a      	mov	r2, r3
 80a1588:	f7ff f828 	bl	80a05dc <hal_usart_init>
}
 80a158c:	4620      	mov	r0, r4
 80a158e:	bd10      	pop	{r4, pc}
 80a1590:	080a448c 	.word	0x080a448c

080a1594 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a1596:	4c1a      	ldr	r4, [pc, #104]	; (80a1600 <_Z22__fetch_global_Serial1v+0x6c>)
 80a1598:	6826      	ldr	r6, [r4, #0]
 80a159a:	b94e      	cbnz	r6, 80a15b0 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a159c:	2084      	movs	r0, #132	; 0x84
 80a159e:	f7fe fd7c 	bl	80a009a <_Znwj>
 80a15a2:	4605      	mov	r5, r0
 80a15a4:	b118      	cbz	r0, 80a15ae <_Z22__fetch_global_Serial1v+0x1a>
 80a15a6:	2284      	movs	r2, #132	; 0x84
 80a15a8:	4631      	mov	r1, r6
 80a15aa:	f001 f86f 	bl	80a268c <memset>
 80a15ae:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a15b0:	4d14      	ldr	r5, [pc, #80]	; (80a1604 <_Z22__fetch_global_Serial1v+0x70>)
 80a15b2:	682f      	ldr	r7, [r5, #0]
 80a15b4:	b94f      	cbnz	r7, 80a15ca <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a15b6:	2084      	movs	r0, #132	; 0x84
 80a15b8:	f7fe fd6f 	bl	80a009a <_Znwj>
 80a15bc:	4606      	mov	r6, r0
 80a15be:	b118      	cbz	r0, 80a15c8 <_Z22__fetch_global_Serial1v+0x34>
 80a15c0:	2284      	movs	r2, #132	; 0x84
 80a15c2:	4639      	mov	r1, r7
 80a15c4:	f001 f862 	bl	80a268c <memset>
 80a15c8:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a15ca:	4f0f      	ldr	r7, [pc, #60]	; (80a1608 <_Z22__fetch_global_Serial1v+0x74>)
 80a15cc:	7839      	ldrb	r1, [r7, #0]
 80a15ce:	f3bf 8f5b 	dmb	ish
 80a15d2:	f011 0601 	ands.w	r6, r1, #1
 80a15d6:	d111      	bne.n	80a15fc <_Z22__fetch_global_Serial1v+0x68>
 80a15d8:	4638      	mov	r0, r7
 80a15da:	f7fe fd64 	bl	80a00a6 <__cxa_guard_acquire>
 80a15de:	b168      	cbz	r0, 80a15fc <_Z22__fetch_global_Serial1v+0x68>
 80a15e0:	4631      	mov	r1, r6
 80a15e2:	6822      	ldr	r2, [r4, #0]
 80a15e4:	682b      	ldr	r3, [r5, #0]
 80a15e6:	4809      	ldr	r0, [pc, #36]	; (80a160c <_Z22__fetch_global_Serial1v+0x78>)
 80a15e8:	f7ff ffbe 	bl	80a1568 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a15ec:	4638      	mov	r0, r7
 80a15ee:	f7fe fd5f 	bl	80a00b0 <__cxa_guard_release>
 80a15f2:	4a07      	ldr	r2, [pc, #28]	; (80a1610 <_Z22__fetch_global_Serial1v+0x7c>)
 80a15f4:	4907      	ldr	r1, [pc, #28]	; (80a1614 <_Z22__fetch_global_Serial1v+0x80>)
 80a15f6:	4805      	ldr	r0, [pc, #20]	; (80a160c <_Z22__fetch_global_Serial1v+0x78>)
 80a15f8:	f000 fa04 	bl	80a1a04 <__aeabi_atexit>
#endif
	return serial1;
}
 80a15fc:	4803      	ldr	r0, [pc, #12]	; (80a160c <_Z22__fetch_global_Serial1v+0x78>)
 80a15fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1600:	20000290 	.word	0x20000290
 80a1604:	20000294 	.word	0x20000294
 80a1608:	2000028c 	.word	0x2000028c
 80a160c:	20000298 	.word	0x20000298
 80a1610:	20000204 	.word	0x20000204
 80a1614:	080a14f1 	.word	0x080a14f1

080a1618 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1618:	b510      	push	{r4, lr}
      if (_M_empty())
 80a161a:	6883      	ldr	r3, [r0, #8]
 80a161c:	4604      	mov	r4, r0
 80a161e:	b90b      	cbnz	r3, 80a1624 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1620:	f000 f9f9 	bl	80a1a16 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1624:	68c3      	ldr	r3, [r0, #12]
 80a1626:	4798      	blx	r3
      if (_M_manager)
 80a1628:	68a3      	ldr	r3, [r4, #8]
 80a162a:	b11b      	cbz	r3, 80a1634 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a162c:	2203      	movs	r2, #3
 80a162e:	4621      	mov	r1, r4
 80a1630:	4620      	mov	r0, r4
 80a1632:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1634:	4620      	mov	r0, r4
}
 80a1636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a163a:	2110      	movs	r1, #16
 80a163c:	f000 b9e7 	b.w	80a1a0e <_ZdlPvj>

080a1640 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1640:	4770      	bx	lr

080a1642 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1644:	4606      	mov	r6, r0
 80a1646:	4615      	mov	r5, r2
 80a1648:	460c      	mov	r4, r1
 80a164a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a164c:	42bc      	cmp	r4, r7
 80a164e:	d006      	beq.n	80a165e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1650:	6833      	ldr	r3, [r6, #0]
 80a1652:	4630      	mov	r0, r6
 80a1654:	689b      	ldr	r3, [r3, #8]
 80a1656:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a165a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a165c:	e7f6      	b.n	80a164c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a165e:	4628      	mov	r0, r5
 80a1660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1662 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1662:	2200      	movs	r2, #0
 80a1664:	7c00      	ldrb	r0, [r0, #16]
 80a1666:	f7fe bff9 	b.w	80a065c <hal_i2c_write>

080a166a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a166a:	2100      	movs	r1, #0
 80a166c:	7c00      	ldrb	r0, [r0, #16]
 80a166e:	f7fe bffd 	b.w	80a066c <hal_i2c_available>

080a1672 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1672:	2100      	movs	r1, #0
 80a1674:	7c00      	ldrb	r0, [r0, #16]
 80a1676:	f7ff b801 	b.w	80a067c <hal_i2c_read>

080a167a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a167a:	2100      	movs	r1, #0
 80a167c:	7c00      	ldrb	r0, [r0, #16]
 80a167e:	f7ff b805 	b.w	80a068c <hal_i2c_peek>

080a1682 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1682:	2100      	movs	r1, #0
 80a1684:	7c00      	ldrb	r0, [r0, #16]
 80a1686:	f7ff b809 	b.w	80a069c <hal_i2c_flush>

080a168a <_ZN7TwoWireD0Ev>:
 80a168a:	b510      	push	{r4, lr}
 80a168c:	4604      	mov	r4, r0
 80a168e:	2114      	movs	r1, #20
 80a1690:	f000 f9bd 	bl	80a1a0e <_ZdlPvj>
 80a1694:	4620      	mov	r0, r4
 80a1696:	bd10      	pop	{r4, pc}

080a1698 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1698:	b510      	push	{r4, lr}
 80a169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a169e:	4604      	mov	r4, r0
 80a16a0:	4608      	mov	r0, r1
 80a16a2:	2100      	movs	r1, #0
 80a16a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a16a8:	4b03      	ldr	r3, [pc, #12]	; (80a16b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a16aa:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a16ac:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a16ae:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a16b0:	f7ff f804 	bl	80a06bc <hal_i2c_init>
}
 80a16b4:	4620      	mov	r0, r4
 80a16b6:	bd10      	pop	{r4, pc}
 80a16b8:	080a44bc 	.word	0x080a44bc

080a16bc <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a16bc:	2200      	movs	r2, #0
 80a16be:	6840      	ldr	r0, [r0, #4]
 80a16c0:	4611      	mov	r1, r2
 80a16c2:	f7ff b899 	b.w	80a07f8 <network_ready>

080a16c6 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a16c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a16c8:	4615      	mov	r5, r2
 80a16ca:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a16cc:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a16ce:	460e      	mov	r6, r1
 80a16d0:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a16d2:	2100      	movs	r1, #0
 80a16d4:	a803      	add	r0, sp, #12
 80a16d6:	f000 ffd9 	bl	80a268c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a16da:	4628      	mov	r0, r5
 80a16dc:	f001 f81d 	bl	80a271a <strlen>
 80a16e0:	2700      	movs	r7, #0
 80a16e2:	b281      	uxth	r1, r0
 80a16e4:	6873      	ldr	r3, [r6, #4]
 80a16e6:	4628      	mov	r0, r5
 80a16e8:	9700      	str	r7, [sp, #0]
 80a16ea:	aa03      	add	r2, sp, #12
 80a16ec:	f7ff f830 	bl	80a0750 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a16f0:	b130      	cbz	r0, 80a1700 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a16f2:	4639      	mov	r1, r7
 80a16f4:	4620      	mov	r0, r4
 80a16f6:	f7ff fe29 	bl	80a134c <_ZN9IPAddressC1Em>
    }
 80a16fa:	4620      	mov	r0, r4
 80a16fc:	b009      	add	sp, #36	; 0x24
 80a16fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1700:	4620      	mov	r0, r4
 80a1702:	a903      	add	r1, sp, #12
 80a1704:	f7ff fe10 	bl	80a1328 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a1708:	e7f7      	b.n	80a16fa <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a170a <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a170a:	2200      	movs	r2, #0
 80a170c:	6840      	ldr	r0, [r0, #4]
 80a170e:	4611      	mov	r1, r2
 80a1710:	f7ff b892 	b.w	80a0838 <network_listening>

080a1714 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1714:	2200      	movs	r2, #0
 80a1716:	6840      	ldr	r0, [r0, #4]
 80a1718:	4611      	mov	r1, r2
 80a171a:	f7ff b89d 	b.w	80a0858 <network_get_listen_timeout>

080a171e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a171e:	2200      	movs	r2, #0
 80a1720:	6840      	ldr	r0, [r0, #4]
 80a1722:	f7ff b891 	b.w	80a0848 <network_set_listen_timeout>

080a1726 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1726:	2200      	movs	r2, #0
 80a1728:	6840      	ldr	r0, [r0, #4]
 80a172a:	f081 0101 	eor.w	r1, r1, #1
 80a172e:	f7ff b87b 	b.w	80a0828 <network_listen>

080a1732 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a1732:	2300      	movs	r3, #0
 80a1734:	6840      	ldr	r0, [r0, #4]
 80a1736:	461a      	mov	r2, r3
 80a1738:	4619      	mov	r1, r3
 80a173a:	f7ff b86d 	b.w	80a0818 <network_off>

080a173e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a173e:	2200      	movs	r2, #0
 80a1740:	6840      	ldr	r0, [r0, #4]
 80a1742:	4611      	mov	r1, r2
 80a1744:	f7ff b848 	b.w	80a07d8 <network_connecting>

080a1748 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1748:	2200      	movs	r2, #0
 80a174a:	2102      	movs	r1, #2
 80a174c:	6840      	ldr	r0, [r0, #4]
 80a174e:	f7ff b84b 	b.w	80a07e8 <network_disconnect>

080a1752 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a1752:	2300      	movs	r3, #0
 80a1754:	6840      	ldr	r0, [r0, #4]
 80a1756:	461a      	mov	r2, r3
 80a1758:	f7ff b836 	b.w	80a07c8 <network_connect>

080a175c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a175c:	2204      	movs	r2, #4
 80a175e:	4b02      	ldr	r3, [pc, #8]	; (80a1768 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1760:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1762:	4a02      	ldr	r2, [pc, #8]	; (80a176c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1764:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a1766:	4770      	bx	lr
 80a1768:	200002ac 	.word	0x200002ac
 80a176c:	080a44e4 	.word	0x080a44e4

080a1770 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1770:	2300      	movs	r3, #0
 80a1772:	6840      	ldr	r0, [r0, #4]
 80a1774:	461a      	mov	r2, r3
 80a1776:	f7ff b827 	b.w	80a07c8 <network_connect>

080a177a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a177a:	2200      	movs	r2, #0
 80a177c:	2102      	movs	r1, #2
 80a177e:	6840      	ldr	r0, [r0, #4]
 80a1780:	f7ff b832 	b.w	80a07e8 <network_disconnect>

080a1784 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1784:	2200      	movs	r2, #0
 80a1786:	6840      	ldr	r0, [r0, #4]
 80a1788:	4611      	mov	r1, r2
 80a178a:	f7ff b825 	b.w	80a07d8 <network_connecting>

080a178e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a178e:	2200      	movs	r2, #0
 80a1790:	6840      	ldr	r0, [r0, #4]
 80a1792:	4611      	mov	r1, r2
 80a1794:	f7ff b830 	b.w	80a07f8 <network_ready>

080a1798 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1798:	2300      	movs	r3, #0
 80a179a:	6840      	ldr	r0, [r0, #4]
 80a179c:	461a      	mov	r2, r3
 80a179e:	4619      	mov	r1, r3
 80a17a0:	f7ff b832 	b.w	80a0808 <network_on>

080a17a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a17a4:	2300      	movs	r3, #0
 80a17a6:	6840      	ldr	r0, [r0, #4]
 80a17a8:	461a      	mov	r2, r3
 80a17aa:	4619      	mov	r1, r3
 80a17ac:	f7ff b834 	b.w	80a0818 <network_off>

080a17b0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a17b0:	2200      	movs	r2, #0
 80a17b2:	6840      	ldr	r0, [r0, #4]
 80a17b4:	f081 0101 	eor.w	r1, r1, #1
 80a17b8:	f7ff b836 	b.w	80a0828 <network_listen>

080a17bc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a17bc:	2200      	movs	r2, #0
 80a17be:	6840      	ldr	r0, [r0, #4]
 80a17c0:	f7ff b842 	b.w	80a0848 <network_set_listen_timeout>

080a17c4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a17c4:	2200      	movs	r2, #0
 80a17c6:	6840      	ldr	r0, [r0, #4]
 80a17c8:	4611      	mov	r1, r2
 80a17ca:	f7ff b845 	b.w	80a0858 <network_get_listen_timeout>

080a17ce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a17ce:	2200      	movs	r2, #0
 80a17d0:	6840      	ldr	r0, [r0, #4]
 80a17d2:	4611      	mov	r1, r2
 80a17d4:	f7ff b830 	b.w	80a0838 <network_listening>

080a17d8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a17d8:	b570      	push	{r4, r5, r6, lr}
 80a17da:	4615      	mov	r5, r2
 80a17dc:	b08e      	sub	sp, #56	; 0x38
 80a17de:	4604      	mov	r4, r0
    IPAddress addr;
 80a17e0:	a808      	add	r0, sp, #32
 80a17e2:	f7ff fd93 	bl	80a130c <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a17e6:	2211      	movs	r2, #17
 80a17e8:	2100      	movs	r1, #0
 80a17ea:	a803      	add	r0, sp, #12
 80a17ec:	f000 ff4e 	bl	80a268c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a17f0:	2600      	movs	r6, #0
 80a17f2:	4628      	mov	r0, r5
 80a17f4:	f000 ff91 	bl	80a271a <strlen>
 80a17f8:	4b0a      	ldr	r3, [pc, #40]	; (80a1824 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a17fa:	9600      	str	r6, [sp, #0]
 80a17fc:	b281      	uxth	r1, r0
 80a17fe:	685b      	ldr	r3, [r3, #4]
 80a1800:	4628      	mov	r0, r5
 80a1802:	aa03      	add	r2, sp, #12
 80a1804:	f7fe ffa4 	bl	80a0750 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1808:	b130      	cbz	r0, 80a1818 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a180a:	4631      	mov	r1, r6
 80a180c:	4620      	mov	r0, r4
 80a180e:	f7ff fd9d 	bl	80a134c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1812:	4620      	mov	r0, r4
 80a1814:	b00e      	add	sp, #56	; 0x38
 80a1816:	bd70      	pop	{r4, r5, r6, pc}
 80a1818:	4620      	mov	r0, r4
 80a181a:	a903      	add	r1, sp, #12
 80a181c:	f7ff fd84 	bl	80a1328 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1820:	e7f7      	b.n	80a1812 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1822:	bf00      	nop
 80a1824:	200002ac 	.word	0x200002ac

080a1828 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1828:	4b02      	ldr	r3, [pc, #8]	; (80a1834 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a182a:	4a03      	ldr	r2, [pc, #12]	; (80a1838 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a182c:	601a      	str	r2, [r3, #0]
 80a182e:	2200      	movs	r2, #0
 80a1830:	605a      	str	r2, [r3, #4]

} // spark
 80a1832:	4770      	bx	lr
 80a1834:	200002b4 	.word	0x200002b4
 80a1838:	080a4518 	.word	0x080a4518

080a183c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a183c:	b510      	push	{r4, lr}
 80a183e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1840:	6880      	ldr	r0, [r0, #8]
 80a1842:	b108      	cbz	r0, 80a1848 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a1844:	f7fe fec2 	bl	80a05cc <os_mutex_recursive_destroy>
 80a1848:	4620      	mov	r0, r4
 80a184a:	bd10      	pop	{r4, pc}

080a184c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a184c:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a184e:	b570      	push	{r4, r5, r6, lr}
 80a1850:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a1852:	d901      	bls.n	80a1858 <pinAvailable+0xc>
    return false;
 80a1854:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a1856:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1858:	f1a0 030d 	sub.w	r3, r0, #13
 80a185c:	2b02      	cmp	r3, #2
 80a185e:	d90b      	bls.n	80a1878 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a1860:	2801      	cmp	r0, #1
 80a1862:	d826      	bhi.n	80a18b2 <pinAvailable+0x66>
 80a1864:	f000 f8a6 	bl	80a19b4 <_Z19__fetch_global_Wirev>
 80a1868:	2100      	movs	r1, #0
 80a186a:	7c00      	ldrb	r0, [r0, #16]
 80a186c:	f7fe ff1e 	bl	80a06ac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1870:	f080 0001 	eor.w	r0, r0, #1
 80a1874:	b2c0      	uxtb	r0, r0
 80a1876:	e7ee      	b.n	80a1856 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a1878:	4e13      	ldr	r6, [pc, #76]	; (80a18c8 <pinAvailable+0x7c>)
 80a187a:	7831      	ldrb	r1, [r6, #0]
 80a187c:	f3bf 8f5b 	dmb	ish
 80a1880:	f011 0501 	ands.w	r5, r1, #1
 80a1884:	d10f      	bne.n	80a18a6 <pinAvailable+0x5a>
 80a1886:	4630      	mov	r0, r6
 80a1888:	f7fe fc0d 	bl	80a00a6 <__cxa_guard_acquire>
 80a188c:	b158      	cbz	r0, 80a18a6 <pinAvailable+0x5a>
 80a188e:	4629      	mov	r1, r5
 80a1890:	480e      	ldr	r0, [pc, #56]	; (80a18cc <pinAvailable+0x80>)
 80a1892:	f7ff f849 	bl	80a0928 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1896:	4630      	mov	r0, r6
 80a1898:	f7fe fc0a 	bl	80a00b0 <__cxa_guard_release>
 80a189c:	4a0c      	ldr	r2, [pc, #48]	; (80a18d0 <pinAvailable+0x84>)
 80a189e:	490d      	ldr	r1, [pc, #52]	; (80a18d4 <pinAvailable+0x88>)
 80a18a0:	480a      	ldr	r0, [pc, #40]	; (80a18cc <pinAvailable+0x80>)
 80a18a2:	f000 f8af 	bl	80a1a04 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a18a6:	4b09      	ldr	r3, [pc, #36]	; (80a18cc <pinAvailable+0x80>)
 80a18a8:	7818      	ldrb	r0, [r3, #0]
 80a18aa:	f7fe ff19 	bl	80a06e0 <hal_spi_is_enabled>
 80a18ae:	2800      	cmp	r0, #0
 80a18b0:	d1d0      	bne.n	80a1854 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a18b2:	3c12      	subs	r4, #18
 80a18b4:	2c01      	cmp	r4, #1
 80a18b6:	d805      	bhi.n	80a18c4 <pinAvailable+0x78>
 80a18b8:	f7ff fe6c 	bl	80a1594 <_Z22__fetch_global_Serial1v>
 80a18bc:	7c00      	ldrb	r0, [r0, #16]
 80a18be:	f7fe febd 	bl	80a063c <hal_usart_is_enabled>
 80a18c2:	e7d5      	b.n	80a1870 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a18c4:	2001      	movs	r0, #1
 80a18c6:	e7c6      	b.n	80a1856 <pinAvailable+0xa>
 80a18c8:	200002bc 	.word	0x200002bc
 80a18cc:	200002c0 	.word	0x200002c0
 80a18d0:	20000204 	.word	0x20000204
 80a18d4:	080a183d 	.word	0x080a183d

080a18d8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a18d8:	2817      	cmp	r0, #23
{
 80a18da:	b538      	push	{r3, r4, r5, lr}
 80a18dc:	4604      	mov	r4, r0
 80a18de:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a18e0:	d80a      	bhi.n	80a18f8 <pinMode+0x20>
 80a18e2:	29ff      	cmp	r1, #255	; 0xff
 80a18e4:	d008      	beq.n	80a18f8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a18e6:	f7ff ffb1 	bl	80a184c <pinAvailable>
 80a18ea:	b128      	cbz	r0, 80a18f8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a18ec:	4629      	mov	r1, r5
 80a18ee:	4620      	mov	r0, r4
}
 80a18f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a18f4:	f7fe be32 	b.w	80a055c <HAL_Pin_Mode>
}
 80a18f8:	bd38      	pop	{r3, r4, r5, pc}

080a18fa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a18fa:	b538      	push	{r3, r4, r5, lr}
 80a18fc:	4604      	mov	r4, r0
 80a18fe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1900:	f7fe fe34 	bl	80a056c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1904:	28ff      	cmp	r0, #255	; 0xff
 80a1906:	d010      	beq.n	80a192a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a1908:	2806      	cmp	r0, #6
 80a190a:	d804      	bhi.n	80a1916 <digitalWrite+0x1c>
 80a190c:	234d      	movs	r3, #77	; 0x4d
 80a190e:	fa23 f000 	lsr.w	r0, r3, r0
 80a1912:	07c3      	lsls	r3, r0, #31
 80a1914:	d409      	bmi.n	80a192a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1916:	4620      	mov	r0, r4
 80a1918:	f7ff ff98 	bl	80a184c <pinAvailable>
 80a191c:	b128      	cbz	r0, 80a192a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a191e:	4629      	mov	r1, r5
 80a1920:	4620      	mov	r0, r4
}
 80a1922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a1926:	f7fe be29 	b.w	80a057c <HAL_GPIO_Write>
}
 80a192a:	bd38      	pop	{r3, r4, r5, pc}

080a192c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a192c:	b510      	push	{r4, lr}
 80a192e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1930:	f7fe fe1c 	bl	80a056c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a1934:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a1936:	b2db      	uxtb	r3, r3
 80a1938:	2b01      	cmp	r3, #1
 80a193a:	d908      	bls.n	80a194e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a193c:	4620      	mov	r0, r4
 80a193e:	f7ff ff85 	bl	80a184c <pinAvailable>
 80a1942:	b120      	cbz	r0, 80a194e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1944:	4620      	mov	r0, r4
}
 80a1946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a194a:	f7fe be1f 	b.w	80a058c <HAL_GPIO_Read>
}
 80a194e:	2000      	movs	r0, #0
 80a1950:	bd10      	pop	{r4, pc}
	...

080a1954 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1954:	2300      	movs	r3, #0
 80a1956:	b513      	push	{r0, r1, r4, lr}
 80a1958:	4c07      	ldr	r4, [pc, #28]	; (80a1978 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a195a:	461a      	mov	r2, r3
 80a195c:	4619      	mov	r1, r3
 80a195e:	4620      	mov	r0, r4
 80a1960:	9300      	str	r3, [sp, #0]
 80a1962:	f7ff fd09 	bl	80a1378 <_ZN9IPAddressC1Ehhhh>
 80a1966:	4620      	mov	r0, r4
 80a1968:	4a04      	ldr	r2, [pc, #16]	; (80a197c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a196a:	4905      	ldr	r1, [pc, #20]	; (80a1980 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a196c:	b002      	add	sp, #8
 80a196e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1972:	f000 b847 	b.w	80a1a04 <__aeabi_atexit>
 80a1976:	bf00      	nop
 80a1978:	200002d0 	.word	0x200002d0
 80a197c:	20000204 	.word	0x20000204
 80a1980:	080a12c9 	.word	0x080a12c9

080a1984 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a1984:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a1986:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1988:	2520      	movs	r5, #32
 80a198a:	8043      	strh	r3, [r0, #2]
 80a198c:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a198e:	4e08      	ldr	r6, [pc, #32]	; (80a19b0 <_Z17acquireWireBufferv+0x2c>)
{
 80a1990:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a1992:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1994:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a1996:	6085      	str	r5, [r0, #8]
 80a1998:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a199a:	4628      	mov	r0, r5
 80a199c:	f000 f839 	bl	80a1a12 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a19a0:	4631      	mov	r1, r6
	};
 80a19a2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a19a4:	4628      	mov	r0, r5
 80a19a6:	f000 f834 	bl	80a1a12 <_ZnajRKSt9nothrow_t>
	};
 80a19aa:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a19ac:	4620      	mov	r0, r4
 80a19ae:	bd70      	pop	{r4, r5, r6, pc}
 80a19b0:	080a4544 	.word	0x080a4544

080a19b4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a19b4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a19b6:	4d0f      	ldr	r5, [pc, #60]	; (80a19f4 <_Z19__fetch_global_Wirev+0x40>)
{
 80a19b8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a19ba:	7829      	ldrb	r1, [r5, #0]
 80a19bc:	f3bf 8f5b 	dmb	ish
 80a19c0:	f011 0401 	ands.w	r4, r1, #1
 80a19c4:	d113      	bne.n	80a19ee <_Z19__fetch_global_Wirev+0x3a>
 80a19c6:	4628      	mov	r0, r5
 80a19c8:	f7fe fb6d 	bl	80a00a6 <__cxa_guard_acquire>
 80a19cc:	b178      	cbz	r0, 80a19ee <_Z19__fetch_global_Wirev+0x3a>
 80a19ce:	a801      	add	r0, sp, #4
 80a19d0:	f7ff ffd8 	bl	80a1984 <_Z17acquireWireBufferv>
 80a19d4:	4621      	mov	r1, r4
 80a19d6:	aa01      	add	r2, sp, #4
 80a19d8:	4807      	ldr	r0, [pc, #28]	; (80a19f8 <_Z19__fetch_global_Wirev+0x44>)
 80a19da:	f7ff fe5d 	bl	80a1698 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a19de:	4628      	mov	r0, r5
 80a19e0:	f7fe fb66 	bl	80a00b0 <__cxa_guard_release>
 80a19e4:	4a05      	ldr	r2, [pc, #20]	; (80a19fc <_Z19__fetch_global_Wirev+0x48>)
 80a19e6:	4906      	ldr	r1, [pc, #24]	; (80a1a00 <_Z19__fetch_global_Wirev+0x4c>)
 80a19e8:	4803      	ldr	r0, [pc, #12]	; (80a19f8 <_Z19__fetch_global_Wirev+0x44>)
 80a19ea:	f000 f80b 	bl	80a1a04 <__aeabi_atexit>
	return wire;
}
 80a19ee:	4802      	ldr	r0, [pc, #8]	; (80a19f8 <_Z19__fetch_global_Wirev+0x44>)
 80a19f0:	b007      	add	sp, #28
 80a19f2:	bd30      	pop	{r4, r5, pc}
 80a19f4:	200002e8 	.word	0x200002e8
 80a19f8:	200002ec 	.word	0x200002ec
 80a19fc:	20000204 	.word	0x20000204
 80a1a00:	080a1641 	.word	0x080a1641

080a1a04 <__aeabi_atexit>:
 80a1a04:	460b      	mov	r3, r1
 80a1a06:	4601      	mov	r1, r0
 80a1a08:	4618      	mov	r0, r3
 80a1a0a:	f000 be23 	b.w	80a2654 <__cxa_atexit>

080a1a0e <_ZdlPvj>:
 80a1a0e:	f7fe bb48 	b.w	80a00a2 <_ZdlPv>

080a1a12 <_ZnajRKSt9nothrow_t>:
 80a1a12:	f7fe bb44 	b.w	80a009e <_Znaj>

080a1a16 <_ZSt25__throw_bad_function_callv>:
 80a1a16:	b508      	push	{r3, lr}
 80a1a18:	f7fe ff6e 	bl	80a08f8 <abort>

080a1a1c <__aeabi_drsub>:
 80a1a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1a20:	e002      	b.n	80a1a28 <__adddf3>
 80a1a22:	bf00      	nop

080a1a24 <__aeabi_dsub>:
 80a1a24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1a28 <__adddf3>:
 80a1a28:	b530      	push	{r4, r5, lr}
 80a1a2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1a2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1a32:	ea94 0f05 	teq	r4, r5
 80a1a36:	bf08      	it	eq
 80a1a38:	ea90 0f02 	teqeq	r0, r2
 80a1a3c:	bf1f      	itttt	ne
 80a1a3e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1a42:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1a46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1a4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1a4e:	f000 80e2 	beq.w	80a1c16 <__adddf3+0x1ee>
 80a1a52:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1a56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1a5a:	bfb8      	it	lt
 80a1a5c:	426d      	neglt	r5, r5
 80a1a5e:	dd0c      	ble.n	80a1a7a <__adddf3+0x52>
 80a1a60:	442c      	add	r4, r5
 80a1a62:	ea80 0202 	eor.w	r2, r0, r2
 80a1a66:	ea81 0303 	eor.w	r3, r1, r3
 80a1a6a:	ea82 0000 	eor.w	r0, r2, r0
 80a1a6e:	ea83 0101 	eor.w	r1, r3, r1
 80a1a72:	ea80 0202 	eor.w	r2, r0, r2
 80a1a76:	ea81 0303 	eor.w	r3, r1, r3
 80a1a7a:	2d36      	cmp	r5, #54	; 0x36
 80a1a7c:	bf88      	it	hi
 80a1a7e:	bd30      	pophi	{r4, r5, pc}
 80a1a80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1a84:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1a88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1a8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1a90:	d002      	beq.n	80a1a98 <__adddf3+0x70>
 80a1a92:	4240      	negs	r0, r0
 80a1a94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1a98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1a9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1aa0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1aa4:	d002      	beq.n	80a1aac <__adddf3+0x84>
 80a1aa6:	4252      	negs	r2, r2
 80a1aa8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1aac:	ea94 0f05 	teq	r4, r5
 80a1ab0:	f000 80a7 	beq.w	80a1c02 <__adddf3+0x1da>
 80a1ab4:	f1a4 0401 	sub.w	r4, r4, #1
 80a1ab8:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1abc:	db0d      	blt.n	80a1ada <__adddf3+0xb2>
 80a1abe:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1ac2:	fa22 f205 	lsr.w	r2, r2, r5
 80a1ac6:	1880      	adds	r0, r0, r2
 80a1ac8:	f141 0100 	adc.w	r1, r1, #0
 80a1acc:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1ad0:	1880      	adds	r0, r0, r2
 80a1ad2:	fa43 f305 	asr.w	r3, r3, r5
 80a1ad6:	4159      	adcs	r1, r3
 80a1ad8:	e00e      	b.n	80a1af8 <__adddf3+0xd0>
 80a1ada:	f1a5 0520 	sub.w	r5, r5, #32
 80a1ade:	f10e 0e20 	add.w	lr, lr, #32
 80a1ae2:	2a01      	cmp	r2, #1
 80a1ae4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1ae8:	bf28      	it	cs
 80a1aea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1aee:	fa43 f305 	asr.w	r3, r3, r5
 80a1af2:	18c0      	adds	r0, r0, r3
 80a1af4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1afc:	d507      	bpl.n	80a1b0e <__adddf3+0xe6>
 80a1afe:	f04f 0e00 	mov.w	lr, #0
 80a1b02:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1b06:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1b0a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1b0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1b12:	d31b      	bcc.n	80a1b4c <__adddf3+0x124>
 80a1b14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1b18:	d30c      	bcc.n	80a1b34 <__adddf3+0x10c>
 80a1b1a:	0849      	lsrs	r1, r1, #1
 80a1b1c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1b20:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1b24:	f104 0401 	add.w	r4, r4, #1
 80a1b28:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1b2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1b30:	f080 809a 	bcs.w	80a1c68 <__adddf3+0x240>
 80a1b34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1b38:	bf08      	it	eq
 80a1b3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1b3e:	f150 0000 	adcs.w	r0, r0, #0
 80a1b42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1b46:	ea41 0105 	orr.w	r1, r1, r5
 80a1b4a:	bd30      	pop	{r4, r5, pc}
 80a1b4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1b50:	4140      	adcs	r0, r0
 80a1b52:	eb41 0101 	adc.w	r1, r1, r1
 80a1b56:	3c01      	subs	r4, #1
 80a1b58:	bf28      	it	cs
 80a1b5a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a1b5e:	d2e9      	bcs.n	80a1b34 <__adddf3+0x10c>
 80a1b60:	f091 0f00 	teq	r1, #0
 80a1b64:	bf04      	itt	eq
 80a1b66:	4601      	moveq	r1, r0
 80a1b68:	2000      	moveq	r0, #0
 80a1b6a:	fab1 f381 	clz	r3, r1
 80a1b6e:	bf08      	it	eq
 80a1b70:	3320      	addeq	r3, #32
 80a1b72:	f1a3 030b 	sub.w	r3, r3, #11
 80a1b76:	f1b3 0220 	subs.w	r2, r3, #32
 80a1b7a:	da0c      	bge.n	80a1b96 <__adddf3+0x16e>
 80a1b7c:	320c      	adds	r2, #12
 80a1b7e:	dd08      	ble.n	80a1b92 <__adddf3+0x16a>
 80a1b80:	f102 0c14 	add.w	ip, r2, #20
 80a1b84:	f1c2 020c 	rsb	r2, r2, #12
 80a1b88:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1b8c:	fa21 f102 	lsr.w	r1, r1, r2
 80a1b90:	e00c      	b.n	80a1bac <__adddf3+0x184>
 80a1b92:	f102 0214 	add.w	r2, r2, #20
 80a1b96:	bfd8      	it	le
 80a1b98:	f1c2 0c20 	rsble	ip, r2, #32
 80a1b9c:	fa01 f102 	lsl.w	r1, r1, r2
 80a1ba0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1ba4:	bfdc      	itt	le
 80a1ba6:	ea41 010c 	orrle.w	r1, r1, ip
 80a1baa:	4090      	lslle	r0, r2
 80a1bac:	1ae4      	subs	r4, r4, r3
 80a1bae:	bfa2      	ittt	ge
 80a1bb0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1bb4:	4329      	orrge	r1, r5
 80a1bb6:	bd30      	popge	{r4, r5, pc}
 80a1bb8:	ea6f 0404 	mvn.w	r4, r4
 80a1bbc:	3c1f      	subs	r4, #31
 80a1bbe:	da1c      	bge.n	80a1bfa <__adddf3+0x1d2>
 80a1bc0:	340c      	adds	r4, #12
 80a1bc2:	dc0e      	bgt.n	80a1be2 <__adddf3+0x1ba>
 80a1bc4:	f104 0414 	add.w	r4, r4, #20
 80a1bc8:	f1c4 0220 	rsb	r2, r4, #32
 80a1bcc:	fa20 f004 	lsr.w	r0, r0, r4
 80a1bd0:	fa01 f302 	lsl.w	r3, r1, r2
 80a1bd4:	ea40 0003 	orr.w	r0, r0, r3
 80a1bd8:	fa21 f304 	lsr.w	r3, r1, r4
 80a1bdc:	ea45 0103 	orr.w	r1, r5, r3
 80a1be0:	bd30      	pop	{r4, r5, pc}
 80a1be2:	f1c4 040c 	rsb	r4, r4, #12
 80a1be6:	f1c4 0220 	rsb	r2, r4, #32
 80a1bea:	fa20 f002 	lsr.w	r0, r0, r2
 80a1bee:	fa01 f304 	lsl.w	r3, r1, r4
 80a1bf2:	ea40 0003 	orr.w	r0, r0, r3
 80a1bf6:	4629      	mov	r1, r5
 80a1bf8:	bd30      	pop	{r4, r5, pc}
 80a1bfa:	fa21 f004 	lsr.w	r0, r1, r4
 80a1bfe:	4629      	mov	r1, r5
 80a1c00:	bd30      	pop	{r4, r5, pc}
 80a1c02:	f094 0f00 	teq	r4, #0
 80a1c06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1c0a:	bf06      	itte	eq
 80a1c0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1c10:	3401      	addeq	r4, #1
 80a1c12:	3d01      	subne	r5, #1
 80a1c14:	e74e      	b.n	80a1ab4 <__adddf3+0x8c>
 80a1c16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1c1a:	bf18      	it	ne
 80a1c1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1c20:	d029      	beq.n	80a1c76 <__adddf3+0x24e>
 80a1c22:	ea94 0f05 	teq	r4, r5
 80a1c26:	bf08      	it	eq
 80a1c28:	ea90 0f02 	teqeq	r0, r2
 80a1c2c:	d005      	beq.n	80a1c3a <__adddf3+0x212>
 80a1c2e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1c32:	bf04      	itt	eq
 80a1c34:	4619      	moveq	r1, r3
 80a1c36:	4610      	moveq	r0, r2
 80a1c38:	bd30      	pop	{r4, r5, pc}
 80a1c3a:	ea91 0f03 	teq	r1, r3
 80a1c3e:	bf1e      	ittt	ne
 80a1c40:	2100      	movne	r1, #0
 80a1c42:	2000      	movne	r0, #0
 80a1c44:	bd30      	popne	{r4, r5, pc}
 80a1c46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1c4a:	d105      	bne.n	80a1c58 <__adddf3+0x230>
 80a1c4c:	0040      	lsls	r0, r0, #1
 80a1c4e:	4149      	adcs	r1, r1
 80a1c50:	bf28      	it	cs
 80a1c52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1c56:	bd30      	pop	{r4, r5, pc}
 80a1c58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1c5c:	bf3c      	itt	cc
 80a1c5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1c62:	bd30      	popcc	{r4, r5, pc}
 80a1c64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1c68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1c6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1c70:	f04f 0000 	mov.w	r0, #0
 80a1c74:	bd30      	pop	{r4, r5, pc}
 80a1c76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1c7a:	bf1a      	itte	ne
 80a1c7c:	4619      	movne	r1, r3
 80a1c7e:	4610      	movne	r0, r2
 80a1c80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1c84:	bf1c      	itt	ne
 80a1c86:	460b      	movne	r3, r1
 80a1c88:	4602      	movne	r2, r0
 80a1c8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1c8e:	bf06      	itte	eq
 80a1c90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1c94:	ea91 0f03 	teqeq	r1, r3
 80a1c98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1c9c:	bd30      	pop	{r4, r5, pc}
 80a1c9e:	bf00      	nop

080a1ca0 <__aeabi_ui2d>:
 80a1ca0:	f090 0f00 	teq	r0, #0
 80a1ca4:	bf04      	itt	eq
 80a1ca6:	2100      	moveq	r1, #0
 80a1ca8:	4770      	bxeq	lr
 80a1caa:	b530      	push	{r4, r5, lr}
 80a1cac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1cb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1cb4:	f04f 0500 	mov.w	r5, #0
 80a1cb8:	f04f 0100 	mov.w	r1, #0
 80a1cbc:	e750      	b.n	80a1b60 <__adddf3+0x138>
 80a1cbe:	bf00      	nop

080a1cc0 <__aeabi_i2d>:
 80a1cc0:	f090 0f00 	teq	r0, #0
 80a1cc4:	bf04      	itt	eq
 80a1cc6:	2100      	moveq	r1, #0
 80a1cc8:	4770      	bxeq	lr
 80a1cca:	b530      	push	{r4, r5, lr}
 80a1ccc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1cd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1cd4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1cd8:	bf48      	it	mi
 80a1cda:	4240      	negmi	r0, r0
 80a1cdc:	f04f 0100 	mov.w	r1, #0
 80a1ce0:	e73e      	b.n	80a1b60 <__adddf3+0x138>
 80a1ce2:	bf00      	nop

080a1ce4 <__aeabi_f2d>:
 80a1ce4:	0042      	lsls	r2, r0, #1
 80a1ce6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1cea:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1cee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1cf2:	bf1f      	itttt	ne
 80a1cf4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1cf8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1cfc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1d00:	4770      	bxne	lr
 80a1d02:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a1d06:	bf08      	it	eq
 80a1d08:	4770      	bxeq	lr
 80a1d0a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a1d0e:	bf04      	itt	eq
 80a1d10:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a1d14:	4770      	bxeq	lr
 80a1d16:	b530      	push	{r4, r5, lr}
 80a1d18:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1d1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1d20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1d24:	e71c      	b.n	80a1b60 <__adddf3+0x138>
 80a1d26:	bf00      	nop

080a1d28 <__aeabi_ul2d>:
 80a1d28:	ea50 0201 	orrs.w	r2, r0, r1
 80a1d2c:	bf08      	it	eq
 80a1d2e:	4770      	bxeq	lr
 80a1d30:	b530      	push	{r4, r5, lr}
 80a1d32:	f04f 0500 	mov.w	r5, #0
 80a1d36:	e00a      	b.n	80a1d4e <__aeabi_l2d+0x16>

080a1d38 <__aeabi_l2d>:
 80a1d38:	ea50 0201 	orrs.w	r2, r0, r1
 80a1d3c:	bf08      	it	eq
 80a1d3e:	4770      	bxeq	lr
 80a1d40:	b530      	push	{r4, r5, lr}
 80a1d42:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1d46:	d502      	bpl.n	80a1d4e <__aeabi_l2d+0x16>
 80a1d48:	4240      	negs	r0, r0
 80a1d4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1d4e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1d52:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1d56:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1d5a:	f43f aed8 	beq.w	80a1b0e <__adddf3+0xe6>
 80a1d5e:	f04f 0203 	mov.w	r2, #3
 80a1d62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1d66:	bf18      	it	ne
 80a1d68:	3203      	addne	r2, #3
 80a1d6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1d6e:	bf18      	it	ne
 80a1d70:	3203      	addne	r2, #3
 80a1d72:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1d76:	f1c2 0320 	rsb	r3, r2, #32
 80a1d7a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1d7e:	fa20 f002 	lsr.w	r0, r0, r2
 80a1d82:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1d86:	ea40 000e 	orr.w	r0, r0, lr
 80a1d8a:	fa21 f102 	lsr.w	r1, r1, r2
 80a1d8e:	4414      	add	r4, r2
 80a1d90:	e6bd      	b.n	80a1b0e <__adddf3+0xe6>
 80a1d92:	bf00      	nop

080a1d94 <__aeabi_dmul>:
 80a1d94:	b570      	push	{r4, r5, r6, lr}
 80a1d96:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1d9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1d9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1da2:	bf1d      	ittte	ne
 80a1da4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1da8:	ea94 0f0c 	teqne	r4, ip
 80a1dac:	ea95 0f0c 	teqne	r5, ip
 80a1db0:	f000 f8de 	bleq	80a1f70 <__aeabi_dmul+0x1dc>
 80a1db4:	442c      	add	r4, r5
 80a1db6:	ea81 0603 	eor.w	r6, r1, r3
 80a1dba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1dbe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1dc2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1dc6:	bf18      	it	ne
 80a1dc8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1dcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1dd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1dd4:	d038      	beq.n	80a1e48 <__aeabi_dmul+0xb4>
 80a1dd6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1dda:	f04f 0500 	mov.w	r5, #0
 80a1dde:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a1de2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1de6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1dea:	f04f 0600 	mov.w	r6, #0
 80a1dee:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a1df2:	f09c 0f00 	teq	ip, #0
 80a1df6:	bf18      	it	ne
 80a1df8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1dfc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1e00:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1e04:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1e08:	d204      	bcs.n	80a1e14 <__aeabi_dmul+0x80>
 80a1e0a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1e0e:	416d      	adcs	r5, r5
 80a1e10:	eb46 0606 	adc.w	r6, r6, r6
 80a1e14:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1e18:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1e1c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1e20:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1e24:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1e28:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1e2c:	bf88      	it	hi
 80a1e2e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1e32:	d81e      	bhi.n	80a1e72 <__aeabi_dmul+0xde>
 80a1e34:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1e38:	bf08      	it	eq
 80a1e3a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1e3e:	f150 0000 	adcs.w	r0, r0, #0
 80a1e42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1e46:	bd70      	pop	{r4, r5, r6, pc}
 80a1e48:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1e4c:	ea46 0101 	orr.w	r1, r6, r1
 80a1e50:	ea40 0002 	orr.w	r0, r0, r2
 80a1e54:	ea81 0103 	eor.w	r1, r1, r3
 80a1e58:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1e5c:	bfc2      	ittt	gt
 80a1e5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1e62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1e66:	bd70      	popgt	{r4, r5, r6, pc}
 80a1e68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1e6c:	f04f 0e00 	mov.w	lr, #0
 80a1e70:	3c01      	subs	r4, #1
 80a1e72:	f300 80ab 	bgt.w	80a1fcc <__aeabi_dmul+0x238>
 80a1e76:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1e7a:	bfde      	ittt	le
 80a1e7c:	2000      	movle	r0, #0
 80a1e7e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1e82:	bd70      	pople	{r4, r5, r6, pc}
 80a1e84:	f1c4 0400 	rsb	r4, r4, #0
 80a1e88:	3c20      	subs	r4, #32
 80a1e8a:	da35      	bge.n	80a1ef8 <__aeabi_dmul+0x164>
 80a1e8c:	340c      	adds	r4, #12
 80a1e8e:	dc1b      	bgt.n	80a1ec8 <__aeabi_dmul+0x134>
 80a1e90:	f104 0414 	add.w	r4, r4, #20
 80a1e94:	f1c4 0520 	rsb	r5, r4, #32
 80a1e98:	fa00 f305 	lsl.w	r3, r0, r5
 80a1e9c:	fa20 f004 	lsr.w	r0, r0, r4
 80a1ea0:	fa01 f205 	lsl.w	r2, r1, r5
 80a1ea4:	ea40 0002 	orr.w	r0, r0, r2
 80a1ea8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1eac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1eb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1eb4:	fa21 f604 	lsr.w	r6, r1, r4
 80a1eb8:	eb42 0106 	adc.w	r1, r2, r6
 80a1ebc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1ec0:	bf08      	it	eq
 80a1ec2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1ec6:	bd70      	pop	{r4, r5, r6, pc}
 80a1ec8:	f1c4 040c 	rsb	r4, r4, #12
 80a1ecc:	f1c4 0520 	rsb	r5, r4, #32
 80a1ed0:	fa00 f304 	lsl.w	r3, r0, r4
 80a1ed4:	fa20 f005 	lsr.w	r0, r0, r5
 80a1ed8:	fa01 f204 	lsl.w	r2, r1, r4
 80a1edc:	ea40 0002 	orr.w	r0, r0, r2
 80a1ee0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1ee4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1ee8:	f141 0100 	adc.w	r1, r1, #0
 80a1eec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1ef0:	bf08      	it	eq
 80a1ef2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1ef6:	bd70      	pop	{r4, r5, r6, pc}
 80a1ef8:	f1c4 0520 	rsb	r5, r4, #32
 80a1efc:	fa00 f205 	lsl.w	r2, r0, r5
 80a1f00:	ea4e 0e02 	orr.w	lr, lr, r2
 80a1f04:	fa20 f304 	lsr.w	r3, r0, r4
 80a1f08:	fa01 f205 	lsl.w	r2, r1, r5
 80a1f0c:	ea43 0302 	orr.w	r3, r3, r2
 80a1f10:	fa21 f004 	lsr.w	r0, r1, r4
 80a1f14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1f18:	fa21 f204 	lsr.w	r2, r1, r4
 80a1f1c:	ea20 0002 	bic.w	r0, r0, r2
 80a1f20:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1f24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1f28:	bf08      	it	eq
 80a1f2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1f2e:	bd70      	pop	{r4, r5, r6, pc}
 80a1f30:	f094 0f00 	teq	r4, #0
 80a1f34:	d10f      	bne.n	80a1f56 <__aeabi_dmul+0x1c2>
 80a1f36:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a1f3a:	0040      	lsls	r0, r0, #1
 80a1f3c:	eb41 0101 	adc.w	r1, r1, r1
 80a1f40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1f44:	bf08      	it	eq
 80a1f46:	3c01      	subeq	r4, #1
 80a1f48:	d0f7      	beq.n	80a1f3a <__aeabi_dmul+0x1a6>
 80a1f4a:	ea41 0106 	orr.w	r1, r1, r6
 80a1f4e:	f095 0f00 	teq	r5, #0
 80a1f52:	bf18      	it	ne
 80a1f54:	4770      	bxne	lr
 80a1f56:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a1f5a:	0052      	lsls	r2, r2, #1
 80a1f5c:	eb43 0303 	adc.w	r3, r3, r3
 80a1f60:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a1f64:	bf08      	it	eq
 80a1f66:	3d01      	subeq	r5, #1
 80a1f68:	d0f7      	beq.n	80a1f5a <__aeabi_dmul+0x1c6>
 80a1f6a:	ea43 0306 	orr.w	r3, r3, r6
 80a1f6e:	4770      	bx	lr
 80a1f70:	ea94 0f0c 	teq	r4, ip
 80a1f74:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1f78:	bf18      	it	ne
 80a1f7a:	ea95 0f0c 	teqne	r5, ip
 80a1f7e:	d00c      	beq.n	80a1f9a <__aeabi_dmul+0x206>
 80a1f80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1f84:	bf18      	it	ne
 80a1f86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1f8a:	d1d1      	bne.n	80a1f30 <__aeabi_dmul+0x19c>
 80a1f8c:	ea81 0103 	eor.w	r1, r1, r3
 80a1f90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1f94:	f04f 0000 	mov.w	r0, #0
 80a1f98:	bd70      	pop	{r4, r5, r6, pc}
 80a1f9a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1f9e:	bf06      	itte	eq
 80a1fa0:	4610      	moveq	r0, r2
 80a1fa2:	4619      	moveq	r1, r3
 80a1fa4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1fa8:	d019      	beq.n	80a1fde <__aeabi_dmul+0x24a>
 80a1faa:	ea94 0f0c 	teq	r4, ip
 80a1fae:	d102      	bne.n	80a1fb6 <__aeabi_dmul+0x222>
 80a1fb0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a1fb4:	d113      	bne.n	80a1fde <__aeabi_dmul+0x24a>
 80a1fb6:	ea95 0f0c 	teq	r5, ip
 80a1fba:	d105      	bne.n	80a1fc8 <__aeabi_dmul+0x234>
 80a1fbc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a1fc0:	bf1c      	itt	ne
 80a1fc2:	4610      	movne	r0, r2
 80a1fc4:	4619      	movne	r1, r3
 80a1fc6:	d10a      	bne.n	80a1fde <__aeabi_dmul+0x24a>
 80a1fc8:	ea81 0103 	eor.w	r1, r1, r3
 80a1fcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1fd0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1fd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1fd8:	f04f 0000 	mov.w	r0, #0
 80a1fdc:	bd70      	pop	{r4, r5, r6, pc}
 80a1fde:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1fe2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a1fe6:	bd70      	pop	{r4, r5, r6, pc}

080a1fe8 <__aeabi_ddiv>:
 80a1fe8:	b570      	push	{r4, r5, r6, lr}
 80a1fea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1fee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1ff2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1ff6:	bf1d      	ittte	ne
 80a1ff8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1ffc:	ea94 0f0c 	teqne	r4, ip
 80a2000:	ea95 0f0c 	teqne	r5, ip
 80a2004:	f000 f8a7 	bleq	80a2156 <__aeabi_ddiv+0x16e>
 80a2008:	eba4 0405 	sub.w	r4, r4, r5
 80a200c:	ea81 0e03 	eor.w	lr, r1, r3
 80a2010:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2014:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2018:	f000 8088 	beq.w	80a212c <__aeabi_ddiv+0x144>
 80a201c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2020:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2024:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2028:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a202c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2030:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2034:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2038:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a203c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2040:	429d      	cmp	r5, r3
 80a2042:	bf08      	it	eq
 80a2044:	4296      	cmpeq	r6, r2
 80a2046:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a204a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a204e:	d202      	bcs.n	80a2056 <__aeabi_ddiv+0x6e>
 80a2050:	085b      	lsrs	r3, r3, #1
 80a2052:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2056:	1ab6      	subs	r6, r6, r2
 80a2058:	eb65 0503 	sbc.w	r5, r5, r3
 80a205c:	085b      	lsrs	r3, r3, #1
 80a205e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2062:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2066:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a206a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a206e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2072:	bf22      	ittt	cs
 80a2074:	1ab6      	subcs	r6, r6, r2
 80a2076:	4675      	movcs	r5, lr
 80a2078:	ea40 000c 	orrcs.w	r0, r0, ip
 80a207c:	085b      	lsrs	r3, r3, #1
 80a207e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2082:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2086:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a208a:	bf22      	ittt	cs
 80a208c:	1ab6      	subcs	r6, r6, r2
 80a208e:	4675      	movcs	r5, lr
 80a2090:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2094:	085b      	lsrs	r3, r3, #1
 80a2096:	ea4f 0232 	mov.w	r2, r2, rrx
 80a209a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a209e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a20a2:	bf22      	ittt	cs
 80a20a4:	1ab6      	subcs	r6, r6, r2
 80a20a6:	4675      	movcs	r5, lr
 80a20a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a20ac:	085b      	lsrs	r3, r3, #1
 80a20ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80a20b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a20b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a20ba:	bf22      	ittt	cs
 80a20bc:	1ab6      	subcs	r6, r6, r2
 80a20be:	4675      	movcs	r5, lr
 80a20c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a20c4:	ea55 0e06 	orrs.w	lr, r5, r6
 80a20c8:	d018      	beq.n	80a20fc <__aeabi_ddiv+0x114>
 80a20ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a20ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a20d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a20d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a20da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a20de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a20e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a20e6:	d1c0      	bne.n	80a206a <__aeabi_ddiv+0x82>
 80a20e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a20ec:	d10b      	bne.n	80a2106 <__aeabi_ddiv+0x11e>
 80a20ee:	ea41 0100 	orr.w	r1, r1, r0
 80a20f2:	f04f 0000 	mov.w	r0, #0
 80a20f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a20fa:	e7b6      	b.n	80a206a <__aeabi_ddiv+0x82>
 80a20fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2100:	bf04      	itt	eq
 80a2102:	4301      	orreq	r1, r0
 80a2104:	2000      	moveq	r0, #0
 80a2106:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a210a:	bf88      	it	hi
 80a210c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2110:	f63f aeaf 	bhi.w	80a1e72 <__aeabi_dmul+0xde>
 80a2114:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2118:	bf04      	itt	eq
 80a211a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a211e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2122:	f150 0000 	adcs.w	r0, r0, #0
 80a2126:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a212a:	bd70      	pop	{r4, r5, r6, pc}
 80a212c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2130:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2134:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2138:	bfc2      	ittt	gt
 80a213a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a213e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2142:	bd70      	popgt	{r4, r5, r6, pc}
 80a2144:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2148:	f04f 0e00 	mov.w	lr, #0
 80a214c:	3c01      	subs	r4, #1
 80a214e:	e690      	b.n	80a1e72 <__aeabi_dmul+0xde>
 80a2150:	ea45 0e06 	orr.w	lr, r5, r6
 80a2154:	e68d      	b.n	80a1e72 <__aeabi_dmul+0xde>
 80a2156:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a215a:	ea94 0f0c 	teq	r4, ip
 80a215e:	bf08      	it	eq
 80a2160:	ea95 0f0c 	teqeq	r5, ip
 80a2164:	f43f af3b 	beq.w	80a1fde <__aeabi_dmul+0x24a>
 80a2168:	ea94 0f0c 	teq	r4, ip
 80a216c:	d10a      	bne.n	80a2184 <__aeabi_ddiv+0x19c>
 80a216e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2172:	f47f af34 	bne.w	80a1fde <__aeabi_dmul+0x24a>
 80a2176:	ea95 0f0c 	teq	r5, ip
 80a217a:	f47f af25 	bne.w	80a1fc8 <__aeabi_dmul+0x234>
 80a217e:	4610      	mov	r0, r2
 80a2180:	4619      	mov	r1, r3
 80a2182:	e72c      	b.n	80a1fde <__aeabi_dmul+0x24a>
 80a2184:	ea95 0f0c 	teq	r5, ip
 80a2188:	d106      	bne.n	80a2198 <__aeabi_ddiv+0x1b0>
 80a218a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a218e:	f43f aefd 	beq.w	80a1f8c <__aeabi_dmul+0x1f8>
 80a2192:	4610      	mov	r0, r2
 80a2194:	4619      	mov	r1, r3
 80a2196:	e722      	b.n	80a1fde <__aeabi_dmul+0x24a>
 80a2198:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a219c:	bf18      	it	ne
 80a219e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a21a2:	f47f aec5 	bne.w	80a1f30 <__aeabi_dmul+0x19c>
 80a21a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a21aa:	f47f af0d 	bne.w	80a1fc8 <__aeabi_dmul+0x234>
 80a21ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a21b2:	f47f aeeb 	bne.w	80a1f8c <__aeabi_dmul+0x1f8>
 80a21b6:	e712      	b.n	80a1fde <__aeabi_dmul+0x24a>

080a21b8 <__gedf2>:
 80a21b8:	f04f 3cff 	mov.w	ip, #4294967295
 80a21bc:	e006      	b.n	80a21cc <__cmpdf2+0x4>
 80a21be:	bf00      	nop

080a21c0 <__ledf2>:
 80a21c0:	f04f 0c01 	mov.w	ip, #1
 80a21c4:	e002      	b.n	80a21cc <__cmpdf2+0x4>
 80a21c6:	bf00      	nop

080a21c8 <__cmpdf2>:
 80a21c8:	f04f 0c01 	mov.w	ip, #1
 80a21cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a21d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a21d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a21d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a21dc:	bf18      	it	ne
 80a21de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a21e2:	d01b      	beq.n	80a221c <__cmpdf2+0x54>
 80a21e4:	b001      	add	sp, #4
 80a21e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a21ea:	bf0c      	ite	eq
 80a21ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a21f0:	ea91 0f03 	teqne	r1, r3
 80a21f4:	bf02      	ittt	eq
 80a21f6:	ea90 0f02 	teqeq	r0, r2
 80a21fa:	2000      	moveq	r0, #0
 80a21fc:	4770      	bxeq	lr
 80a21fe:	f110 0f00 	cmn.w	r0, #0
 80a2202:	ea91 0f03 	teq	r1, r3
 80a2206:	bf58      	it	pl
 80a2208:	4299      	cmppl	r1, r3
 80a220a:	bf08      	it	eq
 80a220c:	4290      	cmpeq	r0, r2
 80a220e:	bf2c      	ite	cs
 80a2210:	17d8      	asrcs	r0, r3, #31
 80a2212:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2216:	f040 0001 	orr.w	r0, r0, #1
 80a221a:	4770      	bx	lr
 80a221c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2220:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2224:	d102      	bne.n	80a222c <__cmpdf2+0x64>
 80a2226:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a222a:	d107      	bne.n	80a223c <__cmpdf2+0x74>
 80a222c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2230:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2234:	d1d6      	bne.n	80a21e4 <__cmpdf2+0x1c>
 80a2236:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a223a:	d0d3      	beq.n	80a21e4 <__cmpdf2+0x1c>
 80a223c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2240:	4770      	bx	lr
 80a2242:	bf00      	nop

080a2244 <__aeabi_cdrcmple>:
 80a2244:	4684      	mov	ip, r0
 80a2246:	4610      	mov	r0, r2
 80a2248:	4662      	mov	r2, ip
 80a224a:	468c      	mov	ip, r1
 80a224c:	4619      	mov	r1, r3
 80a224e:	4663      	mov	r3, ip
 80a2250:	e000      	b.n	80a2254 <__aeabi_cdcmpeq>
 80a2252:	bf00      	nop

080a2254 <__aeabi_cdcmpeq>:
 80a2254:	b501      	push	{r0, lr}
 80a2256:	f7ff ffb7 	bl	80a21c8 <__cmpdf2>
 80a225a:	2800      	cmp	r0, #0
 80a225c:	bf48      	it	mi
 80a225e:	f110 0f00 	cmnmi.w	r0, #0
 80a2262:	bd01      	pop	{r0, pc}

080a2264 <__aeabi_dcmpeq>:
 80a2264:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2268:	f7ff fff4 	bl	80a2254 <__aeabi_cdcmpeq>
 80a226c:	bf0c      	ite	eq
 80a226e:	2001      	moveq	r0, #1
 80a2270:	2000      	movne	r0, #0
 80a2272:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2276:	bf00      	nop

080a2278 <__aeabi_dcmplt>:
 80a2278:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a227c:	f7ff ffea 	bl	80a2254 <__aeabi_cdcmpeq>
 80a2280:	bf34      	ite	cc
 80a2282:	2001      	movcc	r0, #1
 80a2284:	2000      	movcs	r0, #0
 80a2286:	f85d fb08 	ldr.w	pc, [sp], #8
 80a228a:	bf00      	nop

080a228c <__aeabi_dcmple>:
 80a228c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2290:	f7ff ffe0 	bl	80a2254 <__aeabi_cdcmpeq>
 80a2294:	bf94      	ite	ls
 80a2296:	2001      	movls	r0, #1
 80a2298:	2000      	movhi	r0, #0
 80a229a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a229e:	bf00      	nop

080a22a0 <__aeabi_dcmpge>:
 80a22a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a22a4:	f7ff ffce 	bl	80a2244 <__aeabi_cdrcmple>
 80a22a8:	bf94      	ite	ls
 80a22aa:	2001      	movls	r0, #1
 80a22ac:	2000      	movhi	r0, #0
 80a22ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80a22b2:	bf00      	nop

080a22b4 <__aeabi_dcmpgt>:
 80a22b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a22b8:	f7ff ffc4 	bl	80a2244 <__aeabi_cdrcmple>
 80a22bc:	bf34      	ite	cc
 80a22be:	2001      	movcc	r0, #1
 80a22c0:	2000      	movcs	r0, #0
 80a22c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a22c6:	bf00      	nop

080a22c8 <__aeabi_d2uiz>:
 80a22c8:	004a      	lsls	r2, r1, #1
 80a22ca:	d211      	bcs.n	80a22f0 <__aeabi_d2uiz+0x28>
 80a22cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a22d0:	d211      	bcs.n	80a22f6 <__aeabi_d2uiz+0x2e>
 80a22d2:	d50d      	bpl.n	80a22f0 <__aeabi_d2uiz+0x28>
 80a22d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a22d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a22dc:	d40e      	bmi.n	80a22fc <__aeabi_d2uiz+0x34>
 80a22de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a22e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a22e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a22ea:	fa23 f002 	lsr.w	r0, r3, r2
 80a22ee:	4770      	bx	lr
 80a22f0:	f04f 0000 	mov.w	r0, #0
 80a22f4:	4770      	bx	lr
 80a22f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a22fa:	d102      	bne.n	80a2302 <__aeabi_d2uiz+0x3a>
 80a22fc:	f04f 30ff 	mov.w	r0, #4294967295
 80a2300:	4770      	bx	lr
 80a2302:	f04f 0000 	mov.w	r0, #0
 80a2306:	4770      	bx	lr

080a2308 <__aeabi_d2f>:
 80a2308:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a230c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a2310:	bf24      	itt	cs
 80a2312:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a2316:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a231a:	d90d      	bls.n	80a2338 <__aeabi_d2f+0x30>
 80a231c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2320:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a2324:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a2328:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a232c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a2330:	bf08      	it	eq
 80a2332:	f020 0001 	biceq.w	r0, r0, #1
 80a2336:	4770      	bx	lr
 80a2338:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a233c:	d121      	bne.n	80a2382 <__aeabi_d2f+0x7a>
 80a233e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a2342:	bfbc      	itt	lt
 80a2344:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a2348:	4770      	bxlt	lr
 80a234a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a234e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a2352:	f1c2 0218 	rsb	r2, r2, #24
 80a2356:	f1c2 0c20 	rsb	ip, r2, #32
 80a235a:	fa10 f30c 	lsls.w	r3, r0, ip
 80a235e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2362:	bf18      	it	ne
 80a2364:	f040 0001 	orrne.w	r0, r0, #1
 80a2368:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a236c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a2370:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a2374:	ea40 000c 	orr.w	r0, r0, ip
 80a2378:	fa23 f302 	lsr.w	r3, r3, r2
 80a237c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a2380:	e7cc      	b.n	80a231c <__aeabi_d2f+0x14>
 80a2382:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a2386:	d107      	bne.n	80a2398 <__aeabi_d2f+0x90>
 80a2388:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a238c:	bf1e      	ittt	ne
 80a238e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a2392:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a2396:	4770      	bxne	lr
 80a2398:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a239c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a23a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a23a4:	4770      	bx	lr
 80a23a6:	bf00      	nop

080a23a8 <__aeabi_frsub>:
 80a23a8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a23ac:	e002      	b.n	80a23b4 <__addsf3>
 80a23ae:	bf00      	nop

080a23b0 <__aeabi_fsub>:
 80a23b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a23b4 <__addsf3>:
 80a23b4:	0042      	lsls	r2, r0, #1
 80a23b6:	bf1f      	itttt	ne
 80a23b8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a23bc:	ea92 0f03 	teqne	r2, r3
 80a23c0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a23c4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a23c8:	d06a      	beq.n	80a24a0 <__addsf3+0xec>
 80a23ca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a23ce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a23d2:	bfc1      	itttt	gt
 80a23d4:	18d2      	addgt	r2, r2, r3
 80a23d6:	4041      	eorgt	r1, r0
 80a23d8:	4048      	eorgt	r0, r1
 80a23da:	4041      	eorgt	r1, r0
 80a23dc:	bfb8      	it	lt
 80a23de:	425b      	neglt	r3, r3
 80a23e0:	2b19      	cmp	r3, #25
 80a23e2:	bf88      	it	hi
 80a23e4:	4770      	bxhi	lr
 80a23e6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a23ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a23ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a23f2:	bf18      	it	ne
 80a23f4:	4240      	negne	r0, r0
 80a23f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a23fa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a23fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a2402:	bf18      	it	ne
 80a2404:	4249      	negne	r1, r1
 80a2406:	ea92 0f03 	teq	r2, r3
 80a240a:	d03f      	beq.n	80a248c <__addsf3+0xd8>
 80a240c:	f1a2 0201 	sub.w	r2, r2, #1
 80a2410:	fa41 fc03 	asr.w	ip, r1, r3
 80a2414:	eb10 000c 	adds.w	r0, r0, ip
 80a2418:	f1c3 0320 	rsb	r3, r3, #32
 80a241c:	fa01 f103 	lsl.w	r1, r1, r3
 80a2420:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2424:	d502      	bpl.n	80a242c <__addsf3+0x78>
 80a2426:	4249      	negs	r1, r1
 80a2428:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a242c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2430:	d313      	bcc.n	80a245a <__addsf3+0xa6>
 80a2432:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a2436:	d306      	bcc.n	80a2446 <__addsf3+0x92>
 80a2438:	0840      	lsrs	r0, r0, #1
 80a243a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a243e:	f102 0201 	add.w	r2, r2, #1
 80a2442:	2afe      	cmp	r2, #254	; 0xfe
 80a2444:	d251      	bcs.n	80a24ea <__addsf3+0x136>
 80a2446:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a244a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a244e:	bf08      	it	eq
 80a2450:	f020 0001 	biceq.w	r0, r0, #1
 80a2454:	ea40 0003 	orr.w	r0, r0, r3
 80a2458:	4770      	bx	lr
 80a245a:	0049      	lsls	r1, r1, #1
 80a245c:	eb40 0000 	adc.w	r0, r0, r0
 80a2460:	3a01      	subs	r2, #1
 80a2462:	bf28      	it	cs
 80a2464:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a2468:	d2ed      	bcs.n	80a2446 <__addsf3+0x92>
 80a246a:	fab0 fc80 	clz	ip, r0
 80a246e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2472:	ebb2 020c 	subs.w	r2, r2, ip
 80a2476:	fa00 f00c 	lsl.w	r0, r0, ip
 80a247a:	bfaa      	itet	ge
 80a247c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2480:	4252      	neglt	r2, r2
 80a2482:	4318      	orrge	r0, r3
 80a2484:	bfbc      	itt	lt
 80a2486:	40d0      	lsrlt	r0, r2
 80a2488:	4318      	orrlt	r0, r3
 80a248a:	4770      	bx	lr
 80a248c:	f092 0f00 	teq	r2, #0
 80a2490:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2494:	bf06      	itte	eq
 80a2496:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a249a:	3201      	addeq	r2, #1
 80a249c:	3b01      	subne	r3, #1
 80a249e:	e7b5      	b.n	80a240c <__addsf3+0x58>
 80a24a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a24a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a24a8:	bf18      	it	ne
 80a24aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a24ae:	d021      	beq.n	80a24f4 <__addsf3+0x140>
 80a24b0:	ea92 0f03 	teq	r2, r3
 80a24b4:	d004      	beq.n	80a24c0 <__addsf3+0x10c>
 80a24b6:	f092 0f00 	teq	r2, #0
 80a24ba:	bf08      	it	eq
 80a24bc:	4608      	moveq	r0, r1
 80a24be:	4770      	bx	lr
 80a24c0:	ea90 0f01 	teq	r0, r1
 80a24c4:	bf1c      	itt	ne
 80a24c6:	2000      	movne	r0, #0
 80a24c8:	4770      	bxne	lr
 80a24ca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a24ce:	d104      	bne.n	80a24da <__addsf3+0x126>
 80a24d0:	0040      	lsls	r0, r0, #1
 80a24d2:	bf28      	it	cs
 80a24d4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a24d8:	4770      	bx	lr
 80a24da:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a24de:	bf3c      	itt	cc
 80a24e0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a24e4:	4770      	bxcc	lr
 80a24e6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a24ea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a24ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a24f2:	4770      	bx	lr
 80a24f4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a24f8:	bf16      	itet	ne
 80a24fa:	4608      	movne	r0, r1
 80a24fc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2500:	4601      	movne	r1, r0
 80a2502:	0242      	lsls	r2, r0, #9
 80a2504:	bf06      	itte	eq
 80a2506:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a250a:	ea90 0f01 	teqeq	r0, r1
 80a250e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2512:	4770      	bx	lr

080a2514 <__aeabi_ui2f>:
 80a2514:	f04f 0300 	mov.w	r3, #0
 80a2518:	e004      	b.n	80a2524 <__aeabi_i2f+0x8>
 80a251a:	bf00      	nop

080a251c <__aeabi_i2f>:
 80a251c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2520:	bf48      	it	mi
 80a2522:	4240      	negmi	r0, r0
 80a2524:	ea5f 0c00 	movs.w	ip, r0
 80a2528:	bf08      	it	eq
 80a252a:	4770      	bxeq	lr
 80a252c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2530:	4601      	mov	r1, r0
 80a2532:	f04f 0000 	mov.w	r0, #0
 80a2536:	e01c      	b.n	80a2572 <__aeabi_l2f+0x2a>

080a2538 <__aeabi_ul2f>:
 80a2538:	ea50 0201 	orrs.w	r2, r0, r1
 80a253c:	bf08      	it	eq
 80a253e:	4770      	bxeq	lr
 80a2540:	f04f 0300 	mov.w	r3, #0
 80a2544:	e00a      	b.n	80a255c <__aeabi_l2f+0x14>
 80a2546:	bf00      	nop

080a2548 <__aeabi_l2f>:
 80a2548:	ea50 0201 	orrs.w	r2, r0, r1
 80a254c:	bf08      	it	eq
 80a254e:	4770      	bxeq	lr
 80a2550:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2554:	d502      	bpl.n	80a255c <__aeabi_l2f+0x14>
 80a2556:	4240      	negs	r0, r0
 80a2558:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a255c:	ea5f 0c01 	movs.w	ip, r1
 80a2560:	bf02      	ittt	eq
 80a2562:	4684      	moveq	ip, r0
 80a2564:	4601      	moveq	r1, r0
 80a2566:	2000      	moveq	r0, #0
 80a2568:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a256c:	bf08      	it	eq
 80a256e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2572:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a2576:	fabc f28c 	clz	r2, ip
 80a257a:	3a08      	subs	r2, #8
 80a257c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2580:	db10      	blt.n	80a25a4 <__aeabi_l2f+0x5c>
 80a2582:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2586:	4463      	add	r3, ip
 80a2588:	fa00 fc02 	lsl.w	ip, r0, r2
 80a258c:	f1c2 0220 	rsb	r2, r2, #32
 80a2590:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2594:	fa20 f202 	lsr.w	r2, r0, r2
 80a2598:	eb43 0002 	adc.w	r0, r3, r2
 80a259c:	bf08      	it	eq
 80a259e:	f020 0001 	biceq.w	r0, r0, #1
 80a25a2:	4770      	bx	lr
 80a25a4:	f102 0220 	add.w	r2, r2, #32
 80a25a8:	fa01 fc02 	lsl.w	ip, r1, r2
 80a25ac:	f1c2 0220 	rsb	r2, r2, #32
 80a25b0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a25b4:	fa21 f202 	lsr.w	r2, r1, r2
 80a25b8:	eb43 0002 	adc.w	r0, r3, r2
 80a25bc:	bf08      	it	eq
 80a25be:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a25c2:	4770      	bx	lr

080a25c4 <__aeabi_f2iz>:
 80a25c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a25c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a25cc:	d30f      	bcc.n	80a25ee <__aeabi_f2iz+0x2a>
 80a25ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a25d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a25d6:	d90d      	bls.n	80a25f4 <__aeabi_f2iz+0x30>
 80a25d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a25dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a25e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a25e4:	fa23 f002 	lsr.w	r0, r3, r2
 80a25e8:	bf18      	it	ne
 80a25ea:	4240      	negne	r0, r0
 80a25ec:	4770      	bx	lr
 80a25ee:	f04f 0000 	mov.w	r0, #0
 80a25f2:	4770      	bx	lr
 80a25f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a25f8:	d101      	bne.n	80a25fe <__aeabi_f2iz+0x3a>
 80a25fa:	0242      	lsls	r2, r0, #9
 80a25fc:	d105      	bne.n	80a260a <__aeabi_f2iz+0x46>
 80a25fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a2602:	bf08      	it	eq
 80a2604:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a2608:	4770      	bx	lr
 80a260a:	f04f 0000 	mov.w	r0, #0
 80a260e:	4770      	bx	lr

080a2610 <__aeabi_d2ulz>:
 80a2610:	b5d0      	push	{r4, r6, r7, lr}
 80a2612:	2200      	movs	r2, #0
 80a2614:	4b0b      	ldr	r3, [pc, #44]	; (80a2644 <__aeabi_d2ulz+0x34>)
 80a2616:	4606      	mov	r6, r0
 80a2618:	460f      	mov	r7, r1
 80a261a:	f7ff fbbb 	bl	80a1d94 <__aeabi_dmul>
 80a261e:	f7ff fe53 	bl	80a22c8 <__aeabi_d2uiz>
 80a2622:	4604      	mov	r4, r0
 80a2624:	f7ff fb3c 	bl	80a1ca0 <__aeabi_ui2d>
 80a2628:	2200      	movs	r2, #0
 80a262a:	4b07      	ldr	r3, [pc, #28]	; (80a2648 <__aeabi_d2ulz+0x38>)
 80a262c:	f7ff fbb2 	bl	80a1d94 <__aeabi_dmul>
 80a2630:	4602      	mov	r2, r0
 80a2632:	460b      	mov	r3, r1
 80a2634:	4630      	mov	r0, r6
 80a2636:	4639      	mov	r1, r7
 80a2638:	f7ff f9f4 	bl	80a1a24 <__aeabi_dsub>
 80a263c:	f7ff fe44 	bl	80a22c8 <__aeabi_d2uiz>
 80a2640:	4621      	mov	r1, r4
 80a2642:	bdd0      	pop	{r4, r6, r7, pc}
 80a2644:	3df00000 	.word	0x3df00000
 80a2648:	41f00000 	.word	0x41f00000

080a264c <atof>:
 80a264c:	2100      	movs	r1, #0
 80a264e:	f000 be93 	b.w	80a3378 <strtod>
	...

080a2654 <__cxa_atexit>:
 80a2654:	b510      	push	{r4, lr}
 80a2656:	4604      	mov	r4, r0
 80a2658:	4804      	ldr	r0, [pc, #16]	; (80a266c <__cxa_atexit+0x18>)
 80a265a:	4613      	mov	r3, r2
 80a265c:	b120      	cbz	r0, 80a2668 <__cxa_atexit+0x14>
 80a265e:	460a      	mov	r2, r1
 80a2660:	2002      	movs	r0, #2
 80a2662:	4621      	mov	r1, r4
 80a2664:	f3af 8000 	nop.w
 80a2668:	bd10      	pop	{r4, pc}
 80a266a:	bf00      	nop
 80a266c:	00000000 	.word	0x00000000

080a2670 <memcpy>:
 80a2670:	440a      	add	r2, r1
 80a2672:	4291      	cmp	r1, r2
 80a2674:	f100 33ff 	add.w	r3, r0, #4294967295
 80a2678:	d100      	bne.n	80a267c <memcpy+0xc>
 80a267a:	4770      	bx	lr
 80a267c:	b510      	push	{r4, lr}
 80a267e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2682:	4291      	cmp	r1, r2
 80a2684:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2688:	d1f9      	bne.n	80a267e <memcpy+0xe>
 80a268a:	bd10      	pop	{r4, pc}

080a268c <memset>:
 80a268c:	4603      	mov	r3, r0
 80a268e:	4402      	add	r2, r0
 80a2690:	4293      	cmp	r3, r2
 80a2692:	d100      	bne.n	80a2696 <memset+0xa>
 80a2694:	4770      	bx	lr
 80a2696:	f803 1b01 	strb.w	r1, [r3], #1
 80a269a:	e7f9      	b.n	80a2690 <memset+0x4>

080a269c <srand>:
 80a269c:	b538      	push	{r3, r4, r5, lr}
 80a269e:	4b0d      	ldr	r3, [pc, #52]	; (80a26d4 <srand+0x38>)
 80a26a0:	4604      	mov	r4, r0
 80a26a2:	681d      	ldr	r5, [r3, #0]
 80a26a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a26a6:	b97b      	cbnz	r3, 80a26c8 <srand+0x2c>
 80a26a8:	2018      	movs	r0, #24
 80a26aa:	f7fe f90d 	bl	80a08c8 <malloc>
 80a26ae:	4a0a      	ldr	r2, [pc, #40]	; (80a26d8 <srand+0x3c>)
 80a26b0:	4b0a      	ldr	r3, [pc, #40]	; (80a26dc <srand+0x40>)
 80a26b2:	63a8      	str	r0, [r5, #56]	; 0x38
 80a26b4:	e9c0 2300 	strd	r2, r3, [r0]
 80a26b8:	4b09      	ldr	r3, [pc, #36]	; (80a26e0 <srand+0x44>)
 80a26ba:	2201      	movs	r2, #1
 80a26bc:	6083      	str	r3, [r0, #8]
 80a26be:	230b      	movs	r3, #11
 80a26c0:	8183      	strh	r3, [r0, #12]
 80a26c2:	2300      	movs	r3, #0
 80a26c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a26c8:	2200      	movs	r2, #0
 80a26ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a26cc:	611c      	str	r4, [r3, #16]
 80a26ce:	615a      	str	r2, [r3, #20]
 80a26d0:	bd38      	pop	{r3, r4, r5, pc}
 80a26d2:	bf00      	nop
 80a26d4:	20000030 	.word	0x20000030
 80a26d8:	abcd330e 	.word	0xabcd330e
 80a26dc:	e66d1234 	.word	0xe66d1234
 80a26e0:	0005deec 	.word	0x0005deec

080a26e4 <strdup>:
 80a26e4:	4b02      	ldr	r3, [pc, #8]	; (80a26f0 <strdup+0xc>)
 80a26e6:	4601      	mov	r1, r0
 80a26e8:	6818      	ldr	r0, [r3, #0]
 80a26ea:	f000 b803 	b.w	80a26f4 <_strdup_r>
 80a26ee:	bf00      	nop
 80a26f0:	20000030 	.word	0x20000030

080a26f4 <_strdup_r>:
 80a26f4:	b570      	push	{r4, r5, r6, lr}
 80a26f6:	4604      	mov	r4, r0
 80a26f8:	4608      	mov	r0, r1
 80a26fa:	460d      	mov	r5, r1
 80a26fc:	f000 f80d 	bl	80a271a <strlen>
 80a2700:	1c46      	adds	r6, r0, #1
 80a2702:	4631      	mov	r1, r6
 80a2704:	4620      	mov	r0, r4
 80a2706:	f7fe f8ff 	bl	80a0908 <_malloc_r>
 80a270a:	4604      	mov	r4, r0
 80a270c:	b118      	cbz	r0, 80a2716 <_strdup_r+0x22>
 80a270e:	4632      	mov	r2, r6
 80a2710:	4629      	mov	r1, r5
 80a2712:	f7ff ffad 	bl	80a2670 <memcpy>
 80a2716:	4620      	mov	r0, r4
 80a2718:	bd70      	pop	{r4, r5, r6, pc}

080a271a <strlen>:
 80a271a:	4603      	mov	r3, r0
 80a271c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2720:	2a00      	cmp	r2, #0
 80a2722:	d1fb      	bne.n	80a271c <strlen+0x2>
 80a2724:	1a18      	subs	r0, r3, r0
 80a2726:	3801      	subs	r0, #1
 80a2728:	4770      	bx	lr

080a272a <strncmp>:
 80a272a:	b510      	push	{r4, lr}
 80a272c:	b16a      	cbz	r2, 80a274a <strncmp+0x20>
 80a272e:	3901      	subs	r1, #1
 80a2730:	1884      	adds	r4, r0, r2
 80a2732:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a2736:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a273a:	4293      	cmp	r3, r2
 80a273c:	d103      	bne.n	80a2746 <strncmp+0x1c>
 80a273e:	42a0      	cmp	r0, r4
 80a2740:	d001      	beq.n	80a2746 <strncmp+0x1c>
 80a2742:	2b00      	cmp	r3, #0
 80a2744:	d1f5      	bne.n	80a2732 <strncmp+0x8>
 80a2746:	1a98      	subs	r0, r3, r2
 80a2748:	bd10      	pop	{r4, pc}
 80a274a:	4610      	mov	r0, r2
 80a274c:	e7fc      	b.n	80a2748 <strncmp+0x1e>

080a274e <sulp>:
 80a274e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2752:	460f      	mov	r7, r1
 80a2754:	4690      	mov	r8, r2
 80a2756:	f001 fc7f 	bl	80a4058 <__ulp>
 80a275a:	4604      	mov	r4, r0
 80a275c:	460d      	mov	r5, r1
 80a275e:	f1b8 0f00 	cmp.w	r8, #0
 80a2762:	d011      	beq.n	80a2788 <sulp+0x3a>
 80a2764:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a2768:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a276c:	2b00      	cmp	r3, #0
 80a276e:	dd0b      	ble.n	80a2788 <sulp+0x3a>
 80a2770:	2400      	movs	r4, #0
 80a2772:	051b      	lsls	r3, r3, #20
 80a2774:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a2778:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a277c:	4622      	mov	r2, r4
 80a277e:	462b      	mov	r3, r5
 80a2780:	f7ff fb08 	bl	80a1d94 <__aeabi_dmul>
 80a2784:	4604      	mov	r4, r0
 80a2786:	460d      	mov	r5, r1
 80a2788:	4620      	mov	r0, r4
 80a278a:	4629      	mov	r1, r5
 80a278c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2790 <_strtod_l>:
 80a2790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2794:	469b      	mov	fp, r3
 80a2796:	2300      	movs	r3, #0
 80a2798:	b0a1      	sub	sp, #132	; 0x84
 80a279a:	931c      	str	r3, [sp, #112]	; 0x70
 80a279c:	4ba1      	ldr	r3, [pc, #644]	; (80a2a24 <_strtod_l+0x294>)
 80a279e:	4682      	mov	sl, r0
 80a27a0:	681f      	ldr	r7, [r3, #0]
 80a27a2:	460e      	mov	r6, r1
 80a27a4:	4638      	mov	r0, r7
 80a27a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80a27a8:	f7ff ffb7 	bl	80a271a <strlen>
 80a27ac:	f04f 0800 	mov.w	r8, #0
 80a27b0:	4604      	mov	r4, r0
 80a27b2:	f04f 0900 	mov.w	r9, #0
 80a27b6:	961b      	str	r6, [sp, #108]	; 0x6c
 80a27b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a27ba:	781a      	ldrb	r2, [r3, #0]
 80a27bc:	2a2b      	cmp	r2, #43	; 0x2b
 80a27be:	d04c      	beq.n	80a285a <_strtod_l+0xca>
 80a27c0:	d83a      	bhi.n	80a2838 <_strtod_l+0xa8>
 80a27c2:	2a0d      	cmp	r2, #13
 80a27c4:	d833      	bhi.n	80a282e <_strtod_l+0x9e>
 80a27c6:	2a08      	cmp	r2, #8
 80a27c8:	d833      	bhi.n	80a2832 <_strtod_l+0xa2>
 80a27ca:	2a00      	cmp	r2, #0
 80a27cc:	d03d      	beq.n	80a284a <_strtod_l+0xba>
 80a27ce:	2300      	movs	r3, #0
 80a27d0:	930c      	str	r3, [sp, #48]	; 0x30
 80a27d2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80a27d4:	782b      	ldrb	r3, [r5, #0]
 80a27d6:	2b30      	cmp	r3, #48	; 0x30
 80a27d8:	f040 80af 	bne.w	80a293a <_strtod_l+0x1aa>
 80a27dc:	786b      	ldrb	r3, [r5, #1]
 80a27de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80a27e2:	2b58      	cmp	r3, #88	; 0x58
 80a27e4:	d16c      	bne.n	80a28c0 <_strtod_l+0x130>
 80a27e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a27e8:	4650      	mov	r0, sl
 80a27ea:	9301      	str	r3, [sp, #4]
 80a27ec:	ab1c      	add	r3, sp, #112	; 0x70
 80a27ee:	9300      	str	r3, [sp, #0]
 80a27f0:	4a8d      	ldr	r2, [pc, #564]	; (80a2a28 <_strtod_l+0x298>)
 80a27f2:	f8cd b008 	str.w	fp, [sp, #8]
 80a27f6:	ab1d      	add	r3, sp, #116	; 0x74
 80a27f8:	a91b      	add	r1, sp, #108	; 0x6c
 80a27fa:	f000 fe31 	bl	80a3460 <__gethex>
 80a27fe:	f010 0607 	ands.w	r6, r0, #7
 80a2802:	4604      	mov	r4, r0
 80a2804:	d005      	beq.n	80a2812 <_strtod_l+0x82>
 80a2806:	2e06      	cmp	r6, #6
 80a2808:	d129      	bne.n	80a285e <_strtod_l+0xce>
 80a280a:	2300      	movs	r3, #0
 80a280c:	3501      	adds	r5, #1
 80a280e:	951b      	str	r5, [sp, #108]	; 0x6c
 80a2810:	930c      	str	r3, [sp, #48]	; 0x30
 80a2812:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a2814:	2b00      	cmp	r3, #0
 80a2816:	f040 8596 	bne.w	80a3346 <_strtod_l+0xbb6>
 80a281a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a281c:	b1d3      	cbz	r3, 80a2854 <_strtod_l+0xc4>
 80a281e:	4642      	mov	r2, r8
 80a2820:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a2824:	4610      	mov	r0, r2
 80a2826:	4619      	mov	r1, r3
 80a2828:	b021      	add	sp, #132	; 0x84
 80a282a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a282e:	2a20      	cmp	r2, #32
 80a2830:	d1cd      	bne.n	80a27ce <_strtod_l+0x3e>
 80a2832:	3301      	adds	r3, #1
 80a2834:	931b      	str	r3, [sp, #108]	; 0x6c
 80a2836:	e7bf      	b.n	80a27b8 <_strtod_l+0x28>
 80a2838:	2a2d      	cmp	r2, #45	; 0x2d
 80a283a:	d1c8      	bne.n	80a27ce <_strtod_l+0x3e>
 80a283c:	2201      	movs	r2, #1
 80a283e:	920c      	str	r2, [sp, #48]	; 0x30
 80a2840:	1c5a      	adds	r2, r3, #1
 80a2842:	921b      	str	r2, [sp, #108]	; 0x6c
 80a2844:	785b      	ldrb	r3, [r3, #1]
 80a2846:	2b00      	cmp	r3, #0
 80a2848:	d1c3      	bne.n	80a27d2 <_strtod_l+0x42>
 80a284a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a284c:	961b      	str	r6, [sp, #108]	; 0x6c
 80a284e:	2b00      	cmp	r3, #0
 80a2850:	f040 8577 	bne.w	80a3342 <_strtod_l+0xbb2>
 80a2854:	4642      	mov	r2, r8
 80a2856:	464b      	mov	r3, r9
 80a2858:	e7e4      	b.n	80a2824 <_strtod_l+0x94>
 80a285a:	2200      	movs	r2, #0
 80a285c:	e7ef      	b.n	80a283e <_strtod_l+0xae>
 80a285e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80a2860:	b13a      	cbz	r2, 80a2872 <_strtod_l+0xe2>
 80a2862:	2135      	movs	r1, #53	; 0x35
 80a2864:	a81e      	add	r0, sp, #120	; 0x78
 80a2866:	f001 fcee 	bl	80a4246 <__copybits>
 80a286a:	4650      	mov	r0, sl
 80a286c:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a286e:	f001 f929 	bl	80a3ac4 <_Bfree>
 80a2872:	3e01      	subs	r6, #1
 80a2874:	2e05      	cmp	r6, #5
 80a2876:	d807      	bhi.n	80a2888 <_strtod_l+0xf8>
 80a2878:	e8df f006 	tbb	[pc, r6]
 80a287c:	1d180b0e 	.word	0x1d180b0e
 80a2880:	030e      	.short	0x030e
 80a2882:	f04f 0900 	mov.w	r9, #0
 80a2886:	46c8      	mov	r8, r9
 80a2888:	0721      	lsls	r1, r4, #28
 80a288a:	d5c2      	bpl.n	80a2812 <_strtod_l+0x82>
 80a288c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a2890:	e7bf      	b.n	80a2812 <_strtod_l+0x82>
 80a2892:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80a2896:	e7f7      	b.n	80a2888 <_strtod_l+0xf8>
 80a2898:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80a289a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80a289e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a28a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a28a6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a28aa:	e7ed      	b.n	80a2888 <_strtod_l+0xf8>
 80a28ac:	f04f 0800 	mov.w	r8, #0
 80a28b0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80a2a2c <_strtod_l+0x29c>
 80a28b4:	e7e8      	b.n	80a2888 <_strtod_l+0xf8>
 80a28b6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a28ba:	f04f 38ff 	mov.w	r8, #4294967295
 80a28be:	e7e3      	b.n	80a2888 <_strtod_l+0xf8>
 80a28c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a28c2:	1c5a      	adds	r2, r3, #1
 80a28c4:	921b      	str	r2, [sp, #108]	; 0x6c
 80a28c6:	785b      	ldrb	r3, [r3, #1]
 80a28c8:	2b30      	cmp	r3, #48	; 0x30
 80a28ca:	d0f9      	beq.n	80a28c0 <_strtod_l+0x130>
 80a28cc:	2b00      	cmp	r3, #0
 80a28ce:	d0a0      	beq.n	80a2812 <_strtod_l+0x82>
 80a28d0:	2301      	movs	r3, #1
 80a28d2:	9307      	str	r3, [sp, #28]
 80a28d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a28d6:	220a      	movs	r2, #10
 80a28d8:	9308      	str	r3, [sp, #32]
 80a28da:	2300      	movs	r3, #0
 80a28dc:	469b      	mov	fp, r3
 80a28de:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80a28e2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80a28e4:	7805      	ldrb	r5, [r0, #0]
 80a28e6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80a28ea:	b2d9      	uxtb	r1, r3
 80a28ec:	2909      	cmp	r1, #9
 80a28ee:	d926      	bls.n	80a293e <_strtod_l+0x1ae>
 80a28f0:	4622      	mov	r2, r4
 80a28f2:	4639      	mov	r1, r7
 80a28f4:	f7ff ff19 	bl	80a272a <strncmp>
 80a28f8:	2800      	cmp	r0, #0
 80a28fa:	d032      	beq.n	80a2962 <_strtod_l+0x1d2>
 80a28fc:	2000      	movs	r0, #0
 80a28fe:	462b      	mov	r3, r5
 80a2900:	465c      	mov	r4, fp
 80a2902:	4602      	mov	r2, r0
 80a2904:	9004      	str	r0, [sp, #16]
 80a2906:	2b65      	cmp	r3, #101	; 0x65
 80a2908:	d001      	beq.n	80a290e <_strtod_l+0x17e>
 80a290a:	2b45      	cmp	r3, #69	; 0x45
 80a290c:	d113      	bne.n	80a2936 <_strtod_l+0x1a6>
 80a290e:	b91c      	cbnz	r4, 80a2918 <_strtod_l+0x188>
 80a2910:	9b07      	ldr	r3, [sp, #28]
 80a2912:	4303      	orrs	r3, r0
 80a2914:	d099      	beq.n	80a284a <_strtod_l+0xba>
 80a2916:	2400      	movs	r4, #0
 80a2918:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80a291a:	1c73      	adds	r3, r6, #1
 80a291c:	931b      	str	r3, [sp, #108]	; 0x6c
 80a291e:	7873      	ldrb	r3, [r6, #1]
 80a2920:	2b2b      	cmp	r3, #43	; 0x2b
 80a2922:	d078      	beq.n	80a2a16 <_strtod_l+0x286>
 80a2924:	2b2d      	cmp	r3, #45	; 0x2d
 80a2926:	d07b      	beq.n	80a2a20 <_strtod_l+0x290>
 80a2928:	2700      	movs	r7, #0
 80a292a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a292e:	2909      	cmp	r1, #9
 80a2930:	f240 8082 	bls.w	80a2a38 <_strtod_l+0x2a8>
 80a2934:	961b      	str	r6, [sp, #108]	; 0x6c
 80a2936:	2500      	movs	r5, #0
 80a2938:	e09e      	b.n	80a2a78 <_strtod_l+0x2e8>
 80a293a:	2300      	movs	r3, #0
 80a293c:	e7c9      	b.n	80a28d2 <_strtod_l+0x142>
 80a293e:	f1bb 0f08 	cmp.w	fp, #8
 80a2942:	bfd5      	itete	le
 80a2944:	9906      	ldrle	r1, [sp, #24]
 80a2946:	9905      	ldrgt	r1, [sp, #20]
 80a2948:	fb02 3301 	mlale	r3, r2, r1, r3
 80a294c:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a2950:	f100 0001 	add.w	r0, r0, #1
 80a2954:	bfd4      	ite	le
 80a2956:	9306      	strle	r3, [sp, #24]
 80a2958:	9305      	strgt	r3, [sp, #20]
 80a295a:	f10b 0b01 	add.w	fp, fp, #1
 80a295e:	901b      	str	r0, [sp, #108]	; 0x6c
 80a2960:	e7bf      	b.n	80a28e2 <_strtod_l+0x152>
 80a2962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a2964:	191a      	adds	r2, r3, r4
 80a2966:	921b      	str	r2, [sp, #108]	; 0x6c
 80a2968:	5d1b      	ldrb	r3, [r3, r4]
 80a296a:	f1bb 0f00 	cmp.w	fp, #0
 80a296e:	d036      	beq.n	80a29de <_strtod_l+0x24e>
 80a2970:	465c      	mov	r4, fp
 80a2972:	9004      	str	r0, [sp, #16]
 80a2974:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80a2978:	2a09      	cmp	r2, #9
 80a297a:	d912      	bls.n	80a29a2 <_strtod_l+0x212>
 80a297c:	2201      	movs	r2, #1
 80a297e:	e7c2      	b.n	80a2906 <_strtod_l+0x176>
 80a2980:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a2982:	3001      	adds	r0, #1
 80a2984:	1c5a      	adds	r2, r3, #1
 80a2986:	921b      	str	r2, [sp, #108]	; 0x6c
 80a2988:	785b      	ldrb	r3, [r3, #1]
 80a298a:	2b30      	cmp	r3, #48	; 0x30
 80a298c:	d0f8      	beq.n	80a2980 <_strtod_l+0x1f0>
 80a298e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a2992:	2a08      	cmp	r2, #8
 80a2994:	f200 84dc 	bhi.w	80a3350 <_strtod_l+0xbc0>
 80a2998:	9004      	str	r0, [sp, #16]
 80a299a:	2000      	movs	r0, #0
 80a299c:	4604      	mov	r4, r0
 80a299e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80a29a0:	9208      	str	r2, [sp, #32]
 80a29a2:	3b30      	subs	r3, #48	; 0x30
 80a29a4:	f100 0201 	add.w	r2, r0, #1
 80a29a8:	d013      	beq.n	80a29d2 <_strtod_l+0x242>
 80a29aa:	9904      	ldr	r1, [sp, #16]
 80a29ac:	1905      	adds	r5, r0, r4
 80a29ae:	4411      	add	r1, r2
 80a29b0:	9104      	str	r1, [sp, #16]
 80a29b2:	4622      	mov	r2, r4
 80a29b4:	210a      	movs	r1, #10
 80a29b6:	42aa      	cmp	r2, r5
 80a29b8:	d113      	bne.n	80a29e2 <_strtod_l+0x252>
 80a29ba:	1822      	adds	r2, r4, r0
 80a29bc:	2a08      	cmp	r2, #8
 80a29be:	f104 0401 	add.w	r4, r4, #1
 80a29c2:	4404      	add	r4, r0
 80a29c4:	dc1b      	bgt.n	80a29fe <_strtod_l+0x26e>
 80a29c6:	220a      	movs	r2, #10
 80a29c8:	9906      	ldr	r1, [sp, #24]
 80a29ca:	fb02 3301 	mla	r3, r2, r1, r3
 80a29ce:	9306      	str	r3, [sp, #24]
 80a29d0:	2200      	movs	r2, #0
 80a29d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a29d4:	4610      	mov	r0, r2
 80a29d6:	1c59      	adds	r1, r3, #1
 80a29d8:	911b      	str	r1, [sp, #108]	; 0x6c
 80a29da:	785b      	ldrb	r3, [r3, #1]
 80a29dc:	e7ca      	b.n	80a2974 <_strtod_l+0x1e4>
 80a29de:	4658      	mov	r0, fp
 80a29e0:	e7d3      	b.n	80a298a <_strtod_l+0x1fa>
 80a29e2:	2a08      	cmp	r2, #8
 80a29e4:	dc04      	bgt.n	80a29f0 <_strtod_l+0x260>
 80a29e6:	9f06      	ldr	r7, [sp, #24]
 80a29e8:	434f      	muls	r7, r1
 80a29ea:	9706      	str	r7, [sp, #24]
 80a29ec:	3201      	adds	r2, #1
 80a29ee:	e7e2      	b.n	80a29b6 <_strtod_l+0x226>
 80a29f0:	1c57      	adds	r7, r2, #1
 80a29f2:	2f10      	cmp	r7, #16
 80a29f4:	bfde      	ittt	le
 80a29f6:	9f05      	ldrle	r7, [sp, #20]
 80a29f8:	434f      	mulle	r7, r1
 80a29fa:	9705      	strle	r7, [sp, #20]
 80a29fc:	e7f6      	b.n	80a29ec <_strtod_l+0x25c>
 80a29fe:	2c10      	cmp	r4, #16
 80a2a00:	bfdf      	itttt	le
 80a2a02:	220a      	movle	r2, #10
 80a2a04:	9905      	ldrle	r1, [sp, #20]
 80a2a06:	fb02 3301 	mlale	r3, r2, r1, r3
 80a2a0a:	9305      	strle	r3, [sp, #20]
 80a2a0c:	e7e0      	b.n	80a29d0 <_strtod_l+0x240>
 80a2a0e:	2300      	movs	r3, #0
 80a2a10:	2201      	movs	r2, #1
 80a2a12:	9304      	str	r3, [sp, #16]
 80a2a14:	e77c      	b.n	80a2910 <_strtod_l+0x180>
 80a2a16:	2700      	movs	r7, #0
 80a2a18:	1cb3      	adds	r3, r6, #2
 80a2a1a:	931b      	str	r3, [sp, #108]	; 0x6c
 80a2a1c:	78b3      	ldrb	r3, [r6, #2]
 80a2a1e:	e784      	b.n	80a292a <_strtod_l+0x19a>
 80a2a20:	2701      	movs	r7, #1
 80a2a22:	e7f9      	b.n	80a2a18 <_strtod_l+0x288>
 80a2a24:	080a46ac 	.word	0x080a46ac
 80a2a28:	080a4554 	.word	0x080a4554
 80a2a2c:	7ff00000 	.word	0x7ff00000
 80a2a30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a2a32:	1c59      	adds	r1, r3, #1
 80a2a34:	911b      	str	r1, [sp, #108]	; 0x6c
 80a2a36:	785b      	ldrb	r3, [r3, #1]
 80a2a38:	2b30      	cmp	r3, #48	; 0x30
 80a2a3a:	d0f9      	beq.n	80a2a30 <_strtod_l+0x2a0>
 80a2a3c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80a2a40:	2908      	cmp	r1, #8
 80a2a42:	f63f af78 	bhi.w	80a2936 <_strtod_l+0x1a6>
 80a2a46:	f04f 0e0a 	mov.w	lr, #10
 80a2a4a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a2a4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a2a50:	9309      	str	r3, [sp, #36]	; 0x24
 80a2a52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a2a54:	1c59      	adds	r1, r3, #1
 80a2a56:	911b      	str	r1, [sp, #108]	; 0x6c
 80a2a58:	785b      	ldrb	r3, [r3, #1]
 80a2a5a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80a2a5e:	2d09      	cmp	r5, #9
 80a2a60:	d935      	bls.n	80a2ace <_strtod_l+0x33e>
 80a2a62:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a2a64:	1b49      	subs	r1, r1, r5
 80a2a66:	2908      	cmp	r1, #8
 80a2a68:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80a2a6c:	dc02      	bgt.n	80a2a74 <_strtod_l+0x2e4>
 80a2a6e:	4565      	cmp	r5, ip
 80a2a70:	bfa8      	it	ge
 80a2a72:	4665      	movge	r5, ip
 80a2a74:	b107      	cbz	r7, 80a2a78 <_strtod_l+0x2e8>
 80a2a76:	426d      	negs	r5, r5
 80a2a78:	2c00      	cmp	r4, #0
 80a2a7a:	d14c      	bne.n	80a2b16 <_strtod_l+0x386>
 80a2a7c:	9907      	ldr	r1, [sp, #28]
 80a2a7e:	4301      	orrs	r1, r0
 80a2a80:	f47f aec7 	bne.w	80a2812 <_strtod_l+0x82>
 80a2a84:	2a00      	cmp	r2, #0
 80a2a86:	f47f aee0 	bne.w	80a284a <_strtod_l+0xba>
 80a2a8a:	2b69      	cmp	r3, #105	; 0x69
 80a2a8c:	d026      	beq.n	80a2adc <_strtod_l+0x34c>
 80a2a8e:	dc23      	bgt.n	80a2ad8 <_strtod_l+0x348>
 80a2a90:	2b49      	cmp	r3, #73	; 0x49
 80a2a92:	d023      	beq.n	80a2adc <_strtod_l+0x34c>
 80a2a94:	2b4e      	cmp	r3, #78	; 0x4e
 80a2a96:	f47f aed8 	bne.w	80a284a <_strtod_l+0xba>
 80a2a9a:	499c      	ldr	r1, [pc, #624]	; (80a2d0c <_strtod_l+0x57c>)
 80a2a9c:	a81b      	add	r0, sp, #108	; 0x6c
 80a2a9e:	f000 ff1b 	bl	80a38d8 <__match>
 80a2aa2:	2800      	cmp	r0, #0
 80a2aa4:	f43f aed1 	beq.w	80a284a <_strtod_l+0xba>
 80a2aa8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a2aaa:	781b      	ldrb	r3, [r3, #0]
 80a2aac:	2b28      	cmp	r3, #40	; 0x28
 80a2aae:	d12c      	bne.n	80a2b0a <_strtod_l+0x37a>
 80a2ab0:	4997      	ldr	r1, [pc, #604]	; (80a2d10 <_strtod_l+0x580>)
 80a2ab2:	aa1e      	add	r2, sp, #120	; 0x78
 80a2ab4:	a81b      	add	r0, sp, #108	; 0x6c
 80a2ab6:	f000 ff23 	bl	80a3900 <__hexnan>
 80a2aba:	2805      	cmp	r0, #5
 80a2abc:	d125      	bne.n	80a2b0a <_strtod_l+0x37a>
 80a2abe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80a2ac0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80a2ac4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a2ac8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a2acc:	e6a1      	b.n	80a2812 <_strtod_l+0x82>
 80a2ace:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80a2ad2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80a2ad6:	e7bc      	b.n	80a2a52 <_strtod_l+0x2c2>
 80a2ad8:	2b6e      	cmp	r3, #110	; 0x6e
 80a2ada:	e7dc      	b.n	80a2a96 <_strtod_l+0x306>
 80a2adc:	498d      	ldr	r1, [pc, #564]	; (80a2d14 <_strtod_l+0x584>)
 80a2ade:	a81b      	add	r0, sp, #108	; 0x6c
 80a2ae0:	f000 fefa 	bl	80a38d8 <__match>
 80a2ae4:	2800      	cmp	r0, #0
 80a2ae6:	f43f aeb0 	beq.w	80a284a <_strtod_l+0xba>
 80a2aea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a2aec:	498a      	ldr	r1, [pc, #552]	; (80a2d18 <_strtod_l+0x588>)
 80a2aee:	3b01      	subs	r3, #1
 80a2af0:	a81b      	add	r0, sp, #108	; 0x6c
 80a2af2:	931b      	str	r3, [sp, #108]	; 0x6c
 80a2af4:	f000 fef0 	bl	80a38d8 <__match>
 80a2af8:	b910      	cbnz	r0, 80a2b00 <_strtod_l+0x370>
 80a2afa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a2afc:	3301      	adds	r3, #1
 80a2afe:	931b      	str	r3, [sp, #108]	; 0x6c
 80a2b00:	f04f 0800 	mov.w	r8, #0
 80a2b04:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80a2d28 <_strtod_l+0x598>
 80a2b08:	e683      	b.n	80a2812 <_strtod_l+0x82>
 80a2b0a:	4884      	ldr	r0, [pc, #528]	; (80a2d1c <_strtod_l+0x58c>)
 80a2b0c:	f001 fbee 	bl	80a42ec <nan>
 80a2b10:	4680      	mov	r8, r0
 80a2b12:	4689      	mov	r9, r1
 80a2b14:	e67d      	b.n	80a2812 <_strtod_l+0x82>
 80a2b16:	9b04      	ldr	r3, [sp, #16]
 80a2b18:	f1bb 0f00 	cmp.w	fp, #0
 80a2b1c:	bf08      	it	eq
 80a2b1e:	46a3      	moveq	fp, r4
 80a2b20:	1aeb      	subs	r3, r5, r3
 80a2b22:	2c10      	cmp	r4, #16
 80a2b24:	9806      	ldr	r0, [sp, #24]
 80a2b26:	4626      	mov	r6, r4
 80a2b28:	9307      	str	r3, [sp, #28]
 80a2b2a:	bfa8      	it	ge
 80a2b2c:	2610      	movge	r6, #16
 80a2b2e:	f7ff f8b7 	bl	80a1ca0 <__aeabi_ui2d>
 80a2b32:	2c09      	cmp	r4, #9
 80a2b34:	4680      	mov	r8, r0
 80a2b36:	4689      	mov	r9, r1
 80a2b38:	dd13      	ble.n	80a2b62 <_strtod_l+0x3d2>
 80a2b3a:	4b79      	ldr	r3, [pc, #484]	; (80a2d20 <_strtod_l+0x590>)
 80a2b3c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80a2b40:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a2b44:	f7ff f926 	bl	80a1d94 <__aeabi_dmul>
 80a2b48:	4680      	mov	r8, r0
 80a2b4a:	9805      	ldr	r0, [sp, #20]
 80a2b4c:	4689      	mov	r9, r1
 80a2b4e:	f7ff f8a7 	bl	80a1ca0 <__aeabi_ui2d>
 80a2b52:	4602      	mov	r2, r0
 80a2b54:	460b      	mov	r3, r1
 80a2b56:	4640      	mov	r0, r8
 80a2b58:	4649      	mov	r1, r9
 80a2b5a:	f7fe ff65 	bl	80a1a28 <__adddf3>
 80a2b5e:	4680      	mov	r8, r0
 80a2b60:	4689      	mov	r9, r1
 80a2b62:	2c0f      	cmp	r4, #15
 80a2b64:	dc36      	bgt.n	80a2bd4 <_strtod_l+0x444>
 80a2b66:	9b07      	ldr	r3, [sp, #28]
 80a2b68:	2b00      	cmp	r3, #0
 80a2b6a:	f43f ae52 	beq.w	80a2812 <_strtod_l+0x82>
 80a2b6e:	dd22      	ble.n	80a2bb6 <_strtod_l+0x426>
 80a2b70:	2b16      	cmp	r3, #22
 80a2b72:	dc09      	bgt.n	80a2b88 <_strtod_l+0x3f8>
 80a2b74:	4c6a      	ldr	r4, [pc, #424]	; (80a2d20 <_strtod_l+0x590>)
 80a2b76:	4642      	mov	r2, r8
 80a2b78:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80a2b7c:	464b      	mov	r3, r9
 80a2b7e:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a2b82:	f7ff f907 	bl	80a1d94 <__aeabi_dmul>
 80a2b86:	e7c3      	b.n	80a2b10 <_strtod_l+0x380>
 80a2b88:	9a07      	ldr	r2, [sp, #28]
 80a2b8a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80a2b8e:	4293      	cmp	r3, r2
 80a2b90:	db20      	blt.n	80a2bd4 <_strtod_l+0x444>
 80a2b92:	4d63      	ldr	r5, [pc, #396]	; (80a2d20 <_strtod_l+0x590>)
 80a2b94:	f1c4 040f 	rsb	r4, r4, #15
 80a2b98:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80a2b9c:	4642      	mov	r2, r8
 80a2b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a2ba2:	464b      	mov	r3, r9
 80a2ba4:	f7ff f8f6 	bl	80a1d94 <__aeabi_dmul>
 80a2ba8:	9b07      	ldr	r3, [sp, #28]
 80a2baa:	1b1c      	subs	r4, r3, r4
 80a2bac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80a2bb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a2bb4:	e7e5      	b.n	80a2b82 <_strtod_l+0x3f2>
 80a2bb6:	9b07      	ldr	r3, [sp, #28]
 80a2bb8:	3316      	adds	r3, #22
 80a2bba:	db0b      	blt.n	80a2bd4 <_strtod_l+0x444>
 80a2bbc:	9b04      	ldr	r3, [sp, #16]
 80a2bbe:	4a58      	ldr	r2, [pc, #352]	; (80a2d20 <_strtod_l+0x590>)
 80a2bc0:	1b5d      	subs	r5, r3, r5
 80a2bc2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80a2bc6:	4640      	mov	r0, r8
 80a2bc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a2bcc:	4649      	mov	r1, r9
 80a2bce:	f7ff fa0b 	bl	80a1fe8 <__aeabi_ddiv>
 80a2bd2:	e79d      	b.n	80a2b10 <_strtod_l+0x380>
 80a2bd4:	9b07      	ldr	r3, [sp, #28]
 80a2bd6:	1ba6      	subs	r6, r4, r6
 80a2bd8:	441e      	add	r6, r3
 80a2bda:	2e00      	cmp	r6, #0
 80a2bdc:	dd71      	ble.n	80a2cc2 <_strtod_l+0x532>
 80a2bde:	f016 030f 	ands.w	r3, r6, #15
 80a2be2:	d00a      	beq.n	80a2bfa <_strtod_l+0x46a>
 80a2be4:	494e      	ldr	r1, [pc, #312]	; (80a2d20 <_strtod_l+0x590>)
 80a2be6:	4642      	mov	r2, r8
 80a2be8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80a2bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a2bf0:	464b      	mov	r3, r9
 80a2bf2:	f7ff f8cf 	bl	80a1d94 <__aeabi_dmul>
 80a2bf6:	4680      	mov	r8, r0
 80a2bf8:	4689      	mov	r9, r1
 80a2bfa:	f036 060f 	bics.w	r6, r6, #15
 80a2bfe:	d050      	beq.n	80a2ca2 <_strtod_l+0x512>
 80a2c00:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80a2c04:	dd27      	ble.n	80a2c56 <_strtod_l+0x4c6>
 80a2c06:	f04f 0b00 	mov.w	fp, #0
 80a2c0a:	f8cd b010 	str.w	fp, [sp, #16]
 80a2c0e:	f8cd b020 	str.w	fp, [sp, #32]
 80a2c12:	f8cd b018 	str.w	fp, [sp, #24]
 80a2c16:	2322      	movs	r3, #34	; 0x22
 80a2c18:	f04f 0800 	mov.w	r8, #0
 80a2c1c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80a2d28 <_strtod_l+0x598>
 80a2c20:	f8ca 3000 	str.w	r3, [sl]
 80a2c24:	9b08      	ldr	r3, [sp, #32]
 80a2c26:	2b00      	cmp	r3, #0
 80a2c28:	f43f adf3 	beq.w	80a2812 <_strtod_l+0x82>
 80a2c2c:	4650      	mov	r0, sl
 80a2c2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a2c30:	f000 ff48 	bl	80a3ac4 <_Bfree>
 80a2c34:	4650      	mov	r0, sl
 80a2c36:	9906      	ldr	r1, [sp, #24]
 80a2c38:	f000 ff44 	bl	80a3ac4 <_Bfree>
 80a2c3c:	4650      	mov	r0, sl
 80a2c3e:	9904      	ldr	r1, [sp, #16]
 80a2c40:	f000 ff40 	bl	80a3ac4 <_Bfree>
 80a2c44:	4650      	mov	r0, sl
 80a2c46:	9908      	ldr	r1, [sp, #32]
 80a2c48:	f000 ff3c 	bl	80a3ac4 <_Bfree>
 80a2c4c:	4659      	mov	r1, fp
 80a2c4e:	4650      	mov	r0, sl
 80a2c50:	f000 ff38 	bl	80a3ac4 <_Bfree>
 80a2c54:	e5dd      	b.n	80a2812 <_strtod_l+0x82>
 80a2c56:	2300      	movs	r3, #0
 80a2c58:	4640      	mov	r0, r8
 80a2c5a:	4649      	mov	r1, r9
 80a2c5c:	461f      	mov	r7, r3
 80a2c5e:	1136      	asrs	r6, r6, #4
 80a2c60:	2e01      	cmp	r6, #1
 80a2c62:	dc21      	bgt.n	80a2ca8 <_strtod_l+0x518>
 80a2c64:	b10b      	cbz	r3, 80a2c6a <_strtod_l+0x4da>
 80a2c66:	4680      	mov	r8, r0
 80a2c68:	4689      	mov	r9, r1
 80a2c6a:	4b2e      	ldr	r3, [pc, #184]	; (80a2d24 <_strtod_l+0x594>)
 80a2c6c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a2c70:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80a2c74:	4642      	mov	r2, r8
 80a2c76:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a2c7a:	464b      	mov	r3, r9
 80a2c7c:	f7ff f88a 	bl	80a1d94 <__aeabi_dmul>
 80a2c80:	4b29      	ldr	r3, [pc, #164]	; (80a2d28 <_strtod_l+0x598>)
 80a2c82:	460a      	mov	r2, r1
 80a2c84:	400b      	ands	r3, r1
 80a2c86:	4929      	ldr	r1, [pc, #164]	; (80a2d2c <_strtod_l+0x59c>)
 80a2c88:	4680      	mov	r8, r0
 80a2c8a:	428b      	cmp	r3, r1
 80a2c8c:	d8bb      	bhi.n	80a2c06 <_strtod_l+0x476>
 80a2c8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a2c92:	428b      	cmp	r3, r1
 80a2c94:	bf86      	itte	hi
 80a2c96:	f04f 38ff 	movhi.w	r8, #4294967295
 80a2c9a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80a2d30 <_strtod_l+0x5a0>
 80a2c9e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a2ca2:	2300      	movs	r3, #0
 80a2ca4:	9305      	str	r3, [sp, #20]
 80a2ca6:	e07e      	b.n	80a2da6 <_strtod_l+0x616>
 80a2ca8:	07f2      	lsls	r2, r6, #31
 80a2caa:	d507      	bpl.n	80a2cbc <_strtod_l+0x52c>
 80a2cac:	4b1d      	ldr	r3, [pc, #116]	; (80a2d24 <_strtod_l+0x594>)
 80a2cae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80a2cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2cb6:	f7ff f86d 	bl	80a1d94 <__aeabi_dmul>
 80a2cba:	2301      	movs	r3, #1
 80a2cbc:	3701      	adds	r7, #1
 80a2cbe:	1076      	asrs	r6, r6, #1
 80a2cc0:	e7ce      	b.n	80a2c60 <_strtod_l+0x4d0>
 80a2cc2:	d0ee      	beq.n	80a2ca2 <_strtod_l+0x512>
 80a2cc4:	4276      	negs	r6, r6
 80a2cc6:	f016 020f 	ands.w	r2, r6, #15
 80a2cca:	d00a      	beq.n	80a2ce2 <_strtod_l+0x552>
 80a2ccc:	4b14      	ldr	r3, [pc, #80]	; (80a2d20 <_strtod_l+0x590>)
 80a2cce:	4640      	mov	r0, r8
 80a2cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a2cd4:	4649      	mov	r1, r9
 80a2cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2cda:	f7ff f985 	bl	80a1fe8 <__aeabi_ddiv>
 80a2cde:	4680      	mov	r8, r0
 80a2ce0:	4689      	mov	r9, r1
 80a2ce2:	1136      	asrs	r6, r6, #4
 80a2ce4:	d0dd      	beq.n	80a2ca2 <_strtod_l+0x512>
 80a2ce6:	2e1f      	cmp	r6, #31
 80a2ce8:	dd24      	ble.n	80a2d34 <_strtod_l+0x5a4>
 80a2cea:	f04f 0b00 	mov.w	fp, #0
 80a2cee:	f8cd b010 	str.w	fp, [sp, #16]
 80a2cf2:	f8cd b020 	str.w	fp, [sp, #32]
 80a2cf6:	f8cd b018 	str.w	fp, [sp, #24]
 80a2cfa:	2322      	movs	r3, #34	; 0x22
 80a2cfc:	f04f 0800 	mov.w	r8, #0
 80a2d00:	f04f 0900 	mov.w	r9, #0
 80a2d04:	f8ca 3000 	str.w	r3, [sl]
 80a2d08:	e78c      	b.n	80a2c24 <_strtod_l+0x494>
 80a2d0a:	bf00      	nop
 80a2d0c:	080a454e 	.word	0x080a454e
 80a2d10:	080a4568 	.word	0x080a4568
 80a2d14:	080a4545 	.word	0x080a4545
 80a2d18:	080a4548 	.word	0x080a4548
 80a2d1c:	080a46aa 	.word	0x080a46aa
 80a2d20:	080a46e8 	.word	0x080a46e8
 80a2d24:	080a46c0 	.word	0x080a46c0
 80a2d28:	7ff00000 	.word	0x7ff00000
 80a2d2c:	7ca00000 	.word	0x7ca00000
 80a2d30:	7fefffff 	.word	0x7fefffff
 80a2d34:	f016 0310 	ands.w	r3, r6, #16
 80a2d38:	bf18      	it	ne
 80a2d3a:	236a      	movne	r3, #106	; 0x6a
 80a2d3c:	4640      	mov	r0, r8
 80a2d3e:	9305      	str	r3, [sp, #20]
 80a2d40:	4649      	mov	r1, r9
 80a2d42:	2300      	movs	r3, #0
 80a2d44:	4fb2      	ldr	r7, [pc, #712]	; (80a3010 <_strtod_l+0x880>)
 80a2d46:	07f2      	lsls	r2, r6, #31
 80a2d48:	d504      	bpl.n	80a2d54 <_strtod_l+0x5c4>
 80a2d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a2d4e:	f7ff f821 	bl	80a1d94 <__aeabi_dmul>
 80a2d52:	2301      	movs	r3, #1
 80a2d54:	1076      	asrs	r6, r6, #1
 80a2d56:	f107 0708 	add.w	r7, r7, #8
 80a2d5a:	d1f4      	bne.n	80a2d46 <_strtod_l+0x5b6>
 80a2d5c:	b10b      	cbz	r3, 80a2d62 <_strtod_l+0x5d2>
 80a2d5e:	4680      	mov	r8, r0
 80a2d60:	4689      	mov	r9, r1
 80a2d62:	9b05      	ldr	r3, [sp, #20]
 80a2d64:	b1bb      	cbz	r3, 80a2d96 <_strtod_l+0x606>
 80a2d66:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a2d6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a2d6e:	2b00      	cmp	r3, #0
 80a2d70:	4649      	mov	r1, r9
 80a2d72:	dd10      	ble.n	80a2d96 <_strtod_l+0x606>
 80a2d74:	2b1f      	cmp	r3, #31
 80a2d76:	f340 812b 	ble.w	80a2fd0 <_strtod_l+0x840>
 80a2d7a:	2b34      	cmp	r3, #52	; 0x34
 80a2d7c:	bfd8      	it	le
 80a2d7e:	f04f 32ff 	movle.w	r2, #4294967295
 80a2d82:	f04f 0800 	mov.w	r8, #0
 80a2d86:	bfcf      	iteee	gt
 80a2d88:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a2d8c:	3b20      	suble	r3, #32
 80a2d8e:	fa02 f303 	lslle.w	r3, r2, r3
 80a2d92:	ea03 0901 	andle.w	r9, r3, r1
 80a2d96:	2200      	movs	r2, #0
 80a2d98:	2300      	movs	r3, #0
 80a2d9a:	4640      	mov	r0, r8
 80a2d9c:	4649      	mov	r1, r9
 80a2d9e:	f7ff fa61 	bl	80a2264 <__aeabi_dcmpeq>
 80a2da2:	2800      	cmp	r0, #0
 80a2da4:	d1a1      	bne.n	80a2cea <_strtod_l+0x55a>
 80a2da6:	9b06      	ldr	r3, [sp, #24]
 80a2da8:	465a      	mov	r2, fp
 80a2daa:	9300      	str	r3, [sp, #0]
 80a2dac:	4650      	mov	r0, sl
 80a2dae:	4623      	mov	r3, r4
 80a2db0:	9908      	ldr	r1, [sp, #32]
 80a2db2:	f000 fedc 	bl	80a3b6e <__s2b>
 80a2db6:	9008      	str	r0, [sp, #32]
 80a2db8:	2800      	cmp	r0, #0
 80a2dba:	f43f af24 	beq.w	80a2c06 <_strtod_l+0x476>
 80a2dbe:	9b04      	ldr	r3, [sp, #16]
 80a2dc0:	f04f 0b00 	mov.w	fp, #0
 80a2dc4:	1b5d      	subs	r5, r3, r5
 80a2dc6:	9b07      	ldr	r3, [sp, #28]
 80a2dc8:	f8cd b010 	str.w	fp, [sp, #16]
 80a2dcc:	2b00      	cmp	r3, #0
 80a2dce:	bfb4      	ite	lt
 80a2dd0:	462b      	movlt	r3, r5
 80a2dd2:	2300      	movge	r3, #0
 80a2dd4:	930e      	str	r3, [sp, #56]	; 0x38
 80a2dd6:	9b07      	ldr	r3, [sp, #28]
 80a2dd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80a2ddc:	9316      	str	r3, [sp, #88]	; 0x58
 80a2dde:	9b08      	ldr	r3, [sp, #32]
 80a2de0:	4650      	mov	r0, sl
 80a2de2:	6859      	ldr	r1, [r3, #4]
 80a2de4:	f000 fe3a 	bl	80a3a5c <_Balloc>
 80a2de8:	9006      	str	r0, [sp, #24]
 80a2dea:	2800      	cmp	r0, #0
 80a2dec:	f43f af13 	beq.w	80a2c16 <_strtod_l+0x486>
 80a2df0:	9b08      	ldr	r3, [sp, #32]
 80a2df2:	300c      	adds	r0, #12
 80a2df4:	691a      	ldr	r2, [r3, #16]
 80a2df6:	f103 010c 	add.w	r1, r3, #12
 80a2dfa:	3202      	adds	r2, #2
 80a2dfc:	0092      	lsls	r2, r2, #2
 80a2dfe:	f7ff fc37 	bl	80a2670 <memcpy>
 80a2e02:	ab1e      	add	r3, sp, #120	; 0x78
 80a2e04:	9301      	str	r3, [sp, #4]
 80a2e06:	ab1d      	add	r3, sp, #116	; 0x74
 80a2e08:	9300      	str	r3, [sp, #0]
 80a2e0a:	4642      	mov	r2, r8
 80a2e0c:	464b      	mov	r3, r9
 80a2e0e:	4650      	mov	r0, sl
 80a2e10:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a2e14:	f001 f99a 	bl	80a414c <__d2b>
 80a2e18:	901c      	str	r0, [sp, #112]	; 0x70
 80a2e1a:	2800      	cmp	r0, #0
 80a2e1c:	f43f aefb 	beq.w	80a2c16 <_strtod_l+0x486>
 80a2e20:	2101      	movs	r1, #1
 80a2e22:	4650      	mov	r0, sl
 80a2e24:	f000 ff2f 	bl	80a3c86 <__i2b>
 80a2e28:	4603      	mov	r3, r0
 80a2e2a:	9004      	str	r0, [sp, #16]
 80a2e2c:	2800      	cmp	r0, #0
 80a2e2e:	f43f aef2 	beq.w	80a2c16 <_strtod_l+0x486>
 80a2e32:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80a2e34:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80a2e36:	2d00      	cmp	r5, #0
 80a2e38:	bfab      	itete	ge
 80a2e3a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80a2e3c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80a2e3e:	18ee      	addge	r6, r5, r3
 80a2e40:	1b5c      	sublt	r4, r3, r5
 80a2e42:	9b05      	ldr	r3, [sp, #20]
 80a2e44:	bfa8      	it	ge
 80a2e46:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80a2e48:	eba5 0503 	sub.w	r5, r5, r3
 80a2e4c:	4415      	add	r5, r2
 80a2e4e:	4b71      	ldr	r3, [pc, #452]	; (80a3014 <_strtod_l+0x884>)
 80a2e50:	f105 35ff 	add.w	r5, r5, #4294967295
 80a2e54:	bfb8      	it	lt
 80a2e56:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80a2e58:	429d      	cmp	r5, r3
 80a2e5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80a2e5e:	f280 80c9 	bge.w	80a2ff4 <_strtod_l+0x864>
 80a2e62:	1b5b      	subs	r3, r3, r5
 80a2e64:	2b1f      	cmp	r3, #31
 80a2e66:	f04f 0701 	mov.w	r7, #1
 80a2e6a:	eba2 0203 	sub.w	r2, r2, r3
 80a2e6e:	f300 80b6 	bgt.w	80a2fde <_strtod_l+0x84e>
 80a2e72:	2500      	movs	r5, #0
 80a2e74:	fa07 f303 	lsl.w	r3, r7, r3
 80a2e78:	930f      	str	r3, [sp, #60]	; 0x3c
 80a2e7a:	18b7      	adds	r7, r6, r2
 80a2e7c:	9b05      	ldr	r3, [sp, #20]
 80a2e7e:	42be      	cmp	r6, r7
 80a2e80:	4414      	add	r4, r2
 80a2e82:	441c      	add	r4, r3
 80a2e84:	4633      	mov	r3, r6
 80a2e86:	bfa8      	it	ge
 80a2e88:	463b      	movge	r3, r7
 80a2e8a:	42a3      	cmp	r3, r4
 80a2e8c:	bfa8      	it	ge
 80a2e8e:	4623      	movge	r3, r4
 80a2e90:	2b00      	cmp	r3, #0
 80a2e92:	bfc2      	ittt	gt
 80a2e94:	1aff      	subgt	r7, r7, r3
 80a2e96:	1ae4      	subgt	r4, r4, r3
 80a2e98:	1af6      	subgt	r6, r6, r3
 80a2e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a2e9c:	2b00      	cmp	r3, #0
 80a2e9e:	dd17      	ble.n	80a2ed0 <_strtod_l+0x740>
 80a2ea0:	461a      	mov	r2, r3
 80a2ea2:	4650      	mov	r0, sl
 80a2ea4:	9904      	ldr	r1, [sp, #16]
 80a2ea6:	f000 ff93 	bl	80a3dd0 <__pow5mult>
 80a2eaa:	9004      	str	r0, [sp, #16]
 80a2eac:	2800      	cmp	r0, #0
 80a2eae:	f43f aeb2 	beq.w	80a2c16 <_strtod_l+0x486>
 80a2eb2:	4601      	mov	r1, r0
 80a2eb4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80a2eb6:	4650      	mov	r0, sl
 80a2eb8:	f000 feee 	bl	80a3c98 <__multiply>
 80a2ebc:	9009      	str	r0, [sp, #36]	; 0x24
 80a2ebe:	2800      	cmp	r0, #0
 80a2ec0:	f43f aea9 	beq.w	80a2c16 <_strtod_l+0x486>
 80a2ec4:	4650      	mov	r0, sl
 80a2ec6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a2ec8:	f000 fdfc 	bl	80a3ac4 <_Bfree>
 80a2ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a2ece:	931c      	str	r3, [sp, #112]	; 0x70
 80a2ed0:	2f00      	cmp	r7, #0
 80a2ed2:	f300 8093 	bgt.w	80a2ffc <_strtod_l+0x86c>
 80a2ed6:	9b07      	ldr	r3, [sp, #28]
 80a2ed8:	2b00      	cmp	r3, #0
 80a2eda:	dd08      	ble.n	80a2eee <_strtod_l+0x75e>
 80a2edc:	4650      	mov	r0, sl
 80a2ede:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80a2ee0:	9906      	ldr	r1, [sp, #24]
 80a2ee2:	f000 ff75 	bl	80a3dd0 <__pow5mult>
 80a2ee6:	9006      	str	r0, [sp, #24]
 80a2ee8:	2800      	cmp	r0, #0
 80a2eea:	f43f ae94 	beq.w	80a2c16 <_strtod_l+0x486>
 80a2eee:	2c00      	cmp	r4, #0
 80a2ef0:	dd08      	ble.n	80a2f04 <_strtod_l+0x774>
 80a2ef2:	4622      	mov	r2, r4
 80a2ef4:	4650      	mov	r0, sl
 80a2ef6:	9906      	ldr	r1, [sp, #24]
 80a2ef8:	f000 ffb8 	bl	80a3e6c <__lshift>
 80a2efc:	9006      	str	r0, [sp, #24]
 80a2efe:	2800      	cmp	r0, #0
 80a2f00:	f43f ae89 	beq.w	80a2c16 <_strtod_l+0x486>
 80a2f04:	2e00      	cmp	r6, #0
 80a2f06:	dd08      	ble.n	80a2f1a <_strtod_l+0x78a>
 80a2f08:	4632      	mov	r2, r6
 80a2f0a:	4650      	mov	r0, sl
 80a2f0c:	9904      	ldr	r1, [sp, #16]
 80a2f0e:	f000 ffad 	bl	80a3e6c <__lshift>
 80a2f12:	9004      	str	r0, [sp, #16]
 80a2f14:	2800      	cmp	r0, #0
 80a2f16:	f43f ae7e 	beq.w	80a2c16 <_strtod_l+0x486>
 80a2f1a:	4650      	mov	r0, sl
 80a2f1c:	9a06      	ldr	r2, [sp, #24]
 80a2f1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a2f20:	f001 f81e 	bl	80a3f60 <__mdiff>
 80a2f24:	4683      	mov	fp, r0
 80a2f26:	2800      	cmp	r0, #0
 80a2f28:	f43f ae75 	beq.w	80a2c16 <_strtod_l+0x486>
 80a2f2c:	2400      	movs	r4, #0
 80a2f2e:	68c3      	ldr	r3, [r0, #12]
 80a2f30:	9904      	ldr	r1, [sp, #16]
 80a2f32:	60c4      	str	r4, [r0, #12]
 80a2f34:	930d      	str	r3, [sp, #52]	; 0x34
 80a2f36:	f000 fff8 	bl	80a3f2a <__mcmp>
 80a2f3a:	42a0      	cmp	r0, r4
 80a2f3c:	da70      	bge.n	80a3020 <_strtod_l+0x890>
 80a2f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a2f40:	ea53 0308 	orrs.w	r3, r3, r8
 80a2f44:	f040 8096 	bne.w	80a3074 <_strtod_l+0x8e4>
 80a2f48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a2f4c:	2b00      	cmp	r3, #0
 80a2f4e:	f040 8091 	bne.w	80a3074 <_strtod_l+0x8e4>
 80a2f52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a2f56:	0d1b      	lsrs	r3, r3, #20
 80a2f58:	051b      	lsls	r3, r3, #20
 80a2f5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a2f5e:	f240 8089 	bls.w	80a3074 <_strtod_l+0x8e4>
 80a2f62:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a2f66:	b923      	cbnz	r3, 80a2f72 <_strtod_l+0x7e2>
 80a2f68:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a2f6c:	2b01      	cmp	r3, #1
 80a2f6e:	f340 8081 	ble.w	80a3074 <_strtod_l+0x8e4>
 80a2f72:	4659      	mov	r1, fp
 80a2f74:	2201      	movs	r2, #1
 80a2f76:	4650      	mov	r0, sl
 80a2f78:	f000 ff78 	bl	80a3e6c <__lshift>
 80a2f7c:	9904      	ldr	r1, [sp, #16]
 80a2f7e:	4683      	mov	fp, r0
 80a2f80:	f000 ffd3 	bl	80a3f2a <__mcmp>
 80a2f84:	2800      	cmp	r0, #0
 80a2f86:	dd75      	ble.n	80a3074 <_strtod_l+0x8e4>
 80a2f88:	9905      	ldr	r1, [sp, #20]
 80a2f8a:	464b      	mov	r3, r9
 80a2f8c:	4a22      	ldr	r2, [pc, #136]	; (80a3018 <_strtod_l+0x888>)
 80a2f8e:	2900      	cmp	r1, #0
 80a2f90:	f000 8091 	beq.w	80a30b6 <_strtod_l+0x926>
 80a2f94:	ea02 0109 	and.w	r1, r2, r9
 80a2f98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80a2f9c:	f300 808b 	bgt.w	80a30b6 <_strtod_l+0x926>
 80a2fa0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80a2fa4:	f77f aea9 	ble.w	80a2cfa <_strtod_l+0x56a>
 80a2fa8:	2300      	movs	r3, #0
 80a2faa:	4a1c      	ldr	r2, [pc, #112]	; (80a301c <_strtod_l+0x88c>)
 80a2fac:	4640      	mov	r0, r8
 80a2fae:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80a2fb2:	4649      	mov	r1, r9
 80a2fb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80a2fb8:	f7fe feec 	bl	80a1d94 <__aeabi_dmul>
 80a2fbc:	460b      	mov	r3, r1
 80a2fbe:	4303      	orrs	r3, r0
 80a2fc0:	bf08      	it	eq
 80a2fc2:	2322      	moveq	r3, #34	; 0x22
 80a2fc4:	4680      	mov	r8, r0
 80a2fc6:	4689      	mov	r9, r1
 80a2fc8:	bf08      	it	eq
 80a2fca:	f8ca 3000 	streq.w	r3, [sl]
 80a2fce:	e62d      	b.n	80a2c2c <_strtod_l+0x49c>
 80a2fd0:	f04f 32ff 	mov.w	r2, #4294967295
 80a2fd4:	fa02 f303 	lsl.w	r3, r2, r3
 80a2fd8:	ea03 0808 	and.w	r8, r3, r8
 80a2fdc:	e6db      	b.n	80a2d96 <_strtod_l+0x606>
 80a2fde:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80a2fe2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80a2fe6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80a2fea:	35e2      	adds	r5, #226	; 0xe2
 80a2fec:	fa07 f505 	lsl.w	r5, r7, r5
 80a2ff0:	970f      	str	r7, [sp, #60]	; 0x3c
 80a2ff2:	e742      	b.n	80a2e7a <_strtod_l+0x6ea>
 80a2ff4:	2301      	movs	r3, #1
 80a2ff6:	2500      	movs	r5, #0
 80a2ff8:	930f      	str	r3, [sp, #60]	; 0x3c
 80a2ffa:	e73e      	b.n	80a2e7a <_strtod_l+0x6ea>
 80a2ffc:	463a      	mov	r2, r7
 80a2ffe:	4650      	mov	r0, sl
 80a3000:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a3002:	f000 ff33 	bl	80a3e6c <__lshift>
 80a3006:	901c      	str	r0, [sp, #112]	; 0x70
 80a3008:	2800      	cmp	r0, #0
 80a300a:	f47f af64 	bne.w	80a2ed6 <_strtod_l+0x746>
 80a300e:	e602      	b.n	80a2c16 <_strtod_l+0x486>
 80a3010:	080a4580 	.word	0x080a4580
 80a3014:	fffffc02 	.word	0xfffffc02
 80a3018:	7ff00000 	.word	0x7ff00000
 80a301c:	39500000 	.word	0x39500000
 80a3020:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80a3024:	d166      	bne.n	80a30f4 <_strtod_l+0x964>
 80a3026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a3028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a302c:	b35a      	cbz	r2, 80a3086 <_strtod_l+0x8f6>
 80a302e:	4a9c      	ldr	r2, [pc, #624]	; (80a32a0 <_strtod_l+0xb10>)
 80a3030:	4293      	cmp	r3, r2
 80a3032:	d12c      	bne.n	80a308e <_strtod_l+0x8fe>
 80a3034:	9b05      	ldr	r3, [sp, #20]
 80a3036:	4640      	mov	r0, r8
 80a3038:	b303      	cbz	r3, 80a307c <_strtod_l+0x8ec>
 80a303a:	464b      	mov	r3, r9
 80a303c:	4a99      	ldr	r2, [pc, #612]	; (80a32a4 <_strtod_l+0xb14>)
 80a303e:	f04f 31ff 	mov.w	r1, #4294967295
 80a3042:	401a      	ands	r2, r3
 80a3044:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80a3048:	d81b      	bhi.n	80a3082 <_strtod_l+0x8f2>
 80a304a:	0d12      	lsrs	r2, r2, #20
 80a304c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80a3050:	fa01 f303 	lsl.w	r3, r1, r3
 80a3054:	4298      	cmp	r0, r3
 80a3056:	d11a      	bne.n	80a308e <_strtod_l+0x8fe>
 80a3058:	4b93      	ldr	r3, [pc, #588]	; (80a32a8 <_strtod_l+0xb18>)
 80a305a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a305c:	429a      	cmp	r2, r3
 80a305e:	d102      	bne.n	80a3066 <_strtod_l+0x8d6>
 80a3060:	3001      	adds	r0, #1
 80a3062:	f43f add8 	beq.w	80a2c16 <_strtod_l+0x486>
 80a3066:	f04f 0800 	mov.w	r8, #0
 80a306a:	4b8e      	ldr	r3, [pc, #568]	; (80a32a4 <_strtod_l+0xb14>)
 80a306c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a306e:	401a      	ands	r2, r3
 80a3070:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80a3074:	9b05      	ldr	r3, [sp, #20]
 80a3076:	2b00      	cmp	r3, #0
 80a3078:	d196      	bne.n	80a2fa8 <_strtod_l+0x818>
 80a307a:	e5d7      	b.n	80a2c2c <_strtod_l+0x49c>
 80a307c:	f04f 33ff 	mov.w	r3, #4294967295
 80a3080:	e7e8      	b.n	80a3054 <_strtod_l+0x8c4>
 80a3082:	460b      	mov	r3, r1
 80a3084:	e7e6      	b.n	80a3054 <_strtod_l+0x8c4>
 80a3086:	ea53 0308 	orrs.w	r3, r3, r8
 80a308a:	f43f af7d 	beq.w	80a2f88 <_strtod_l+0x7f8>
 80a308e:	b1e5      	cbz	r5, 80a30ca <_strtod_l+0x93a>
 80a3090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a3092:	421d      	tst	r5, r3
 80a3094:	d0ee      	beq.n	80a3074 <_strtod_l+0x8e4>
 80a3096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a3098:	4640      	mov	r0, r8
 80a309a:	4649      	mov	r1, r9
 80a309c:	9a05      	ldr	r2, [sp, #20]
 80a309e:	b1c3      	cbz	r3, 80a30d2 <_strtod_l+0x942>
 80a30a0:	f7ff fb55 	bl	80a274e <sulp>
 80a30a4:	4602      	mov	r2, r0
 80a30a6:	460b      	mov	r3, r1
 80a30a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a30ac:	f7fe fcbc 	bl	80a1a28 <__adddf3>
 80a30b0:	4680      	mov	r8, r0
 80a30b2:	4689      	mov	r9, r1
 80a30b4:	e7de      	b.n	80a3074 <_strtod_l+0x8e4>
 80a30b6:	4013      	ands	r3, r2
 80a30b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a30bc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a30c0:	f04f 38ff 	mov.w	r8, #4294967295
 80a30c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a30c8:	e7d4      	b.n	80a3074 <_strtod_l+0x8e4>
 80a30ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a30cc:	ea13 0f08 	tst.w	r3, r8
 80a30d0:	e7e0      	b.n	80a3094 <_strtod_l+0x904>
 80a30d2:	f7ff fb3c 	bl	80a274e <sulp>
 80a30d6:	4602      	mov	r2, r0
 80a30d8:	460b      	mov	r3, r1
 80a30da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a30de:	f7fe fca1 	bl	80a1a24 <__aeabi_dsub>
 80a30e2:	2200      	movs	r2, #0
 80a30e4:	2300      	movs	r3, #0
 80a30e6:	4680      	mov	r8, r0
 80a30e8:	4689      	mov	r9, r1
 80a30ea:	f7ff f8bb 	bl	80a2264 <__aeabi_dcmpeq>
 80a30ee:	2800      	cmp	r0, #0
 80a30f0:	d0c0      	beq.n	80a3074 <_strtod_l+0x8e4>
 80a30f2:	e602      	b.n	80a2cfa <_strtod_l+0x56a>
 80a30f4:	4658      	mov	r0, fp
 80a30f6:	9904      	ldr	r1, [sp, #16]
 80a30f8:	f001 f877 	bl	80a41ea <__ratio>
 80a30fc:	2200      	movs	r2, #0
 80a30fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a3102:	4606      	mov	r6, r0
 80a3104:	460f      	mov	r7, r1
 80a3106:	f7ff f8c1 	bl	80a228c <__aeabi_dcmple>
 80a310a:	2800      	cmp	r0, #0
 80a310c:	d075      	beq.n	80a31fa <_strtod_l+0xa6a>
 80a310e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a3110:	2b00      	cmp	r3, #0
 80a3112:	d047      	beq.n	80a31a4 <_strtod_l+0xa14>
 80a3114:	2600      	movs	r6, #0
 80a3116:	4f65      	ldr	r7, [pc, #404]	; (80a32ac <_strtod_l+0xb1c>)
 80a3118:	4d64      	ldr	r5, [pc, #400]	; (80a32ac <_strtod_l+0xb1c>)
 80a311a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a311c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80a3120:	0d1b      	lsrs	r3, r3, #20
 80a3122:	051b      	lsls	r3, r3, #20
 80a3124:	930f      	str	r3, [sp, #60]	; 0x3c
 80a3126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a3128:	4b61      	ldr	r3, [pc, #388]	; (80a32b0 <_strtod_l+0xb20>)
 80a312a:	429a      	cmp	r2, r3
 80a312c:	f040 80c8 	bne.w	80a32c0 <_strtod_l+0xb30>
 80a3130:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a3134:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80a3138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a313a:	4640      	mov	r0, r8
 80a313c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80a3140:	4649      	mov	r1, r9
 80a3142:	f000 ff89 	bl	80a4058 <__ulp>
 80a3146:	4602      	mov	r2, r0
 80a3148:	460b      	mov	r3, r1
 80a314a:	4630      	mov	r0, r6
 80a314c:	4639      	mov	r1, r7
 80a314e:	f7fe fe21 	bl	80a1d94 <__aeabi_dmul>
 80a3152:	4642      	mov	r2, r8
 80a3154:	464b      	mov	r3, r9
 80a3156:	f7fe fc67 	bl	80a1a28 <__adddf3>
 80a315a:	460b      	mov	r3, r1
 80a315c:	4951      	ldr	r1, [pc, #324]	; (80a32a4 <_strtod_l+0xb14>)
 80a315e:	4a55      	ldr	r2, [pc, #340]	; (80a32b4 <_strtod_l+0xb24>)
 80a3160:	4019      	ands	r1, r3
 80a3162:	4291      	cmp	r1, r2
 80a3164:	4680      	mov	r8, r0
 80a3166:	d95e      	bls.n	80a3226 <_strtod_l+0xa96>
 80a3168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a316a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80a316e:	4293      	cmp	r3, r2
 80a3170:	d103      	bne.n	80a317a <_strtod_l+0x9ea>
 80a3172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3174:	3301      	adds	r3, #1
 80a3176:	f43f ad4e 	beq.w	80a2c16 <_strtod_l+0x486>
 80a317a:	f04f 38ff 	mov.w	r8, #4294967295
 80a317e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80a32a8 <_strtod_l+0xb18>
 80a3182:	4650      	mov	r0, sl
 80a3184:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a3186:	f000 fc9d 	bl	80a3ac4 <_Bfree>
 80a318a:	4650      	mov	r0, sl
 80a318c:	9906      	ldr	r1, [sp, #24]
 80a318e:	f000 fc99 	bl	80a3ac4 <_Bfree>
 80a3192:	4650      	mov	r0, sl
 80a3194:	9904      	ldr	r1, [sp, #16]
 80a3196:	f000 fc95 	bl	80a3ac4 <_Bfree>
 80a319a:	4659      	mov	r1, fp
 80a319c:	4650      	mov	r0, sl
 80a319e:	f000 fc91 	bl	80a3ac4 <_Bfree>
 80a31a2:	e61c      	b.n	80a2dde <_strtod_l+0x64e>
 80a31a4:	f1b8 0f00 	cmp.w	r8, #0
 80a31a8:	d119      	bne.n	80a31de <_strtod_l+0xa4e>
 80a31aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a31ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a31b0:	b9e3      	cbnz	r3, 80a31ec <_strtod_l+0xa5c>
 80a31b2:	2200      	movs	r2, #0
 80a31b4:	4630      	mov	r0, r6
 80a31b6:	4639      	mov	r1, r7
 80a31b8:	4b3c      	ldr	r3, [pc, #240]	; (80a32ac <_strtod_l+0xb1c>)
 80a31ba:	f7ff f85d 	bl	80a2278 <__aeabi_dcmplt>
 80a31be:	b9c8      	cbnz	r0, 80a31f4 <_strtod_l+0xa64>
 80a31c0:	2200      	movs	r2, #0
 80a31c2:	4630      	mov	r0, r6
 80a31c4:	4639      	mov	r1, r7
 80a31c6:	4b3c      	ldr	r3, [pc, #240]	; (80a32b8 <_strtod_l+0xb28>)
 80a31c8:	f7fe fde4 	bl	80a1d94 <__aeabi_dmul>
 80a31cc:	4604      	mov	r4, r0
 80a31ce:	460d      	mov	r5, r1
 80a31d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a31d4:	9418      	str	r4, [sp, #96]	; 0x60
 80a31d6:	9319      	str	r3, [sp, #100]	; 0x64
 80a31d8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80a31dc:	e79d      	b.n	80a311a <_strtod_l+0x98a>
 80a31de:	f1b8 0f01 	cmp.w	r8, #1
 80a31e2:	d103      	bne.n	80a31ec <_strtod_l+0xa5c>
 80a31e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a31e6:	2b00      	cmp	r3, #0
 80a31e8:	f43f ad87 	beq.w	80a2cfa <_strtod_l+0x56a>
 80a31ec:	2600      	movs	r6, #0
 80a31ee:	2400      	movs	r4, #0
 80a31f0:	4f32      	ldr	r7, [pc, #200]	; (80a32bc <_strtod_l+0xb2c>)
 80a31f2:	e791      	b.n	80a3118 <_strtod_l+0x988>
 80a31f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80a31f6:	4d30      	ldr	r5, [pc, #192]	; (80a32b8 <_strtod_l+0xb28>)
 80a31f8:	e7ea      	b.n	80a31d0 <_strtod_l+0xa40>
 80a31fa:	4b2f      	ldr	r3, [pc, #188]	; (80a32b8 <_strtod_l+0xb28>)
 80a31fc:	2200      	movs	r2, #0
 80a31fe:	4630      	mov	r0, r6
 80a3200:	4639      	mov	r1, r7
 80a3202:	f7fe fdc7 	bl	80a1d94 <__aeabi_dmul>
 80a3206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a3208:	4604      	mov	r4, r0
 80a320a:	460d      	mov	r5, r1
 80a320c:	b933      	cbnz	r3, 80a321c <_strtod_l+0xa8c>
 80a320e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a3212:	9010      	str	r0, [sp, #64]	; 0x40
 80a3214:	9311      	str	r3, [sp, #68]	; 0x44
 80a3216:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a321a:	e77e      	b.n	80a311a <_strtod_l+0x98a>
 80a321c:	4602      	mov	r2, r0
 80a321e:	460b      	mov	r3, r1
 80a3220:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a3224:	e7f7      	b.n	80a3216 <_strtod_l+0xa86>
 80a3226:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80a322a:	9b05      	ldr	r3, [sp, #20]
 80a322c:	2b00      	cmp	r3, #0
 80a322e:	d1a8      	bne.n	80a3182 <_strtod_l+0x9f2>
 80a3230:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a3234:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a3236:	0d1b      	lsrs	r3, r3, #20
 80a3238:	051b      	lsls	r3, r3, #20
 80a323a:	429a      	cmp	r2, r3
 80a323c:	d1a1      	bne.n	80a3182 <_strtod_l+0x9f2>
 80a323e:	4620      	mov	r0, r4
 80a3240:	4629      	mov	r1, r5
 80a3242:	f001 f867 	bl	80a4314 <__aeabi_d2lz>
 80a3246:	f7fe fd77 	bl	80a1d38 <__aeabi_l2d>
 80a324a:	4602      	mov	r2, r0
 80a324c:	460b      	mov	r3, r1
 80a324e:	4620      	mov	r0, r4
 80a3250:	4629      	mov	r1, r5
 80a3252:	f7fe fbe7 	bl	80a1a24 <__aeabi_dsub>
 80a3256:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a3258:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a325c:	ea43 0308 	orr.w	r3, r3, r8
 80a3260:	4313      	orrs	r3, r2
 80a3262:	4604      	mov	r4, r0
 80a3264:	460d      	mov	r5, r1
 80a3266:	d066      	beq.n	80a3336 <_strtod_l+0xba6>
 80a3268:	a309      	add	r3, pc, #36	; (adr r3, 80a3290 <_strtod_l+0xb00>)
 80a326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a326e:	f7ff f803 	bl	80a2278 <__aeabi_dcmplt>
 80a3272:	2800      	cmp	r0, #0
 80a3274:	f47f acda 	bne.w	80a2c2c <_strtod_l+0x49c>
 80a3278:	a307      	add	r3, pc, #28	; (adr r3, 80a3298 <_strtod_l+0xb08>)
 80a327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a327e:	4620      	mov	r0, r4
 80a3280:	4629      	mov	r1, r5
 80a3282:	f7ff f817 	bl	80a22b4 <__aeabi_dcmpgt>
 80a3286:	2800      	cmp	r0, #0
 80a3288:	f43f af7b 	beq.w	80a3182 <_strtod_l+0x9f2>
 80a328c:	e4ce      	b.n	80a2c2c <_strtod_l+0x49c>
 80a328e:	bf00      	nop
 80a3290:	94a03595 	.word	0x94a03595
 80a3294:	3fdfffff 	.word	0x3fdfffff
 80a3298:	35afe535 	.word	0x35afe535
 80a329c:	3fe00000 	.word	0x3fe00000
 80a32a0:	000fffff 	.word	0x000fffff
 80a32a4:	7ff00000 	.word	0x7ff00000
 80a32a8:	7fefffff 	.word	0x7fefffff
 80a32ac:	3ff00000 	.word	0x3ff00000
 80a32b0:	7fe00000 	.word	0x7fe00000
 80a32b4:	7c9fffff 	.word	0x7c9fffff
 80a32b8:	3fe00000 	.word	0x3fe00000
 80a32bc:	bff00000 	.word	0xbff00000
 80a32c0:	9b05      	ldr	r3, [sp, #20]
 80a32c2:	b313      	cbz	r3, 80a330a <_strtod_l+0xb7a>
 80a32c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a32c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a32ca:	d81e      	bhi.n	80a330a <_strtod_l+0xb7a>
 80a32cc:	a326      	add	r3, pc, #152	; (adr r3, 80a3368 <_strtod_l+0xbd8>)
 80a32ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a32d2:	4620      	mov	r0, r4
 80a32d4:	4629      	mov	r1, r5
 80a32d6:	f7fe ffd9 	bl	80a228c <__aeabi_dcmple>
 80a32da:	b190      	cbz	r0, 80a3302 <_strtod_l+0xb72>
 80a32dc:	4629      	mov	r1, r5
 80a32de:	4620      	mov	r0, r4
 80a32e0:	f7fe fff2 	bl	80a22c8 <__aeabi_d2uiz>
 80a32e4:	2801      	cmp	r0, #1
 80a32e6:	bf38      	it	cc
 80a32e8:	2001      	movcc	r0, #1
 80a32ea:	f7fe fcd9 	bl	80a1ca0 <__aeabi_ui2d>
 80a32ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a32f0:	4604      	mov	r4, r0
 80a32f2:	460d      	mov	r5, r1
 80a32f4:	b9d3      	cbnz	r3, 80a332c <_strtod_l+0xb9c>
 80a32f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a32fa:	9012      	str	r0, [sp, #72]	; 0x48
 80a32fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80a32fe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80a3302:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a3304:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a3308:	1a9f      	subs	r7, r3, r2
 80a330a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a330e:	f000 fea3 	bl	80a4058 <__ulp>
 80a3312:	4602      	mov	r2, r0
 80a3314:	460b      	mov	r3, r1
 80a3316:	4630      	mov	r0, r6
 80a3318:	4639      	mov	r1, r7
 80a331a:	f7fe fd3b 	bl	80a1d94 <__aeabi_dmul>
 80a331e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a3322:	f7fe fb81 	bl	80a1a28 <__adddf3>
 80a3326:	4680      	mov	r8, r0
 80a3328:	4689      	mov	r9, r1
 80a332a:	e77e      	b.n	80a322a <_strtod_l+0xa9a>
 80a332c:	4602      	mov	r2, r0
 80a332e:	460b      	mov	r3, r1
 80a3330:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80a3334:	e7e3      	b.n	80a32fe <_strtod_l+0xb6e>
 80a3336:	a30e      	add	r3, pc, #56	; (adr r3, 80a3370 <_strtod_l+0xbe0>)
 80a3338:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a333c:	f7fe ff9c 	bl	80a2278 <__aeabi_dcmplt>
 80a3340:	e7a1      	b.n	80a3286 <_strtod_l+0xaf6>
 80a3342:	2300      	movs	r3, #0
 80a3344:	930c      	str	r3, [sp, #48]	; 0x30
 80a3346:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a3348:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a334a:	6013      	str	r3, [r2, #0]
 80a334c:	f7ff ba65 	b.w	80a281a <_strtod_l+0x8a>
 80a3350:	2b65      	cmp	r3, #101	; 0x65
 80a3352:	f43f ab5c 	beq.w	80a2a0e <_strtod_l+0x27e>
 80a3356:	2b45      	cmp	r3, #69	; 0x45
 80a3358:	f43f ab59 	beq.w	80a2a0e <_strtod_l+0x27e>
 80a335c:	2201      	movs	r2, #1
 80a335e:	f7ff bb8d 	b.w	80a2a7c <_strtod_l+0x2ec>
 80a3362:	bf00      	nop
 80a3364:	f3af 8000 	nop.w
 80a3368:	ffc00000 	.word	0xffc00000
 80a336c:	41dfffff 	.word	0x41dfffff
 80a3370:	94a03595 	.word	0x94a03595
 80a3374:	3fcfffff 	.word	0x3fcfffff

080a3378 <strtod>:
 80a3378:	460a      	mov	r2, r1
 80a337a:	4601      	mov	r1, r0
 80a337c:	4802      	ldr	r0, [pc, #8]	; (80a3388 <strtod+0x10>)
 80a337e:	4b03      	ldr	r3, [pc, #12]	; (80a338c <strtod+0x14>)
 80a3380:	6800      	ldr	r0, [r0, #0]
 80a3382:	f7ff ba05 	b.w	80a2790 <_strtod_l>
 80a3386:	bf00      	nop
 80a3388:	20000030 	.word	0x20000030
 80a338c:	20000098 	.word	0x20000098

080a3390 <rshift>:
 80a3390:	6903      	ldr	r3, [r0, #16]
 80a3392:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3396:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80a339a:	f100 0414 	add.w	r4, r0, #20
 80a339e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80a33a2:	dd46      	ble.n	80a3432 <rshift+0xa2>
 80a33a4:	f011 011f 	ands.w	r1, r1, #31
 80a33a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80a33ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80a33b0:	d10c      	bne.n	80a33cc <rshift+0x3c>
 80a33b2:	4629      	mov	r1, r5
 80a33b4:	f100 0710 	add.w	r7, r0, #16
 80a33b8:	42b1      	cmp	r1, r6
 80a33ba:	d335      	bcc.n	80a3428 <rshift+0x98>
 80a33bc:	1a9b      	subs	r3, r3, r2
 80a33be:	009b      	lsls	r3, r3, #2
 80a33c0:	1eea      	subs	r2, r5, #3
 80a33c2:	4296      	cmp	r6, r2
 80a33c4:	bf38      	it	cc
 80a33c6:	2300      	movcc	r3, #0
 80a33c8:	4423      	add	r3, r4
 80a33ca:	e015      	b.n	80a33f8 <rshift+0x68>
 80a33cc:	46a1      	mov	r9, r4
 80a33ce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80a33d2:	f1c1 0820 	rsb	r8, r1, #32
 80a33d6:	40cf      	lsrs	r7, r1
 80a33d8:	f105 0e04 	add.w	lr, r5, #4
 80a33dc:	4576      	cmp	r6, lr
 80a33de:	46f4      	mov	ip, lr
 80a33e0:	d816      	bhi.n	80a3410 <rshift+0x80>
 80a33e2:	1a9b      	subs	r3, r3, r2
 80a33e4:	009a      	lsls	r2, r3, #2
 80a33e6:	3a04      	subs	r2, #4
 80a33e8:	3501      	adds	r5, #1
 80a33ea:	42ae      	cmp	r6, r5
 80a33ec:	bf38      	it	cc
 80a33ee:	2200      	movcc	r2, #0
 80a33f0:	18a3      	adds	r3, r4, r2
 80a33f2:	50a7      	str	r7, [r4, r2]
 80a33f4:	b107      	cbz	r7, 80a33f8 <rshift+0x68>
 80a33f6:	3304      	adds	r3, #4
 80a33f8:	42a3      	cmp	r3, r4
 80a33fa:	eba3 0204 	sub.w	r2, r3, r4
 80a33fe:	bf08      	it	eq
 80a3400:	2300      	moveq	r3, #0
 80a3402:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80a3406:	6102      	str	r2, [r0, #16]
 80a3408:	bf08      	it	eq
 80a340a:	6143      	streq	r3, [r0, #20]
 80a340c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3410:	f8dc c000 	ldr.w	ip, [ip]
 80a3414:	fa0c fc08 	lsl.w	ip, ip, r8
 80a3418:	ea4c 0707 	orr.w	r7, ip, r7
 80a341c:	f849 7b04 	str.w	r7, [r9], #4
 80a3420:	f85e 7b04 	ldr.w	r7, [lr], #4
 80a3424:	40cf      	lsrs	r7, r1
 80a3426:	e7d9      	b.n	80a33dc <rshift+0x4c>
 80a3428:	f851 cb04 	ldr.w	ip, [r1], #4
 80a342c:	f847 cf04 	str.w	ip, [r7, #4]!
 80a3430:	e7c2      	b.n	80a33b8 <rshift+0x28>
 80a3432:	4623      	mov	r3, r4
 80a3434:	e7e0      	b.n	80a33f8 <rshift+0x68>

080a3436 <__hexdig_fun>:
 80a3436:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a343a:	2b09      	cmp	r3, #9
 80a343c:	d802      	bhi.n	80a3444 <__hexdig_fun+0xe>
 80a343e:	3820      	subs	r0, #32
 80a3440:	b2c0      	uxtb	r0, r0
 80a3442:	4770      	bx	lr
 80a3444:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a3448:	2b05      	cmp	r3, #5
 80a344a:	d801      	bhi.n	80a3450 <__hexdig_fun+0x1a>
 80a344c:	3847      	subs	r0, #71	; 0x47
 80a344e:	e7f7      	b.n	80a3440 <__hexdig_fun+0xa>
 80a3450:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a3454:	2b05      	cmp	r3, #5
 80a3456:	d801      	bhi.n	80a345c <__hexdig_fun+0x26>
 80a3458:	3827      	subs	r0, #39	; 0x27
 80a345a:	e7f1      	b.n	80a3440 <__hexdig_fun+0xa>
 80a345c:	2000      	movs	r0, #0
 80a345e:	4770      	bx	lr

080a3460 <__gethex>:
 80a3460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3464:	b08b      	sub	sp, #44	; 0x2c
 80a3466:	9306      	str	r3, [sp, #24]
 80a3468:	4bba      	ldr	r3, [pc, #744]	; (80a3754 <__gethex+0x2f4>)
 80a346a:	9002      	str	r0, [sp, #8]
 80a346c:	681b      	ldr	r3, [r3, #0]
 80a346e:	468b      	mov	fp, r1
 80a3470:	4618      	mov	r0, r3
 80a3472:	4690      	mov	r8, r2
 80a3474:	9303      	str	r3, [sp, #12]
 80a3476:	f7ff f950 	bl	80a271a <strlen>
 80a347a:	4682      	mov	sl, r0
 80a347c:	9b03      	ldr	r3, [sp, #12]
 80a347e:	f8db 2000 	ldr.w	r2, [fp]
 80a3482:	4403      	add	r3, r0
 80a3484:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a3488:	9307      	str	r3, [sp, #28]
 80a348a:	1c93      	adds	r3, r2, #2
 80a348c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80a3490:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80a3494:	32fe      	adds	r2, #254	; 0xfe
 80a3496:	18d1      	adds	r1, r2, r3
 80a3498:	461f      	mov	r7, r3
 80a349a:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a349e:	9101      	str	r1, [sp, #4]
 80a34a0:	2830      	cmp	r0, #48	; 0x30
 80a34a2:	d0f8      	beq.n	80a3496 <__gethex+0x36>
 80a34a4:	f7ff ffc7 	bl	80a3436 <__hexdig_fun>
 80a34a8:	4604      	mov	r4, r0
 80a34aa:	2800      	cmp	r0, #0
 80a34ac:	d13a      	bne.n	80a3524 <__gethex+0xc4>
 80a34ae:	4652      	mov	r2, sl
 80a34b0:	4638      	mov	r0, r7
 80a34b2:	9903      	ldr	r1, [sp, #12]
 80a34b4:	f7ff f939 	bl	80a272a <strncmp>
 80a34b8:	4605      	mov	r5, r0
 80a34ba:	2800      	cmp	r0, #0
 80a34bc:	d166      	bne.n	80a358c <__gethex+0x12c>
 80a34be:	f817 000a 	ldrb.w	r0, [r7, sl]
 80a34c2:	eb07 060a 	add.w	r6, r7, sl
 80a34c6:	f7ff ffb6 	bl	80a3436 <__hexdig_fun>
 80a34ca:	2800      	cmp	r0, #0
 80a34cc:	d060      	beq.n	80a3590 <__gethex+0x130>
 80a34ce:	4633      	mov	r3, r6
 80a34d0:	7818      	ldrb	r0, [r3, #0]
 80a34d2:	461f      	mov	r7, r3
 80a34d4:	2830      	cmp	r0, #48	; 0x30
 80a34d6:	f103 0301 	add.w	r3, r3, #1
 80a34da:	d0f9      	beq.n	80a34d0 <__gethex+0x70>
 80a34dc:	f7ff ffab 	bl	80a3436 <__hexdig_fun>
 80a34e0:	2301      	movs	r3, #1
 80a34e2:	fab0 f480 	clz	r4, r0
 80a34e6:	4635      	mov	r5, r6
 80a34e8:	0964      	lsrs	r4, r4, #5
 80a34ea:	9301      	str	r3, [sp, #4]
 80a34ec:	463a      	mov	r2, r7
 80a34ee:	4616      	mov	r6, r2
 80a34f0:	7830      	ldrb	r0, [r6, #0]
 80a34f2:	3201      	adds	r2, #1
 80a34f4:	f7ff ff9f 	bl	80a3436 <__hexdig_fun>
 80a34f8:	2800      	cmp	r0, #0
 80a34fa:	d1f8      	bne.n	80a34ee <__gethex+0x8e>
 80a34fc:	4652      	mov	r2, sl
 80a34fe:	4630      	mov	r0, r6
 80a3500:	9903      	ldr	r1, [sp, #12]
 80a3502:	f7ff f912 	bl	80a272a <strncmp>
 80a3506:	b980      	cbnz	r0, 80a352a <__gethex+0xca>
 80a3508:	b94d      	cbnz	r5, 80a351e <__gethex+0xbe>
 80a350a:	eb06 050a 	add.w	r5, r6, sl
 80a350e:	462a      	mov	r2, r5
 80a3510:	4616      	mov	r6, r2
 80a3512:	7830      	ldrb	r0, [r6, #0]
 80a3514:	3201      	adds	r2, #1
 80a3516:	f7ff ff8e 	bl	80a3436 <__hexdig_fun>
 80a351a:	2800      	cmp	r0, #0
 80a351c:	d1f8      	bne.n	80a3510 <__gethex+0xb0>
 80a351e:	1bad      	subs	r5, r5, r6
 80a3520:	00ad      	lsls	r5, r5, #2
 80a3522:	e004      	b.n	80a352e <__gethex+0xce>
 80a3524:	2400      	movs	r4, #0
 80a3526:	4625      	mov	r5, r4
 80a3528:	e7e0      	b.n	80a34ec <__gethex+0x8c>
 80a352a:	2d00      	cmp	r5, #0
 80a352c:	d1f7      	bne.n	80a351e <__gethex+0xbe>
 80a352e:	7833      	ldrb	r3, [r6, #0]
 80a3530:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80a3534:	2b50      	cmp	r3, #80	; 0x50
 80a3536:	d139      	bne.n	80a35ac <__gethex+0x14c>
 80a3538:	7873      	ldrb	r3, [r6, #1]
 80a353a:	2b2b      	cmp	r3, #43	; 0x2b
 80a353c:	d02a      	beq.n	80a3594 <__gethex+0x134>
 80a353e:	2b2d      	cmp	r3, #45	; 0x2d
 80a3540:	d02c      	beq.n	80a359c <__gethex+0x13c>
 80a3542:	f04f 0900 	mov.w	r9, #0
 80a3546:	1c71      	adds	r1, r6, #1
 80a3548:	7808      	ldrb	r0, [r1, #0]
 80a354a:	f7ff ff74 	bl	80a3436 <__hexdig_fun>
 80a354e:	1e43      	subs	r3, r0, #1
 80a3550:	b2db      	uxtb	r3, r3
 80a3552:	2b18      	cmp	r3, #24
 80a3554:	d82a      	bhi.n	80a35ac <__gethex+0x14c>
 80a3556:	f1a0 0210 	sub.w	r2, r0, #16
 80a355a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a355e:	f7ff ff6a 	bl	80a3436 <__hexdig_fun>
 80a3562:	1e43      	subs	r3, r0, #1
 80a3564:	b2db      	uxtb	r3, r3
 80a3566:	2b18      	cmp	r3, #24
 80a3568:	d91b      	bls.n	80a35a2 <__gethex+0x142>
 80a356a:	f1b9 0f00 	cmp.w	r9, #0
 80a356e:	d000      	beq.n	80a3572 <__gethex+0x112>
 80a3570:	4252      	negs	r2, r2
 80a3572:	4415      	add	r5, r2
 80a3574:	f8cb 1000 	str.w	r1, [fp]
 80a3578:	b1d4      	cbz	r4, 80a35b0 <__gethex+0x150>
 80a357a:	9b01      	ldr	r3, [sp, #4]
 80a357c:	2b00      	cmp	r3, #0
 80a357e:	bf14      	ite	ne
 80a3580:	2700      	movne	r7, #0
 80a3582:	2706      	moveq	r7, #6
 80a3584:	4638      	mov	r0, r7
 80a3586:	b00b      	add	sp, #44	; 0x2c
 80a3588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a358c:	463e      	mov	r6, r7
 80a358e:	4625      	mov	r5, r4
 80a3590:	2401      	movs	r4, #1
 80a3592:	e7cc      	b.n	80a352e <__gethex+0xce>
 80a3594:	f04f 0900 	mov.w	r9, #0
 80a3598:	1cb1      	adds	r1, r6, #2
 80a359a:	e7d5      	b.n	80a3548 <__gethex+0xe8>
 80a359c:	f04f 0901 	mov.w	r9, #1
 80a35a0:	e7fa      	b.n	80a3598 <__gethex+0x138>
 80a35a2:	230a      	movs	r3, #10
 80a35a4:	fb03 0202 	mla	r2, r3, r2, r0
 80a35a8:	3a10      	subs	r2, #16
 80a35aa:	e7d6      	b.n	80a355a <__gethex+0xfa>
 80a35ac:	4631      	mov	r1, r6
 80a35ae:	e7e1      	b.n	80a3574 <__gethex+0x114>
 80a35b0:	4621      	mov	r1, r4
 80a35b2:	1bf3      	subs	r3, r6, r7
 80a35b4:	3b01      	subs	r3, #1
 80a35b6:	2b07      	cmp	r3, #7
 80a35b8:	dc50      	bgt.n	80a365c <__gethex+0x1fc>
 80a35ba:	9802      	ldr	r0, [sp, #8]
 80a35bc:	f000 fa4e 	bl	80a3a5c <_Balloc>
 80a35c0:	f04f 0b00 	mov.w	fp, #0
 80a35c4:	4604      	mov	r4, r0
 80a35c6:	f100 0914 	add.w	r9, r0, #20
 80a35ca:	f1ca 0301 	rsb	r3, sl, #1
 80a35ce:	f8cd 9010 	str.w	r9, [sp, #16]
 80a35d2:	f8cd b004 	str.w	fp, [sp, #4]
 80a35d6:	9308      	str	r3, [sp, #32]
 80a35d8:	42b7      	cmp	r7, r6
 80a35da:	d342      	bcc.n	80a3662 <__gethex+0x202>
 80a35dc:	9f04      	ldr	r7, [sp, #16]
 80a35de:	9b01      	ldr	r3, [sp, #4]
 80a35e0:	f847 3b04 	str.w	r3, [r7], #4
 80a35e4:	eba7 0709 	sub.w	r7, r7, r9
 80a35e8:	10bf      	asrs	r7, r7, #2
 80a35ea:	6127      	str	r7, [r4, #16]
 80a35ec:	4618      	mov	r0, r3
 80a35ee:	f000 fafc 	bl	80a3bea <__hi0bits>
 80a35f2:	017f      	lsls	r7, r7, #5
 80a35f4:	f8d8 6000 	ldr.w	r6, [r8]
 80a35f8:	1a3f      	subs	r7, r7, r0
 80a35fa:	42b7      	cmp	r7, r6
 80a35fc:	dd65      	ble.n	80a36ca <__gethex+0x26a>
 80a35fe:	1bbf      	subs	r7, r7, r6
 80a3600:	4639      	mov	r1, r7
 80a3602:	4620      	mov	r0, r4
 80a3604:	f000 fe42 	bl	80a428c <__any_on>
 80a3608:	4682      	mov	sl, r0
 80a360a:	b1a8      	cbz	r0, 80a3638 <__gethex+0x1d8>
 80a360c:	f04f 0a01 	mov.w	sl, #1
 80a3610:	1e7b      	subs	r3, r7, #1
 80a3612:	1159      	asrs	r1, r3, #5
 80a3614:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80a3618:	f003 021f 	and.w	r2, r3, #31
 80a361c:	fa0a f202 	lsl.w	r2, sl, r2
 80a3620:	420a      	tst	r2, r1
 80a3622:	d009      	beq.n	80a3638 <__gethex+0x1d8>
 80a3624:	4553      	cmp	r3, sl
 80a3626:	dd05      	ble.n	80a3634 <__gethex+0x1d4>
 80a3628:	4620      	mov	r0, r4
 80a362a:	1eb9      	subs	r1, r7, #2
 80a362c:	f000 fe2e 	bl	80a428c <__any_on>
 80a3630:	2800      	cmp	r0, #0
 80a3632:	d147      	bne.n	80a36c4 <__gethex+0x264>
 80a3634:	f04f 0a02 	mov.w	sl, #2
 80a3638:	4639      	mov	r1, r7
 80a363a:	4620      	mov	r0, r4
 80a363c:	f7ff fea8 	bl	80a3390 <rshift>
 80a3640:	443d      	add	r5, r7
 80a3642:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a3646:	42ab      	cmp	r3, r5
 80a3648:	da4d      	bge.n	80a36e6 <__gethex+0x286>
 80a364a:	4621      	mov	r1, r4
 80a364c:	9802      	ldr	r0, [sp, #8]
 80a364e:	f000 fa39 	bl	80a3ac4 <_Bfree>
 80a3652:	2300      	movs	r3, #0
 80a3654:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a3656:	27a3      	movs	r7, #163	; 0xa3
 80a3658:	6013      	str	r3, [r2, #0]
 80a365a:	e793      	b.n	80a3584 <__gethex+0x124>
 80a365c:	3101      	adds	r1, #1
 80a365e:	105b      	asrs	r3, r3, #1
 80a3660:	e7a9      	b.n	80a35b6 <__gethex+0x156>
 80a3662:	1e73      	subs	r3, r6, #1
 80a3664:	9a07      	ldr	r2, [sp, #28]
 80a3666:	9305      	str	r3, [sp, #20]
 80a3668:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a366c:	4293      	cmp	r3, r2
 80a366e:	d019      	beq.n	80a36a4 <__gethex+0x244>
 80a3670:	f1bb 0f20 	cmp.w	fp, #32
 80a3674:	d107      	bne.n	80a3686 <__gethex+0x226>
 80a3676:	9b04      	ldr	r3, [sp, #16]
 80a3678:	9a01      	ldr	r2, [sp, #4]
 80a367a:	f843 2b04 	str.w	r2, [r3], #4
 80a367e:	9304      	str	r3, [sp, #16]
 80a3680:	2300      	movs	r3, #0
 80a3682:	469b      	mov	fp, r3
 80a3684:	9301      	str	r3, [sp, #4]
 80a3686:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a368a:	f7ff fed4 	bl	80a3436 <__hexdig_fun>
 80a368e:	9b01      	ldr	r3, [sp, #4]
 80a3690:	f000 000f 	and.w	r0, r0, #15
 80a3694:	fa00 f00b 	lsl.w	r0, r0, fp
 80a3698:	4303      	orrs	r3, r0
 80a369a:	9301      	str	r3, [sp, #4]
 80a369c:	f10b 0b04 	add.w	fp, fp, #4
 80a36a0:	9b05      	ldr	r3, [sp, #20]
 80a36a2:	e00d      	b.n	80a36c0 <__gethex+0x260>
 80a36a4:	9b05      	ldr	r3, [sp, #20]
 80a36a6:	9a08      	ldr	r2, [sp, #32]
 80a36a8:	4413      	add	r3, r2
 80a36aa:	42bb      	cmp	r3, r7
 80a36ac:	d3e0      	bcc.n	80a3670 <__gethex+0x210>
 80a36ae:	4618      	mov	r0, r3
 80a36b0:	4652      	mov	r2, sl
 80a36b2:	9903      	ldr	r1, [sp, #12]
 80a36b4:	9309      	str	r3, [sp, #36]	; 0x24
 80a36b6:	f7ff f838 	bl	80a272a <strncmp>
 80a36ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a36bc:	2800      	cmp	r0, #0
 80a36be:	d1d7      	bne.n	80a3670 <__gethex+0x210>
 80a36c0:	461e      	mov	r6, r3
 80a36c2:	e789      	b.n	80a35d8 <__gethex+0x178>
 80a36c4:	f04f 0a03 	mov.w	sl, #3
 80a36c8:	e7b6      	b.n	80a3638 <__gethex+0x1d8>
 80a36ca:	da09      	bge.n	80a36e0 <__gethex+0x280>
 80a36cc:	1bf7      	subs	r7, r6, r7
 80a36ce:	4621      	mov	r1, r4
 80a36d0:	463a      	mov	r2, r7
 80a36d2:	9802      	ldr	r0, [sp, #8]
 80a36d4:	f000 fbca 	bl	80a3e6c <__lshift>
 80a36d8:	4604      	mov	r4, r0
 80a36da:	1bed      	subs	r5, r5, r7
 80a36dc:	f100 0914 	add.w	r9, r0, #20
 80a36e0:	f04f 0a00 	mov.w	sl, #0
 80a36e4:	e7ad      	b.n	80a3642 <__gethex+0x1e2>
 80a36e6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a36ea:	42a8      	cmp	r0, r5
 80a36ec:	dd6e      	ble.n	80a37cc <__gethex+0x36c>
 80a36ee:	1b45      	subs	r5, r0, r5
 80a36f0:	42ae      	cmp	r6, r5
 80a36f2:	dc31      	bgt.n	80a3758 <__gethex+0x2f8>
 80a36f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a36f8:	2b02      	cmp	r3, #2
 80a36fa:	d022      	beq.n	80a3742 <__gethex+0x2e2>
 80a36fc:	2b03      	cmp	r3, #3
 80a36fe:	d024      	beq.n	80a374a <__gethex+0x2ea>
 80a3700:	2b01      	cmp	r3, #1
 80a3702:	d115      	bne.n	80a3730 <__gethex+0x2d0>
 80a3704:	42ae      	cmp	r6, r5
 80a3706:	d113      	bne.n	80a3730 <__gethex+0x2d0>
 80a3708:	2e01      	cmp	r6, #1
 80a370a:	d10b      	bne.n	80a3724 <__gethex+0x2c4>
 80a370c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a3710:	9a06      	ldr	r2, [sp, #24]
 80a3712:	2762      	movs	r7, #98	; 0x62
 80a3714:	6013      	str	r3, [r2, #0]
 80a3716:	2301      	movs	r3, #1
 80a3718:	6123      	str	r3, [r4, #16]
 80a371a:	f8c9 3000 	str.w	r3, [r9]
 80a371e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a3720:	601c      	str	r4, [r3, #0]
 80a3722:	e72f      	b.n	80a3584 <__gethex+0x124>
 80a3724:	4620      	mov	r0, r4
 80a3726:	1e71      	subs	r1, r6, #1
 80a3728:	f000 fdb0 	bl	80a428c <__any_on>
 80a372c:	2800      	cmp	r0, #0
 80a372e:	d1ed      	bne.n	80a370c <__gethex+0x2ac>
 80a3730:	4621      	mov	r1, r4
 80a3732:	9802      	ldr	r0, [sp, #8]
 80a3734:	f000 f9c6 	bl	80a3ac4 <_Bfree>
 80a3738:	2300      	movs	r3, #0
 80a373a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a373c:	2750      	movs	r7, #80	; 0x50
 80a373e:	6013      	str	r3, [r2, #0]
 80a3740:	e720      	b.n	80a3584 <__gethex+0x124>
 80a3742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a3744:	2b00      	cmp	r3, #0
 80a3746:	d1f3      	bne.n	80a3730 <__gethex+0x2d0>
 80a3748:	e7e0      	b.n	80a370c <__gethex+0x2ac>
 80a374a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a374c:	2b00      	cmp	r3, #0
 80a374e:	d1dd      	bne.n	80a370c <__gethex+0x2ac>
 80a3750:	e7ee      	b.n	80a3730 <__gethex+0x2d0>
 80a3752:	bf00      	nop
 80a3754:	080a46ac 	.word	0x080a46ac
 80a3758:	1e6f      	subs	r7, r5, #1
 80a375a:	f1ba 0f00 	cmp.w	sl, #0
 80a375e:	d132      	bne.n	80a37c6 <__gethex+0x366>
 80a3760:	b127      	cbz	r7, 80a376c <__gethex+0x30c>
 80a3762:	4639      	mov	r1, r7
 80a3764:	4620      	mov	r0, r4
 80a3766:	f000 fd91 	bl	80a428c <__any_on>
 80a376a:	4682      	mov	sl, r0
 80a376c:	2101      	movs	r1, #1
 80a376e:	117b      	asrs	r3, r7, #5
 80a3770:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80a3774:	f007 071f 	and.w	r7, r7, #31
 80a3778:	fa01 f707 	lsl.w	r7, r1, r7
 80a377c:	421f      	tst	r7, r3
 80a377e:	f04f 0702 	mov.w	r7, #2
 80a3782:	4629      	mov	r1, r5
 80a3784:	4620      	mov	r0, r4
 80a3786:	bf18      	it	ne
 80a3788:	f04a 0a02 	orrne.w	sl, sl, #2
 80a378c:	1b76      	subs	r6, r6, r5
 80a378e:	f7ff fdff 	bl	80a3390 <rshift>
 80a3792:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80a3796:	f1ba 0f00 	cmp.w	sl, #0
 80a379a:	d048      	beq.n	80a382e <__gethex+0x3ce>
 80a379c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a37a0:	2b02      	cmp	r3, #2
 80a37a2:	d015      	beq.n	80a37d0 <__gethex+0x370>
 80a37a4:	2b03      	cmp	r3, #3
 80a37a6:	d017      	beq.n	80a37d8 <__gethex+0x378>
 80a37a8:	2b01      	cmp	r3, #1
 80a37aa:	d109      	bne.n	80a37c0 <__gethex+0x360>
 80a37ac:	f01a 0f02 	tst.w	sl, #2
 80a37b0:	d006      	beq.n	80a37c0 <__gethex+0x360>
 80a37b2:	f8d9 0000 	ldr.w	r0, [r9]
 80a37b6:	ea4a 0a00 	orr.w	sl, sl, r0
 80a37ba:	f01a 0f01 	tst.w	sl, #1
 80a37be:	d10e      	bne.n	80a37de <__gethex+0x37e>
 80a37c0:	f047 0710 	orr.w	r7, r7, #16
 80a37c4:	e033      	b.n	80a382e <__gethex+0x3ce>
 80a37c6:	f04f 0a01 	mov.w	sl, #1
 80a37ca:	e7cf      	b.n	80a376c <__gethex+0x30c>
 80a37cc:	2701      	movs	r7, #1
 80a37ce:	e7e2      	b.n	80a3796 <__gethex+0x336>
 80a37d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a37d2:	f1c3 0301 	rsb	r3, r3, #1
 80a37d6:	9315      	str	r3, [sp, #84]	; 0x54
 80a37d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a37da:	2b00      	cmp	r3, #0
 80a37dc:	d0f0      	beq.n	80a37c0 <__gethex+0x360>
 80a37de:	f04f 0c00 	mov.w	ip, #0
 80a37e2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80a37e6:	f104 0314 	add.w	r3, r4, #20
 80a37ea:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 80a37ee:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 80a37f2:	4618      	mov	r0, r3
 80a37f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80a37f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80a37fc:	d01c      	beq.n	80a3838 <__gethex+0x3d8>
 80a37fe:	3201      	adds	r2, #1
 80a3800:	6002      	str	r2, [r0, #0]
 80a3802:	2f02      	cmp	r7, #2
 80a3804:	f104 0314 	add.w	r3, r4, #20
 80a3808:	d138      	bne.n	80a387c <__gethex+0x41c>
 80a380a:	f8d8 2000 	ldr.w	r2, [r8]
 80a380e:	3a01      	subs	r2, #1
 80a3810:	42b2      	cmp	r2, r6
 80a3812:	d10a      	bne.n	80a382a <__gethex+0x3ca>
 80a3814:	2201      	movs	r2, #1
 80a3816:	1171      	asrs	r1, r6, #5
 80a3818:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a381c:	f006 061f 	and.w	r6, r6, #31
 80a3820:	fa02 f606 	lsl.w	r6, r2, r6
 80a3824:	421e      	tst	r6, r3
 80a3826:	bf18      	it	ne
 80a3828:	4617      	movne	r7, r2
 80a382a:	f047 0720 	orr.w	r7, r7, #32
 80a382e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a3830:	601c      	str	r4, [r3, #0]
 80a3832:	9b06      	ldr	r3, [sp, #24]
 80a3834:	601d      	str	r5, [r3, #0]
 80a3836:	e6a5      	b.n	80a3584 <__gethex+0x124>
 80a3838:	4299      	cmp	r1, r3
 80a383a:	f843 cc04 	str.w	ip, [r3, #-4]
 80a383e:	d8d8      	bhi.n	80a37f2 <__gethex+0x392>
 80a3840:	68a3      	ldr	r3, [r4, #8]
 80a3842:	4599      	cmp	r9, r3
 80a3844:	db12      	blt.n	80a386c <__gethex+0x40c>
 80a3846:	6861      	ldr	r1, [r4, #4]
 80a3848:	9802      	ldr	r0, [sp, #8]
 80a384a:	3101      	adds	r1, #1
 80a384c:	f000 f906 	bl	80a3a5c <_Balloc>
 80a3850:	4682      	mov	sl, r0
 80a3852:	6922      	ldr	r2, [r4, #16]
 80a3854:	f104 010c 	add.w	r1, r4, #12
 80a3858:	3202      	adds	r2, #2
 80a385a:	0092      	lsls	r2, r2, #2
 80a385c:	300c      	adds	r0, #12
 80a385e:	f7fe ff07 	bl	80a2670 <memcpy>
 80a3862:	4621      	mov	r1, r4
 80a3864:	9802      	ldr	r0, [sp, #8]
 80a3866:	f000 f92d 	bl	80a3ac4 <_Bfree>
 80a386a:	4654      	mov	r4, sl
 80a386c:	6923      	ldr	r3, [r4, #16]
 80a386e:	1c5a      	adds	r2, r3, #1
 80a3870:	6122      	str	r2, [r4, #16]
 80a3872:	2201      	movs	r2, #1
 80a3874:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80a3878:	615a      	str	r2, [r3, #20]
 80a387a:	e7c2      	b.n	80a3802 <__gethex+0x3a2>
 80a387c:	6922      	ldr	r2, [r4, #16]
 80a387e:	454a      	cmp	r2, r9
 80a3880:	dd0b      	ble.n	80a389a <__gethex+0x43a>
 80a3882:	2101      	movs	r1, #1
 80a3884:	4620      	mov	r0, r4
 80a3886:	f7ff fd83 	bl	80a3390 <rshift>
 80a388a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a388e:	3501      	adds	r5, #1
 80a3890:	42ab      	cmp	r3, r5
 80a3892:	f6ff aeda 	blt.w	80a364a <__gethex+0x1ea>
 80a3896:	2701      	movs	r7, #1
 80a3898:	e7c7      	b.n	80a382a <__gethex+0x3ca>
 80a389a:	f016 061f 	ands.w	r6, r6, #31
 80a389e:	d0fa      	beq.n	80a3896 <__gethex+0x436>
 80a38a0:	449b      	add	fp, r3
 80a38a2:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 80a38a6:	f000 f9a0 	bl	80a3bea <__hi0bits>
 80a38aa:	f1c6 0620 	rsb	r6, r6, #32
 80a38ae:	42b0      	cmp	r0, r6
 80a38b0:	dbe7      	blt.n	80a3882 <__gethex+0x422>
 80a38b2:	e7f0      	b.n	80a3896 <__gethex+0x436>

080a38b4 <L_shift>:
 80a38b4:	f1c2 0208 	rsb	r2, r2, #8
 80a38b8:	0092      	lsls	r2, r2, #2
 80a38ba:	b570      	push	{r4, r5, r6, lr}
 80a38bc:	f1c2 0620 	rsb	r6, r2, #32
 80a38c0:	6843      	ldr	r3, [r0, #4]
 80a38c2:	6804      	ldr	r4, [r0, #0]
 80a38c4:	fa03 f506 	lsl.w	r5, r3, r6
 80a38c8:	432c      	orrs	r4, r5
 80a38ca:	40d3      	lsrs	r3, r2
 80a38cc:	6004      	str	r4, [r0, #0]
 80a38ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80a38d2:	4288      	cmp	r0, r1
 80a38d4:	d3f4      	bcc.n	80a38c0 <L_shift+0xc>
 80a38d6:	bd70      	pop	{r4, r5, r6, pc}

080a38d8 <__match>:
 80a38d8:	b530      	push	{r4, r5, lr}
 80a38da:	6803      	ldr	r3, [r0, #0]
 80a38dc:	3301      	adds	r3, #1
 80a38de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a38e2:	b914      	cbnz	r4, 80a38ea <__match+0x12>
 80a38e4:	6003      	str	r3, [r0, #0]
 80a38e6:	2001      	movs	r0, #1
 80a38e8:	bd30      	pop	{r4, r5, pc}
 80a38ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a38ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a38f2:	2d19      	cmp	r5, #25
 80a38f4:	bf98      	it	ls
 80a38f6:	3220      	addls	r2, #32
 80a38f8:	42a2      	cmp	r2, r4
 80a38fa:	d0f0      	beq.n	80a38de <__match+0x6>
 80a38fc:	2000      	movs	r0, #0
 80a38fe:	e7f3      	b.n	80a38e8 <__match+0x10>

080a3900 <__hexnan>:
 80a3900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3904:	2500      	movs	r5, #0
 80a3906:	680b      	ldr	r3, [r1, #0]
 80a3908:	4682      	mov	sl, r0
 80a390a:	115e      	asrs	r6, r3, #5
 80a390c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a3910:	f013 031f 	ands.w	r3, r3, #31
 80a3914:	bf18      	it	ne
 80a3916:	3604      	addne	r6, #4
 80a3918:	1f37      	subs	r7, r6, #4
 80a391a:	4690      	mov	r8, r2
 80a391c:	46b9      	mov	r9, r7
 80a391e:	463c      	mov	r4, r7
 80a3920:	46ab      	mov	fp, r5
 80a3922:	b087      	sub	sp, #28
 80a3924:	6801      	ldr	r1, [r0, #0]
 80a3926:	9301      	str	r3, [sp, #4]
 80a3928:	f846 5c04 	str.w	r5, [r6, #-4]
 80a392c:	9502      	str	r5, [sp, #8]
 80a392e:	784a      	ldrb	r2, [r1, #1]
 80a3930:	1c4b      	adds	r3, r1, #1
 80a3932:	9303      	str	r3, [sp, #12]
 80a3934:	b342      	cbz	r2, 80a3988 <__hexnan+0x88>
 80a3936:	4610      	mov	r0, r2
 80a3938:	9105      	str	r1, [sp, #20]
 80a393a:	9204      	str	r2, [sp, #16]
 80a393c:	f7ff fd7b 	bl	80a3436 <__hexdig_fun>
 80a3940:	2800      	cmp	r0, #0
 80a3942:	d14f      	bne.n	80a39e4 <__hexnan+0xe4>
 80a3944:	9a04      	ldr	r2, [sp, #16]
 80a3946:	9905      	ldr	r1, [sp, #20]
 80a3948:	2a20      	cmp	r2, #32
 80a394a:	d818      	bhi.n	80a397e <__hexnan+0x7e>
 80a394c:	9b02      	ldr	r3, [sp, #8]
 80a394e:	459b      	cmp	fp, r3
 80a3950:	dd13      	ble.n	80a397a <__hexnan+0x7a>
 80a3952:	454c      	cmp	r4, r9
 80a3954:	d206      	bcs.n	80a3964 <__hexnan+0x64>
 80a3956:	2d07      	cmp	r5, #7
 80a3958:	dc04      	bgt.n	80a3964 <__hexnan+0x64>
 80a395a:	462a      	mov	r2, r5
 80a395c:	4649      	mov	r1, r9
 80a395e:	4620      	mov	r0, r4
 80a3960:	f7ff ffa8 	bl	80a38b4 <L_shift>
 80a3964:	4544      	cmp	r4, r8
 80a3966:	d950      	bls.n	80a3a0a <__hexnan+0x10a>
 80a3968:	2300      	movs	r3, #0
 80a396a:	f1a4 0904 	sub.w	r9, r4, #4
 80a396e:	f844 3c04 	str.w	r3, [r4, #-4]
 80a3972:	461d      	mov	r5, r3
 80a3974:	464c      	mov	r4, r9
 80a3976:	f8cd b008 	str.w	fp, [sp, #8]
 80a397a:	9903      	ldr	r1, [sp, #12]
 80a397c:	e7d7      	b.n	80a392e <__hexnan+0x2e>
 80a397e:	2a29      	cmp	r2, #41	; 0x29
 80a3980:	d156      	bne.n	80a3a30 <__hexnan+0x130>
 80a3982:	3102      	adds	r1, #2
 80a3984:	f8ca 1000 	str.w	r1, [sl]
 80a3988:	f1bb 0f00 	cmp.w	fp, #0
 80a398c:	d050      	beq.n	80a3a30 <__hexnan+0x130>
 80a398e:	454c      	cmp	r4, r9
 80a3990:	d206      	bcs.n	80a39a0 <__hexnan+0xa0>
 80a3992:	2d07      	cmp	r5, #7
 80a3994:	dc04      	bgt.n	80a39a0 <__hexnan+0xa0>
 80a3996:	462a      	mov	r2, r5
 80a3998:	4649      	mov	r1, r9
 80a399a:	4620      	mov	r0, r4
 80a399c:	f7ff ff8a 	bl	80a38b4 <L_shift>
 80a39a0:	4544      	cmp	r4, r8
 80a39a2:	d934      	bls.n	80a3a0e <__hexnan+0x10e>
 80a39a4:	4623      	mov	r3, r4
 80a39a6:	f1a8 0204 	sub.w	r2, r8, #4
 80a39aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80a39ae:	429f      	cmp	r7, r3
 80a39b0:	f842 1f04 	str.w	r1, [r2, #4]!
 80a39b4:	d2f9      	bcs.n	80a39aa <__hexnan+0xaa>
 80a39b6:	1b3b      	subs	r3, r7, r4
 80a39b8:	f023 0303 	bic.w	r3, r3, #3
 80a39bc:	3304      	adds	r3, #4
 80a39be:	3401      	adds	r4, #1
 80a39c0:	3e03      	subs	r6, #3
 80a39c2:	42b4      	cmp	r4, r6
 80a39c4:	bf88      	it	hi
 80a39c6:	2304      	movhi	r3, #4
 80a39c8:	2200      	movs	r2, #0
 80a39ca:	4443      	add	r3, r8
 80a39cc:	f843 2b04 	str.w	r2, [r3], #4
 80a39d0:	429f      	cmp	r7, r3
 80a39d2:	d2fb      	bcs.n	80a39cc <__hexnan+0xcc>
 80a39d4:	683b      	ldr	r3, [r7, #0]
 80a39d6:	b91b      	cbnz	r3, 80a39e0 <__hexnan+0xe0>
 80a39d8:	4547      	cmp	r7, r8
 80a39da:	d127      	bne.n	80a3a2c <__hexnan+0x12c>
 80a39dc:	2301      	movs	r3, #1
 80a39de:	603b      	str	r3, [r7, #0]
 80a39e0:	2005      	movs	r0, #5
 80a39e2:	e026      	b.n	80a3a32 <__hexnan+0x132>
 80a39e4:	3501      	adds	r5, #1
 80a39e6:	2d08      	cmp	r5, #8
 80a39e8:	f10b 0b01 	add.w	fp, fp, #1
 80a39ec:	dd06      	ble.n	80a39fc <__hexnan+0xfc>
 80a39ee:	4544      	cmp	r4, r8
 80a39f0:	d9c3      	bls.n	80a397a <__hexnan+0x7a>
 80a39f2:	2300      	movs	r3, #0
 80a39f4:	2501      	movs	r5, #1
 80a39f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80a39fa:	3c04      	subs	r4, #4
 80a39fc:	6822      	ldr	r2, [r4, #0]
 80a39fe:	f000 000f 	and.w	r0, r0, #15
 80a3a02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80a3a06:	6022      	str	r2, [r4, #0]
 80a3a08:	e7b7      	b.n	80a397a <__hexnan+0x7a>
 80a3a0a:	2508      	movs	r5, #8
 80a3a0c:	e7b5      	b.n	80a397a <__hexnan+0x7a>
 80a3a0e:	9b01      	ldr	r3, [sp, #4]
 80a3a10:	2b00      	cmp	r3, #0
 80a3a12:	d0df      	beq.n	80a39d4 <__hexnan+0xd4>
 80a3a14:	f04f 32ff 	mov.w	r2, #4294967295
 80a3a18:	f1c3 0320 	rsb	r3, r3, #32
 80a3a1c:	fa22 f303 	lsr.w	r3, r2, r3
 80a3a20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a3a24:	401a      	ands	r2, r3
 80a3a26:	f846 2c04 	str.w	r2, [r6, #-4]
 80a3a2a:	e7d3      	b.n	80a39d4 <__hexnan+0xd4>
 80a3a2c:	3f04      	subs	r7, #4
 80a3a2e:	e7d1      	b.n	80a39d4 <__hexnan+0xd4>
 80a3a30:	2004      	movs	r0, #4
 80a3a32:	b007      	add	sp, #28
 80a3a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a3a38 <__ascii_mbtowc>:
 80a3a38:	b082      	sub	sp, #8
 80a3a3a:	b901      	cbnz	r1, 80a3a3e <__ascii_mbtowc+0x6>
 80a3a3c:	a901      	add	r1, sp, #4
 80a3a3e:	b142      	cbz	r2, 80a3a52 <__ascii_mbtowc+0x1a>
 80a3a40:	b14b      	cbz	r3, 80a3a56 <__ascii_mbtowc+0x1e>
 80a3a42:	7813      	ldrb	r3, [r2, #0]
 80a3a44:	600b      	str	r3, [r1, #0]
 80a3a46:	7812      	ldrb	r2, [r2, #0]
 80a3a48:	1e10      	subs	r0, r2, #0
 80a3a4a:	bf18      	it	ne
 80a3a4c:	2001      	movne	r0, #1
 80a3a4e:	b002      	add	sp, #8
 80a3a50:	4770      	bx	lr
 80a3a52:	4610      	mov	r0, r2
 80a3a54:	e7fb      	b.n	80a3a4e <__ascii_mbtowc+0x16>
 80a3a56:	f06f 0001 	mvn.w	r0, #1
 80a3a5a:	e7f8      	b.n	80a3a4e <__ascii_mbtowc+0x16>

080a3a5c <_Balloc>:
 80a3a5c:	b570      	push	{r4, r5, r6, lr}
 80a3a5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80a3a60:	4604      	mov	r4, r0
 80a3a62:	460d      	mov	r5, r1
 80a3a64:	b93e      	cbnz	r6, 80a3a76 <_Balloc+0x1a>
 80a3a66:	2010      	movs	r0, #16
 80a3a68:	f7fc ff2e 	bl	80a08c8 <malloc>
 80a3a6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80a3a70:	6260      	str	r0, [r4, #36]	; 0x24
 80a3a72:	6006      	str	r6, [r0, #0]
 80a3a74:	60c6      	str	r6, [r0, #12]
 80a3a76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80a3a78:	68f3      	ldr	r3, [r6, #12]
 80a3a7a:	b183      	cbz	r3, 80a3a9e <_Balloc+0x42>
 80a3a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a3a7e:	68db      	ldr	r3, [r3, #12]
 80a3a80:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80a3a84:	b9b8      	cbnz	r0, 80a3ab6 <_Balloc+0x5a>
 80a3a86:	2101      	movs	r1, #1
 80a3a88:	fa01 f605 	lsl.w	r6, r1, r5
 80a3a8c:	1d72      	adds	r2, r6, #5
 80a3a8e:	4620      	mov	r0, r4
 80a3a90:	0092      	lsls	r2, r2, #2
 80a3a92:	f000 fc1c 	bl	80a42ce <_calloc_r>
 80a3a96:	b160      	cbz	r0, 80a3ab2 <_Balloc+0x56>
 80a3a98:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80a3a9c:	e00e      	b.n	80a3abc <_Balloc+0x60>
 80a3a9e:	2221      	movs	r2, #33	; 0x21
 80a3aa0:	2104      	movs	r1, #4
 80a3aa2:	4620      	mov	r0, r4
 80a3aa4:	f000 fc13 	bl	80a42ce <_calloc_r>
 80a3aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a3aaa:	60f0      	str	r0, [r6, #12]
 80a3aac:	68db      	ldr	r3, [r3, #12]
 80a3aae:	2b00      	cmp	r3, #0
 80a3ab0:	d1e4      	bne.n	80a3a7c <_Balloc+0x20>
 80a3ab2:	2000      	movs	r0, #0
 80a3ab4:	bd70      	pop	{r4, r5, r6, pc}
 80a3ab6:	6802      	ldr	r2, [r0, #0]
 80a3ab8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80a3abc:	2300      	movs	r3, #0
 80a3abe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80a3ac2:	e7f7      	b.n	80a3ab4 <_Balloc+0x58>

080a3ac4 <_Bfree>:
 80a3ac4:	b570      	push	{r4, r5, r6, lr}
 80a3ac6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80a3ac8:	4605      	mov	r5, r0
 80a3aca:	460c      	mov	r4, r1
 80a3acc:	b93e      	cbnz	r6, 80a3ade <_Bfree+0x1a>
 80a3ace:	2010      	movs	r0, #16
 80a3ad0:	f7fc fefa 	bl	80a08c8 <malloc>
 80a3ad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80a3ad8:	6268      	str	r0, [r5, #36]	; 0x24
 80a3ada:	6006      	str	r6, [r0, #0]
 80a3adc:	60c6      	str	r6, [r0, #12]
 80a3ade:	b13c      	cbz	r4, 80a3af0 <_Bfree+0x2c>
 80a3ae0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80a3ae2:	6862      	ldr	r2, [r4, #4]
 80a3ae4:	68db      	ldr	r3, [r3, #12]
 80a3ae6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a3aea:	6021      	str	r1, [r4, #0]
 80a3aec:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80a3af0:	bd70      	pop	{r4, r5, r6, pc}

080a3af2 <__multadd>:
 80a3af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3af6:	4698      	mov	r8, r3
 80a3af8:	460c      	mov	r4, r1
 80a3afa:	2300      	movs	r3, #0
 80a3afc:	690e      	ldr	r6, [r1, #16]
 80a3afe:	4607      	mov	r7, r0
 80a3b00:	f101 0014 	add.w	r0, r1, #20
 80a3b04:	6805      	ldr	r5, [r0, #0]
 80a3b06:	3301      	adds	r3, #1
 80a3b08:	b2a9      	uxth	r1, r5
 80a3b0a:	fb02 8101 	mla	r1, r2, r1, r8
 80a3b0e:	0c2d      	lsrs	r5, r5, #16
 80a3b10:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80a3b14:	fb02 c505 	mla	r5, r2, r5, ip
 80a3b18:	b289      	uxth	r1, r1
 80a3b1a:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80a3b1e:	429e      	cmp	r6, r3
 80a3b20:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80a3b24:	f840 1b04 	str.w	r1, [r0], #4
 80a3b28:	dcec      	bgt.n	80a3b04 <__multadd+0x12>
 80a3b2a:	f1b8 0f00 	cmp.w	r8, #0
 80a3b2e:	d01b      	beq.n	80a3b68 <__multadd+0x76>
 80a3b30:	68a3      	ldr	r3, [r4, #8]
 80a3b32:	42b3      	cmp	r3, r6
 80a3b34:	dc12      	bgt.n	80a3b5c <__multadd+0x6a>
 80a3b36:	6861      	ldr	r1, [r4, #4]
 80a3b38:	4638      	mov	r0, r7
 80a3b3a:	3101      	adds	r1, #1
 80a3b3c:	f7ff ff8e 	bl	80a3a5c <_Balloc>
 80a3b40:	4605      	mov	r5, r0
 80a3b42:	6922      	ldr	r2, [r4, #16]
 80a3b44:	f104 010c 	add.w	r1, r4, #12
 80a3b48:	3202      	adds	r2, #2
 80a3b4a:	0092      	lsls	r2, r2, #2
 80a3b4c:	300c      	adds	r0, #12
 80a3b4e:	f7fe fd8f 	bl	80a2670 <memcpy>
 80a3b52:	4621      	mov	r1, r4
 80a3b54:	4638      	mov	r0, r7
 80a3b56:	f7ff ffb5 	bl	80a3ac4 <_Bfree>
 80a3b5a:	462c      	mov	r4, r5
 80a3b5c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80a3b60:	3601      	adds	r6, #1
 80a3b62:	f8c3 8014 	str.w	r8, [r3, #20]
 80a3b66:	6126      	str	r6, [r4, #16]
 80a3b68:	4620      	mov	r0, r4
 80a3b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3b6e <__s2b>:
 80a3b6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3b72:	4615      	mov	r5, r2
 80a3b74:	2209      	movs	r2, #9
 80a3b76:	461f      	mov	r7, r3
 80a3b78:	3308      	adds	r3, #8
 80a3b7a:	460c      	mov	r4, r1
 80a3b7c:	fb93 f3f2 	sdiv	r3, r3, r2
 80a3b80:	4606      	mov	r6, r0
 80a3b82:	2201      	movs	r2, #1
 80a3b84:	2100      	movs	r1, #0
 80a3b86:	429a      	cmp	r2, r3
 80a3b88:	db20      	blt.n	80a3bcc <__s2b+0x5e>
 80a3b8a:	4630      	mov	r0, r6
 80a3b8c:	f7ff ff66 	bl	80a3a5c <_Balloc>
 80a3b90:	9b08      	ldr	r3, [sp, #32]
 80a3b92:	2d09      	cmp	r5, #9
 80a3b94:	6143      	str	r3, [r0, #20]
 80a3b96:	f04f 0301 	mov.w	r3, #1
 80a3b9a:	6103      	str	r3, [r0, #16]
 80a3b9c:	dd19      	ble.n	80a3bd2 <__s2b+0x64>
 80a3b9e:	f104 0909 	add.w	r9, r4, #9
 80a3ba2:	46c8      	mov	r8, r9
 80a3ba4:	442c      	add	r4, r5
 80a3ba6:	f818 3b01 	ldrb.w	r3, [r8], #1
 80a3baa:	4601      	mov	r1, r0
 80a3bac:	220a      	movs	r2, #10
 80a3bae:	4630      	mov	r0, r6
 80a3bb0:	3b30      	subs	r3, #48	; 0x30
 80a3bb2:	f7ff ff9e 	bl	80a3af2 <__multadd>
 80a3bb6:	45a0      	cmp	r8, r4
 80a3bb8:	d1f5      	bne.n	80a3ba6 <__s2b+0x38>
 80a3bba:	f1a5 0408 	sub.w	r4, r5, #8
 80a3bbe:	444c      	add	r4, r9
 80a3bc0:	1b2d      	subs	r5, r5, r4
 80a3bc2:	1963      	adds	r3, r4, r5
 80a3bc4:	42bb      	cmp	r3, r7
 80a3bc6:	db07      	blt.n	80a3bd8 <__s2b+0x6a>
 80a3bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3bcc:	0052      	lsls	r2, r2, #1
 80a3bce:	3101      	adds	r1, #1
 80a3bd0:	e7d9      	b.n	80a3b86 <__s2b+0x18>
 80a3bd2:	2509      	movs	r5, #9
 80a3bd4:	340a      	adds	r4, #10
 80a3bd6:	e7f3      	b.n	80a3bc0 <__s2b+0x52>
 80a3bd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a3bdc:	4601      	mov	r1, r0
 80a3bde:	220a      	movs	r2, #10
 80a3be0:	4630      	mov	r0, r6
 80a3be2:	3b30      	subs	r3, #48	; 0x30
 80a3be4:	f7ff ff85 	bl	80a3af2 <__multadd>
 80a3be8:	e7eb      	b.n	80a3bc2 <__s2b+0x54>

080a3bea <__hi0bits>:
 80a3bea:	0c02      	lsrs	r2, r0, #16
 80a3bec:	0412      	lsls	r2, r2, #16
 80a3bee:	4603      	mov	r3, r0
 80a3bf0:	b9ca      	cbnz	r2, 80a3c26 <__hi0bits+0x3c>
 80a3bf2:	0403      	lsls	r3, r0, #16
 80a3bf4:	2010      	movs	r0, #16
 80a3bf6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80a3bfa:	bf04      	itt	eq
 80a3bfc:	021b      	lsleq	r3, r3, #8
 80a3bfe:	3008      	addeq	r0, #8
 80a3c00:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80a3c04:	bf04      	itt	eq
 80a3c06:	011b      	lsleq	r3, r3, #4
 80a3c08:	3004      	addeq	r0, #4
 80a3c0a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80a3c0e:	bf04      	itt	eq
 80a3c10:	009b      	lsleq	r3, r3, #2
 80a3c12:	3002      	addeq	r0, #2
 80a3c14:	2b00      	cmp	r3, #0
 80a3c16:	db05      	blt.n	80a3c24 <__hi0bits+0x3a>
 80a3c18:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80a3c1c:	f100 0001 	add.w	r0, r0, #1
 80a3c20:	bf08      	it	eq
 80a3c22:	2020      	moveq	r0, #32
 80a3c24:	4770      	bx	lr
 80a3c26:	2000      	movs	r0, #0
 80a3c28:	e7e5      	b.n	80a3bf6 <__hi0bits+0xc>

080a3c2a <__lo0bits>:
 80a3c2a:	6803      	ldr	r3, [r0, #0]
 80a3c2c:	4602      	mov	r2, r0
 80a3c2e:	f013 0007 	ands.w	r0, r3, #7
 80a3c32:	d00b      	beq.n	80a3c4c <__lo0bits+0x22>
 80a3c34:	07d9      	lsls	r1, r3, #31
 80a3c36:	d422      	bmi.n	80a3c7e <__lo0bits+0x54>
 80a3c38:	0798      	lsls	r0, r3, #30
 80a3c3a:	bf49      	itett	mi
 80a3c3c:	085b      	lsrmi	r3, r3, #1
 80a3c3e:	089b      	lsrpl	r3, r3, #2
 80a3c40:	2001      	movmi	r0, #1
 80a3c42:	6013      	strmi	r3, [r2, #0]
 80a3c44:	bf5c      	itt	pl
 80a3c46:	2002      	movpl	r0, #2
 80a3c48:	6013      	strpl	r3, [r2, #0]
 80a3c4a:	4770      	bx	lr
 80a3c4c:	b299      	uxth	r1, r3
 80a3c4e:	b909      	cbnz	r1, 80a3c54 <__lo0bits+0x2a>
 80a3c50:	2010      	movs	r0, #16
 80a3c52:	0c1b      	lsrs	r3, r3, #16
 80a3c54:	f013 0fff 	tst.w	r3, #255	; 0xff
 80a3c58:	bf04      	itt	eq
 80a3c5a:	0a1b      	lsreq	r3, r3, #8
 80a3c5c:	3008      	addeq	r0, #8
 80a3c5e:	0719      	lsls	r1, r3, #28
 80a3c60:	bf04      	itt	eq
 80a3c62:	091b      	lsreq	r3, r3, #4
 80a3c64:	3004      	addeq	r0, #4
 80a3c66:	0799      	lsls	r1, r3, #30
 80a3c68:	bf04      	itt	eq
 80a3c6a:	089b      	lsreq	r3, r3, #2
 80a3c6c:	3002      	addeq	r0, #2
 80a3c6e:	07d9      	lsls	r1, r3, #31
 80a3c70:	d403      	bmi.n	80a3c7a <__lo0bits+0x50>
 80a3c72:	085b      	lsrs	r3, r3, #1
 80a3c74:	f100 0001 	add.w	r0, r0, #1
 80a3c78:	d003      	beq.n	80a3c82 <__lo0bits+0x58>
 80a3c7a:	6013      	str	r3, [r2, #0]
 80a3c7c:	4770      	bx	lr
 80a3c7e:	2000      	movs	r0, #0
 80a3c80:	4770      	bx	lr
 80a3c82:	2020      	movs	r0, #32
 80a3c84:	4770      	bx	lr

080a3c86 <__i2b>:
 80a3c86:	b510      	push	{r4, lr}
 80a3c88:	460c      	mov	r4, r1
 80a3c8a:	2101      	movs	r1, #1
 80a3c8c:	f7ff fee6 	bl	80a3a5c <_Balloc>
 80a3c90:	2201      	movs	r2, #1
 80a3c92:	6144      	str	r4, [r0, #20]
 80a3c94:	6102      	str	r2, [r0, #16]
 80a3c96:	bd10      	pop	{r4, pc}

080a3c98 <__multiply>:
 80a3c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3c9c:	4615      	mov	r5, r2
 80a3c9e:	690a      	ldr	r2, [r1, #16]
 80a3ca0:	692b      	ldr	r3, [r5, #16]
 80a3ca2:	460c      	mov	r4, r1
 80a3ca4:	429a      	cmp	r2, r3
 80a3ca6:	bfbe      	ittt	lt
 80a3ca8:	460b      	movlt	r3, r1
 80a3caa:	462c      	movlt	r4, r5
 80a3cac:	461d      	movlt	r5, r3
 80a3cae:	6927      	ldr	r7, [r4, #16]
 80a3cb0:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80a3cb4:	68a3      	ldr	r3, [r4, #8]
 80a3cb6:	6861      	ldr	r1, [r4, #4]
 80a3cb8:	eb07 0609 	add.w	r6, r7, r9
 80a3cbc:	42b3      	cmp	r3, r6
 80a3cbe:	bfb8      	it	lt
 80a3cc0:	3101      	addlt	r1, #1
 80a3cc2:	b085      	sub	sp, #20
 80a3cc4:	f7ff feca 	bl	80a3a5c <_Balloc>
 80a3cc8:	f100 0114 	add.w	r1, r0, #20
 80a3ccc:	460b      	mov	r3, r1
 80a3cce:	2200      	movs	r2, #0
 80a3cd0:	eb01 0886 	add.w	r8, r1, r6, lsl #2
 80a3cd4:	4543      	cmp	r3, r8
 80a3cd6:	d31d      	bcc.n	80a3d14 <__multiply+0x7c>
 80a3cd8:	f104 0314 	add.w	r3, r4, #20
 80a3cdc:	f105 0214 	add.w	r2, r5, #20
 80a3ce0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80a3ce4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80a3ce8:	9302      	str	r3, [sp, #8]
 80a3cea:	1b3b      	subs	r3, r7, r4
 80a3cec:	3b15      	subs	r3, #21
 80a3cee:	f023 0303 	bic.w	r3, r3, #3
 80a3cf2:	3304      	adds	r3, #4
 80a3cf4:	f104 0515 	add.w	r5, r4, #21
 80a3cf8:	42af      	cmp	r7, r5
 80a3cfa:	bf38      	it	cc
 80a3cfc:	2304      	movcc	r3, #4
 80a3cfe:	9301      	str	r3, [sp, #4]
 80a3d00:	9b02      	ldr	r3, [sp, #8]
 80a3d02:	9203      	str	r2, [sp, #12]
 80a3d04:	4293      	cmp	r3, r2
 80a3d06:	d808      	bhi.n	80a3d1a <__multiply+0x82>
 80a3d08:	2e00      	cmp	r6, #0
 80a3d0a:	dc5a      	bgt.n	80a3dc2 <__multiply+0x12a>
 80a3d0c:	6106      	str	r6, [r0, #16]
 80a3d0e:	b005      	add	sp, #20
 80a3d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3d14:	f843 2b04 	str.w	r2, [r3], #4
 80a3d18:	e7dc      	b.n	80a3cd4 <__multiply+0x3c>
 80a3d1a:	f8b2 a000 	ldrh.w	sl, [r2]
 80a3d1e:	f1ba 0f00 	cmp.w	sl, #0
 80a3d22:	d024      	beq.n	80a3d6e <__multiply+0xd6>
 80a3d24:	4689      	mov	r9, r1
 80a3d26:	f04f 0c00 	mov.w	ip, #0
 80a3d2a:	f104 0e14 	add.w	lr, r4, #20
 80a3d2e:	f85e 5b04 	ldr.w	r5, [lr], #4
 80a3d32:	f8d9 b000 	ldr.w	fp, [r9]
 80a3d36:	b2ab      	uxth	r3, r5
 80a3d38:	fa1f fb8b 	uxth.w	fp, fp
 80a3d3c:	fb0a b303 	mla	r3, sl, r3, fp
 80a3d40:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 80a3d44:	f8d9 5000 	ldr.w	r5, [r9]
 80a3d48:	4463      	add	r3, ip
 80a3d4a:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a3d4e:	fb0a c50b 	mla	r5, sl, fp, ip
 80a3d52:	eb05 4513 	add.w	r5, r5, r3, lsr #16
 80a3d56:	b29b      	uxth	r3, r3
 80a3d58:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80a3d5c:	4577      	cmp	r7, lr
 80a3d5e:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a3d62:	f849 3b04 	str.w	r3, [r9], #4
 80a3d66:	d8e2      	bhi.n	80a3d2e <__multiply+0x96>
 80a3d68:	9b01      	ldr	r3, [sp, #4]
 80a3d6a:	f841 c003 	str.w	ip, [r1, r3]
 80a3d6e:	9b03      	ldr	r3, [sp, #12]
 80a3d70:	3204      	adds	r2, #4
 80a3d72:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80a3d76:	f1b9 0f00 	cmp.w	r9, #0
 80a3d7a:	d020      	beq.n	80a3dbe <__multiply+0x126>
 80a3d7c:	468e      	mov	lr, r1
 80a3d7e:	f04f 0a00 	mov.w	sl, #0
 80a3d82:	680b      	ldr	r3, [r1, #0]
 80a3d84:	f104 0c14 	add.w	ip, r4, #20
 80a3d88:	f8bc 5000 	ldrh.w	r5, [ip]
 80a3d8c:	f8be b002 	ldrh.w	fp, [lr, #2]
 80a3d90:	b29b      	uxth	r3, r3
 80a3d92:	fb09 b505 	mla	r5, r9, r5, fp
 80a3d96:	44aa      	add	sl, r5
 80a3d98:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80a3d9c:	f84e 3b04 	str.w	r3, [lr], #4
 80a3da0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80a3da4:	f8be 5000 	ldrh.w	r5, [lr]
 80a3da8:	0c1b      	lsrs	r3, r3, #16
 80a3daa:	fb09 5303 	mla	r3, r9, r3, r5
 80a3dae:	4567      	cmp	r7, ip
 80a3db0:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80a3db4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80a3db8:	d8e6      	bhi.n	80a3d88 <__multiply+0xf0>
 80a3dba:	9d01      	ldr	r5, [sp, #4]
 80a3dbc:	514b      	str	r3, [r1, r5]
 80a3dbe:	3104      	adds	r1, #4
 80a3dc0:	e79e      	b.n	80a3d00 <__multiply+0x68>
 80a3dc2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80a3dc6:	2b00      	cmp	r3, #0
 80a3dc8:	d1a0      	bne.n	80a3d0c <__multiply+0x74>
 80a3dca:	3e01      	subs	r6, #1
 80a3dcc:	e79c      	b.n	80a3d08 <__multiply+0x70>
	...

080a3dd0 <__pow5mult>:
 80a3dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3dd4:	4615      	mov	r5, r2
 80a3dd6:	f012 0203 	ands.w	r2, r2, #3
 80a3dda:	4606      	mov	r6, r0
 80a3ddc:	460f      	mov	r7, r1
 80a3dde:	d007      	beq.n	80a3df0 <__pow5mult+0x20>
 80a3de0:	4c21      	ldr	r4, [pc, #132]	; (80a3e68 <__pow5mult+0x98>)
 80a3de2:	3a01      	subs	r2, #1
 80a3de4:	2300      	movs	r3, #0
 80a3de6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a3dea:	f7ff fe82 	bl	80a3af2 <__multadd>
 80a3dee:	4607      	mov	r7, r0
 80a3df0:	10ad      	asrs	r5, r5, #2
 80a3df2:	d035      	beq.n	80a3e60 <__pow5mult+0x90>
 80a3df4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a3df6:	b93c      	cbnz	r4, 80a3e08 <__pow5mult+0x38>
 80a3df8:	2010      	movs	r0, #16
 80a3dfa:	f7fc fd65 	bl	80a08c8 <malloc>
 80a3dfe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80a3e02:	6270      	str	r0, [r6, #36]	; 0x24
 80a3e04:	6004      	str	r4, [r0, #0]
 80a3e06:	60c4      	str	r4, [r0, #12]
 80a3e08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a3e0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a3e10:	b94c      	cbnz	r4, 80a3e26 <__pow5mult+0x56>
 80a3e12:	f240 2171 	movw	r1, #625	; 0x271
 80a3e16:	4630      	mov	r0, r6
 80a3e18:	f7ff ff35 	bl	80a3c86 <__i2b>
 80a3e1c:	2300      	movs	r3, #0
 80a3e1e:	4604      	mov	r4, r0
 80a3e20:	f8c8 0008 	str.w	r0, [r8, #8]
 80a3e24:	6003      	str	r3, [r0, #0]
 80a3e26:	f04f 0900 	mov.w	r9, #0
 80a3e2a:	07eb      	lsls	r3, r5, #31
 80a3e2c:	d50a      	bpl.n	80a3e44 <__pow5mult+0x74>
 80a3e2e:	4639      	mov	r1, r7
 80a3e30:	4622      	mov	r2, r4
 80a3e32:	4630      	mov	r0, r6
 80a3e34:	f7ff ff30 	bl	80a3c98 <__multiply>
 80a3e38:	4680      	mov	r8, r0
 80a3e3a:	4639      	mov	r1, r7
 80a3e3c:	4630      	mov	r0, r6
 80a3e3e:	f7ff fe41 	bl	80a3ac4 <_Bfree>
 80a3e42:	4647      	mov	r7, r8
 80a3e44:	106d      	asrs	r5, r5, #1
 80a3e46:	d00b      	beq.n	80a3e60 <__pow5mult+0x90>
 80a3e48:	6820      	ldr	r0, [r4, #0]
 80a3e4a:	b938      	cbnz	r0, 80a3e5c <__pow5mult+0x8c>
 80a3e4c:	4622      	mov	r2, r4
 80a3e4e:	4621      	mov	r1, r4
 80a3e50:	4630      	mov	r0, r6
 80a3e52:	f7ff ff21 	bl	80a3c98 <__multiply>
 80a3e56:	6020      	str	r0, [r4, #0]
 80a3e58:	f8c0 9000 	str.w	r9, [r0]
 80a3e5c:	4604      	mov	r4, r0
 80a3e5e:	e7e4      	b.n	80a3e2a <__pow5mult+0x5a>
 80a3e60:	4638      	mov	r0, r7
 80a3e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3e66:	bf00      	nop
 80a3e68:	080a47b0 	.word	0x080a47b0

080a3e6c <__lshift>:
 80a3e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3e70:	460c      	mov	r4, r1
 80a3e72:	4607      	mov	r7, r0
 80a3e74:	4691      	mov	r9, r2
 80a3e76:	6923      	ldr	r3, [r4, #16]
 80a3e78:	6849      	ldr	r1, [r1, #4]
 80a3e7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80a3e7e:	68a3      	ldr	r3, [r4, #8]
 80a3e80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a3e84:	f108 0601 	add.w	r6, r8, #1
 80a3e88:	42b3      	cmp	r3, r6
 80a3e8a:	db3f      	blt.n	80a3f0c <__lshift+0xa0>
 80a3e8c:	4638      	mov	r0, r7
 80a3e8e:	f7ff fde5 	bl	80a3a5c <_Balloc>
 80a3e92:	2300      	movs	r3, #0
 80a3e94:	4605      	mov	r5, r0
 80a3e96:	f100 0114 	add.w	r1, r0, #20
 80a3e9a:	f100 0210 	add.w	r2, r0, #16
 80a3e9e:	4618      	mov	r0, r3
 80a3ea0:	4553      	cmp	r3, sl
 80a3ea2:	db36      	blt.n	80a3f12 <__lshift+0xa6>
 80a3ea4:	6920      	ldr	r0, [r4, #16]
 80a3ea6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80a3eaa:	f104 0314 	add.w	r3, r4, #20
 80a3eae:	f019 091f 	ands.w	r9, r9, #31
 80a3eb2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80a3eb6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80a3eba:	d02e      	beq.n	80a3f1a <__lshift+0xae>
 80a3ebc:	468a      	mov	sl, r1
 80a3ebe:	2200      	movs	r2, #0
 80a3ec0:	f1c9 0e20 	rsb	lr, r9, #32
 80a3ec4:	6818      	ldr	r0, [r3, #0]
 80a3ec6:	fa00 f009 	lsl.w	r0, r0, r9
 80a3eca:	4302      	orrs	r2, r0
 80a3ecc:	f84a 2b04 	str.w	r2, [sl], #4
 80a3ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 80a3ed4:	459c      	cmp	ip, r3
 80a3ed6:	fa22 f20e 	lsr.w	r2, r2, lr
 80a3eda:	d8f3      	bhi.n	80a3ec4 <__lshift+0x58>
 80a3edc:	ebac 0304 	sub.w	r3, ip, r4
 80a3ee0:	3b15      	subs	r3, #21
 80a3ee2:	f023 0303 	bic.w	r3, r3, #3
 80a3ee6:	3304      	adds	r3, #4
 80a3ee8:	f104 0015 	add.w	r0, r4, #21
 80a3eec:	4560      	cmp	r0, ip
 80a3eee:	bf88      	it	hi
 80a3ef0:	2304      	movhi	r3, #4
 80a3ef2:	50ca      	str	r2, [r1, r3]
 80a3ef4:	b10a      	cbz	r2, 80a3efa <__lshift+0x8e>
 80a3ef6:	f108 0602 	add.w	r6, r8, #2
 80a3efa:	3e01      	subs	r6, #1
 80a3efc:	4638      	mov	r0, r7
 80a3efe:	4621      	mov	r1, r4
 80a3f00:	612e      	str	r6, [r5, #16]
 80a3f02:	f7ff fddf 	bl	80a3ac4 <_Bfree>
 80a3f06:	4628      	mov	r0, r5
 80a3f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3f0c:	3101      	adds	r1, #1
 80a3f0e:	005b      	lsls	r3, r3, #1
 80a3f10:	e7ba      	b.n	80a3e88 <__lshift+0x1c>
 80a3f12:	f842 0f04 	str.w	r0, [r2, #4]!
 80a3f16:	3301      	adds	r3, #1
 80a3f18:	e7c2      	b.n	80a3ea0 <__lshift+0x34>
 80a3f1a:	3904      	subs	r1, #4
 80a3f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 80a3f20:	459c      	cmp	ip, r3
 80a3f22:	f841 2f04 	str.w	r2, [r1, #4]!
 80a3f26:	d8f9      	bhi.n	80a3f1c <__lshift+0xb0>
 80a3f28:	e7e7      	b.n	80a3efa <__lshift+0x8e>

080a3f2a <__mcmp>:
 80a3f2a:	4603      	mov	r3, r0
 80a3f2c:	690a      	ldr	r2, [r1, #16]
 80a3f2e:	6900      	ldr	r0, [r0, #16]
 80a3f30:	b530      	push	{r4, r5, lr}
 80a3f32:	1a80      	subs	r0, r0, r2
 80a3f34:	d10d      	bne.n	80a3f52 <__mcmp+0x28>
 80a3f36:	3314      	adds	r3, #20
 80a3f38:	3114      	adds	r1, #20
 80a3f3a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80a3f3e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80a3f42:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80a3f46:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80a3f4a:	4295      	cmp	r5, r2
 80a3f4c:	d002      	beq.n	80a3f54 <__mcmp+0x2a>
 80a3f4e:	d304      	bcc.n	80a3f5a <__mcmp+0x30>
 80a3f50:	2001      	movs	r0, #1
 80a3f52:	bd30      	pop	{r4, r5, pc}
 80a3f54:	42a3      	cmp	r3, r4
 80a3f56:	d3f4      	bcc.n	80a3f42 <__mcmp+0x18>
 80a3f58:	e7fb      	b.n	80a3f52 <__mcmp+0x28>
 80a3f5a:	f04f 30ff 	mov.w	r0, #4294967295
 80a3f5e:	e7f8      	b.n	80a3f52 <__mcmp+0x28>

080a3f60 <__mdiff>:
 80a3f60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3f64:	460c      	mov	r4, r1
 80a3f66:	4606      	mov	r6, r0
 80a3f68:	4611      	mov	r1, r2
 80a3f6a:	4620      	mov	r0, r4
 80a3f6c:	4692      	mov	sl, r2
 80a3f6e:	f7ff ffdc 	bl	80a3f2a <__mcmp>
 80a3f72:	1e05      	subs	r5, r0, #0
 80a3f74:	d108      	bne.n	80a3f88 <__mdiff+0x28>
 80a3f76:	4629      	mov	r1, r5
 80a3f78:	4630      	mov	r0, r6
 80a3f7a:	f7ff fd6f 	bl	80a3a5c <_Balloc>
 80a3f7e:	2301      	movs	r3, #1
 80a3f80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80a3f84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3f88:	bfa4      	itt	ge
 80a3f8a:	4653      	movge	r3, sl
 80a3f8c:	46a2      	movge	sl, r4
 80a3f8e:	4630      	mov	r0, r6
 80a3f90:	f8da 1004 	ldr.w	r1, [sl, #4]
 80a3f94:	bfa6      	itte	ge
 80a3f96:	461c      	movge	r4, r3
 80a3f98:	2500      	movge	r5, #0
 80a3f9a:	2501      	movlt	r5, #1
 80a3f9c:	f7ff fd5e 	bl	80a3a5c <_Balloc>
 80a3fa0:	f100 0814 	add.w	r8, r0, #20
 80a3fa4:	f8da 7010 	ldr.w	r7, [sl, #16]
 80a3fa8:	60c5      	str	r5, [r0, #12]
 80a3faa:	f10a 0210 	add.w	r2, sl, #16
 80a3fae:	f10a 0514 	add.w	r5, sl, #20
 80a3fb2:	f04f 0c00 	mov.w	ip, #0
 80a3fb6:	46c2      	mov	sl, r8
 80a3fb8:	6926      	ldr	r6, [r4, #16]
 80a3fba:	f104 0914 	add.w	r9, r4, #20
 80a3fbe:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80a3fc2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80a3fc6:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80a3fca:	f859 3b04 	ldr.w	r3, [r9], #4
 80a3fce:	fa1f f18b 	uxth.w	r1, fp
 80a3fd2:	4461      	add	r1, ip
 80a3fd4:	fa1f fc83 	uxth.w	ip, r3
 80a3fd8:	0c1b      	lsrs	r3, r3, #16
 80a3fda:	eba1 010c 	sub.w	r1, r1, ip
 80a3fde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80a3fe2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80a3fe6:	b289      	uxth	r1, r1
 80a3fe8:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a3fec:	454e      	cmp	r6, r9
 80a3fee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80a3ff2:	f84a 3b04 	str.w	r3, [sl], #4
 80a3ff6:	d8e6      	bhi.n	80a3fc6 <__mdiff+0x66>
 80a3ff8:	1b33      	subs	r3, r6, r4
 80a3ffa:	3b15      	subs	r3, #21
 80a3ffc:	f023 0303 	bic.w	r3, r3, #3
 80a4000:	3415      	adds	r4, #21
 80a4002:	3304      	adds	r3, #4
 80a4004:	42a6      	cmp	r6, r4
 80a4006:	bf38      	it	cc
 80a4008:	2304      	movcc	r3, #4
 80a400a:	441d      	add	r5, r3
 80a400c:	4443      	add	r3, r8
 80a400e:	461e      	mov	r6, r3
 80a4010:	462c      	mov	r4, r5
 80a4012:	4574      	cmp	r4, lr
 80a4014:	d30e      	bcc.n	80a4034 <__mdiff+0xd4>
 80a4016:	f10e 0203 	add.w	r2, lr, #3
 80a401a:	1b52      	subs	r2, r2, r5
 80a401c:	f022 0203 	bic.w	r2, r2, #3
 80a4020:	3d03      	subs	r5, #3
 80a4022:	45ae      	cmp	lr, r5
 80a4024:	bf38      	it	cc
 80a4026:	2200      	movcc	r2, #0
 80a4028:	441a      	add	r2, r3
 80a402a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80a402e:	b18b      	cbz	r3, 80a4054 <__mdiff+0xf4>
 80a4030:	6107      	str	r7, [r0, #16]
 80a4032:	e7a7      	b.n	80a3f84 <__mdiff+0x24>
 80a4034:	f854 8b04 	ldr.w	r8, [r4], #4
 80a4038:	fa1f f288 	uxth.w	r2, r8
 80a403c:	4462      	add	r2, ip
 80a403e:	1411      	asrs	r1, r2, #16
 80a4040:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 80a4044:	b292      	uxth	r2, r2
 80a4046:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80a404a:	ea4f 4c21 	mov.w	ip, r1, asr #16
 80a404e:	f846 2b04 	str.w	r2, [r6], #4
 80a4052:	e7de      	b.n	80a4012 <__mdiff+0xb2>
 80a4054:	3f01      	subs	r7, #1
 80a4056:	e7e8      	b.n	80a402a <__mdiff+0xca>

080a4058 <__ulp>:
 80a4058:	4b11      	ldr	r3, [pc, #68]	; (80a40a0 <__ulp+0x48>)
 80a405a:	400b      	ands	r3, r1
 80a405c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a4060:	2b00      	cmp	r3, #0
 80a4062:	dd02      	ble.n	80a406a <__ulp+0x12>
 80a4064:	2000      	movs	r0, #0
 80a4066:	4619      	mov	r1, r3
 80a4068:	4770      	bx	lr
 80a406a:	425b      	negs	r3, r3
 80a406c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80a4070:	f04f 0000 	mov.w	r0, #0
 80a4074:	f04f 0100 	mov.w	r1, #0
 80a4078:	ea4f 5223 	mov.w	r2, r3, asr #20
 80a407c:	da04      	bge.n	80a4088 <__ulp+0x30>
 80a407e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80a4082:	fa43 f102 	asr.w	r1, r3, r2
 80a4086:	4770      	bx	lr
 80a4088:	f1a2 0314 	sub.w	r3, r2, #20
 80a408c:	2b1e      	cmp	r3, #30
 80a408e:	bfd6      	itet	le
 80a4090:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80a4094:	2301      	movgt	r3, #1
 80a4096:	fa22 f303 	lsrle.w	r3, r2, r3
 80a409a:	4618      	mov	r0, r3
 80a409c:	4770      	bx	lr
 80a409e:	bf00      	nop
 80a40a0:	7ff00000 	.word	0x7ff00000

080a40a4 <__b2d>:
 80a40a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a40a8:	6907      	ldr	r7, [r0, #16]
 80a40aa:	f100 0914 	add.w	r9, r0, #20
 80a40ae:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80a40b2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80a40b6:	f1a7 0804 	sub.w	r8, r7, #4
 80a40ba:	4630      	mov	r0, r6
 80a40bc:	f7ff fd95 	bl	80a3bea <__hi0bits>
 80a40c0:	f1c0 0320 	rsb	r3, r0, #32
 80a40c4:	280a      	cmp	r0, #10
 80a40c6:	600b      	str	r3, [r1, #0]
 80a40c8:	491f      	ldr	r1, [pc, #124]	; (80a4148 <__b2d+0xa4>)
 80a40ca:	dc17      	bgt.n	80a40fc <__b2d+0x58>
 80a40cc:	45c1      	cmp	r9, r8
 80a40ce:	bf28      	it	cs
 80a40d0:	2200      	movcs	r2, #0
 80a40d2:	f1c0 0c0b 	rsb	ip, r0, #11
 80a40d6:	fa26 f30c 	lsr.w	r3, r6, ip
 80a40da:	bf38      	it	cc
 80a40dc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80a40e0:	ea43 0501 	orr.w	r5, r3, r1
 80a40e4:	f100 0315 	add.w	r3, r0, #21
 80a40e8:	fa06 f303 	lsl.w	r3, r6, r3
 80a40ec:	fa22 f20c 	lsr.w	r2, r2, ip
 80a40f0:	ea43 0402 	orr.w	r4, r3, r2
 80a40f4:	4620      	mov	r0, r4
 80a40f6:	4629      	mov	r1, r5
 80a40f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a40fc:	45c1      	cmp	r9, r8
 80a40fe:	bf2e      	itee	cs
 80a4100:	2200      	movcs	r2, #0
 80a4102:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80a4106:	f1a7 0808 	subcc.w	r8, r7, #8
 80a410a:	f1b0 030b 	subs.w	r3, r0, #11
 80a410e:	d016      	beq.n	80a413e <__b2d+0x9a>
 80a4110:	f1c3 0720 	rsb	r7, r3, #32
 80a4114:	fa22 f107 	lsr.w	r1, r2, r7
 80a4118:	45c8      	cmp	r8, r9
 80a411a:	fa06 f603 	lsl.w	r6, r6, r3
 80a411e:	ea46 0601 	orr.w	r6, r6, r1
 80a4122:	bf94      	ite	ls
 80a4124:	2100      	movls	r1, #0
 80a4126:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80a412a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80a412e:	fa02 f003 	lsl.w	r0, r2, r3
 80a4132:	40f9      	lsrs	r1, r7
 80a4134:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80a4138:	ea40 0401 	orr.w	r4, r0, r1
 80a413c:	e7da      	b.n	80a40f4 <__b2d+0x50>
 80a413e:	4614      	mov	r4, r2
 80a4140:	ea46 0501 	orr.w	r5, r6, r1
 80a4144:	e7d6      	b.n	80a40f4 <__b2d+0x50>
 80a4146:	bf00      	nop
 80a4148:	3ff00000 	.word	0x3ff00000

080a414c <__d2b>:
 80a414c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a4150:	461c      	mov	r4, r3
 80a4152:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80a4156:	2101      	movs	r1, #1
 80a4158:	4690      	mov	r8, r2
 80a415a:	f7ff fc7f 	bl	80a3a5c <_Balloc>
 80a415e:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80a4162:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80a4166:	4607      	mov	r7, r0
 80a4168:	bb2c      	cbnz	r4, 80a41b6 <__d2b+0x6a>
 80a416a:	9301      	str	r3, [sp, #4]
 80a416c:	f1b8 0300 	subs.w	r3, r8, #0
 80a4170:	d026      	beq.n	80a41c0 <__d2b+0x74>
 80a4172:	4668      	mov	r0, sp
 80a4174:	9300      	str	r3, [sp, #0]
 80a4176:	f7ff fd58 	bl	80a3c2a <__lo0bits>
 80a417a:	9900      	ldr	r1, [sp, #0]
 80a417c:	b1f0      	cbz	r0, 80a41bc <__d2b+0x70>
 80a417e:	9a01      	ldr	r2, [sp, #4]
 80a4180:	f1c0 0320 	rsb	r3, r0, #32
 80a4184:	fa02 f303 	lsl.w	r3, r2, r3
 80a4188:	430b      	orrs	r3, r1
 80a418a:	40c2      	lsrs	r2, r0
 80a418c:	617b      	str	r3, [r7, #20]
 80a418e:	9201      	str	r2, [sp, #4]
 80a4190:	9b01      	ldr	r3, [sp, #4]
 80a4192:	2b00      	cmp	r3, #0
 80a4194:	bf14      	ite	ne
 80a4196:	2102      	movne	r1, #2
 80a4198:	2101      	moveq	r1, #1
 80a419a:	61bb      	str	r3, [r7, #24]
 80a419c:	6139      	str	r1, [r7, #16]
 80a419e:	b1c4      	cbz	r4, 80a41d2 <__d2b+0x86>
 80a41a0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80a41a4:	4404      	add	r4, r0
 80a41a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a41aa:	6034      	str	r4, [r6, #0]
 80a41ac:	6028      	str	r0, [r5, #0]
 80a41ae:	4638      	mov	r0, r7
 80a41b0:	b002      	add	sp, #8
 80a41b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a41b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a41ba:	e7d6      	b.n	80a416a <__d2b+0x1e>
 80a41bc:	6179      	str	r1, [r7, #20]
 80a41be:	e7e7      	b.n	80a4190 <__d2b+0x44>
 80a41c0:	a801      	add	r0, sp, #4
 80a41c2:	f7ff fd32 	bl	80a3c2a <__lo0bits>
 80a41c6:	2101      	movs	r1, #1
 80a41c8:	9b01      	ldr	r3, [sp, #4]
 80a41ca:	6139      	str	r1, [r7, #16]
 80a41cc:	617b      	str	r3, [r7, #20]
 80a41ce:	3020      	adds	r0, #32
 80a41d0:	e7e5      	b.n	80a419e <__d2b+0x52>
 80a41d2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80a41d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a41da:	6030      	str	r0, [r6, #0]
 80a41dc:	6918      	ldr	r0, [r3, #16]
 80a41de:	f7ff fd04 	bl	80a3bea <__hi0bits>
 80a41e2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80a41e6:	6029      	str	r1, [r5, #0]
 80a41e8:	e7e1      	b.n	80a41ae <__d2b+0x62>

080a41ea <__ratio>:
 80a41ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a41ee:	4688      	mov	r8, r1
 80a41f0:	4669      	mov	r1, sp
 80a41f2:	4681      	mov	r9, r0
 80a41f4:	f7ff ff56 	bl	80a40a4 <__b2d>
 80a41f8:	460f      	mov	r7, r1
 80a41fa:	4604      	mov	r4, r0
 80a41fc:	460d      	mov	r5, r1
 80a41fe:	4640      	mov	r0, r8
 80a4200:	a901      	add	r1, sp, #4
 80a4202:	f7ff ff4f 	bl	80a40a4 <__b2d>
 80a4206:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a420a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a420e:	468b      	mov	fp, r1
 80a4210:	eba3 0c02 	sub.w	ip, r3, r2
 80a4214:	e9dd 3200 	ldrd	r3, r2, [sp]
 80a4218:	1a9b      	subs	r3, r3, r2
 80a421a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80a421e:	2b00      	cmp	r3, #0
 80a4220:	bfd5      	itete	le
 80a4222:	460a      	movle	r2, r1
 80a4224:	462a      	movgt	r2, r5
 80a4226:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80a422a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80a422e:	bfd8      	it	le
 80a4230:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80a4234:	465b      	mov	r3, fp
 80a4236:	4602      	mov	r2, r0
 80a4238:	4639      	mov	r1, r7
 80a423a:	4620      	mov	r0, r4
 80a423c:	f7fd fed4 	bl	80a1fe8 <__aeabi_ddiv>
 80a4240:	b003      	add	sp, #12
 80a4242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a4246 <__copybits>:
 80a4246:	3901      	subs	r1, #1
 80a4248:	b570      	push	{r4, r5, r6, lr}
 80a424a:	1149      	asrs	r1, r1, #5
 80a424c:	6914      	ldr	r4, [r2, #16]
 80a424e:	3101      	adds	r1, #1
 80a4250:	f102 0314 	add.w	r3, r2, #20
 80a4254:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a4258:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a425c:	1f05      	subs	r5, r0, #4
 80a425e:	42a3      	cmp	r3, r4
 80a4260:	d30c      	bcc.n	80a427c <__copybits+0x36>
 80a4262:	1aa3      	subs	r3, r4, r2
 80a4264:	3b11      	subs	r3, #17
 80a4266:	f023 0303 	bic.w	r3, r3, #3
 80a426a:	3211      	adds	r2, #17
 80a426c:	42a2      	cmp	r2, r4
 80a426e:	bf88      	it	hi
 80a4270:	2300      	movhi	r3, #0
 80a4272:	4418      	add	r0, r3
 80a4274:	2300      	movs	r3, #0
 80a4276:	4288      	cmp	r0, r1
 80a4278:	d305      	bcc.n	80a4286 <__copybits+0x40>
 80a427a:	bd70      	pop	{r4, r5, r6, pc}
 80a427c:	f853 6b04 	ldr.w	r6, [r3], #4
 80a4280:	f845 6f04 	str.w	r6, [r5, #4]!
 80a4284:	e7eb      	b.n	80a425e <__copybits+0x18>
 80a4286:	f840 3b04 	str.w	r3, [r0], #4
 80a428a:	e7f4      	b.n	80a4276 <__copybits+0x30>

080a428c <__any_on>:
 80a428c:	f100 0214 	add.w	r2, r0, #20
 80a4290:	6900      	ldr	r0, [r0, #16]
 80a4292:	114b      	asrs	r3, r1, #5
 80a4294:	4298      	cmp	r0, r3
 80a4296:	b510      	push	{r4, lr}
 80a4298:	db11      	blt.n	80a42be <__any_on+0x32>
 80a429a:	dd0a      	ble.n	80a42b2 <__any_on+0x26>
 80a429c:	f011 011f 	ands.w	r1, r1, #31
 80a42a0:	d007      	beq.n	80a42b2 <__any_on+0x26>
 80a42a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a42a6:	fa24 f001 	lsr.w	r0, r4, r1
 80a42aa:	fa00 f101 	lsl.w	r1, r0, r1
 80a42ae:	428c      	cmp	r4, r1
 80a42b0:	d10b      	bne.n	80a42ca <__any_on+0x3e>
 80a42b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a42b6:	4293      	cmp	r3, r2
 80a42b8:	d803      	bhi.n	80a42c2 <__any_on+0x36>
 80a42ba:	2000      	movs	r0, #0
 80a42bc:	bd10      	pop	{r4, pc}
 80a42be:	4603      	mov	r3, r0
 80a42c0:	e7f7      	b.n	80a42b2 <__any_on+0x26>
 80a42c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a42c6:	2900      	cmp	r1, #0
 80a42c8:	d0f5      	beq.n	80a42b6 <__any_on+0x2a>
 80a42ca:	2001      	movs	r0, #1
 80a42cc:	e7f6      	b.n	80a42bc <__any_on+0x30>

080a42ce <_calloc_r>:
 80a42ce:	b538      	push	{r3, r4, r5, lr}
 80a42d0:	fb02 f501 	mul.w	r5, r2, r1
 80a42d4:	4629      	mov	r1, r5
 80a42d6:	f7fc fb17 	bl	80a0908 <_malloc_r>
 80a42da:	4604      	mov	r4, r0
 80a42dc:	b118      	cbz	r0, 80a42e6 <_calloc_r+0x18>
 80a42de:	462a      	mov	r2, r5
 80a42e0:	2100      	movs	r1, #0
 80a42e2:	f7fe f9d3 	bl	80a268c <memset>
 80a42e6:	4620      	mov	r0, r4
 80a42e8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a42ec <nan>:
 80a42ec:	2000      	movs	r0, #0
 80a42ee:	4901      	ldr	r1, [pc, #4]	; (80a42f4 <nan+0x8>)
 80a42f0:	4770      	bx	lr
 80a42f2:	bf00      	nop
 80a42f4:	7ff80000 	.word	0x7ff80000

080a42f8 <__ascii_wctomb>:
 80a42f8:	4603      	mov	r3, r0
 80a42fa:	4608      	mov	r0, r1
 80a42fc:	b141      	cbz	r1, 80a4310 <__ascii_wctomb+0x18>
 80a42fe:	2aff      	cmp	r2, #255	; 0xff
 80a4300:	d904      	bls.n	80a430c <__ascii_wctomb+0x14>
 80a4302:	228a      	movs	r2, #138	; 0x8a
 80a4304:	f04f 30ff 	mov.w	r0, #4294967295
 80a4308:	601a      	str	r2, [r3, #0]
 80a430a:	4770      	bx	lr
 80a430c:	2001      	movs	r0, #1
 80a430e:	700a      	strb	r2, [r1, #0]
 80a4310:	4770      	bx	lr
	...

080a4314 <__aeabi_d2lz>:
 80a4314:	b538      	push	{r3, r4, r5, lr}
 80a4316:	460c      	mov	r4, r1
 80a4318:	4605      	mov	r5, r0
 80a431a:	4621      	mov	r1, r4
 80a431c:	4628      	mov	r0, r5
 80a431e:	2200      	movs	r2, #0
 80a4320:	2300      	movs	r3, #0
 80a4322:	f7fd ffa9 	bl	80a2278 <__aeabi_dcmplt>
 80a4326:	b928      	cbnz	r0, 80a4334 <__aeabi_d2lz+0x20>
 80a4328:	4628      	mov	r0, r5
 80a432a:	4621      	mov	r1, r4
 80a432c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a4330:	f7fe b96e 	b.w	80a2610 <__aeabi_d2ulz>
 80a4334:	4628      	mov	r0, r5
 80a4336:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a433a:	f7fe f969 	bl	80a2610 <__aeabi_d2ulz>
 80a433e:	4240      	negs	r0, r0
 80a4340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4344:	bd38      	pop	{r3, r4, r5, pc}
 80a4346:	bf00      	nop

080a4348 <dynalib_user>:
 80a4348:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a4358:	0000 0000 7473 7261 0074 6573 2074 6870     ....start.set ph
 80a4368:	7361 0065 6544 7562 5367 6174 7472 7300     ase.DebugStart.s
 80a4378:	756f 6372 4365 646f 0065 6e69 6574 7672     ourceCode.interv
 80a4388:	6c61 6c00 636f 756b 0070 6c62 6361 466b     al.lockup.blackF
 80a4398:	6172 656d 6500 7078 736f 7275 0065 7262     rame.exposure.br
 80a43a8:	6361 656b 0074 6870 7361 5365 6174 7472     acket.phaseStart
 80a43b8:	6c00 7361 5074 6f68 6f74 7300 6174 7472     .lastPhoto.start
 80a43c8:	6544 7562 0067 7468 7074 3a73 2f2f 6967     Debug.https://gi
 80a43d8:	6874 6275 632e 6d6f 542f 626f 2d79 694d     thub.com/Toby-Mi
 80a43e8:	6c6c 2f73 6e69 6574 7672 6c61 6d6f 7465     lls/intervalomet
 80a43f8:	7265 702d 6f68 6f74 006e 7061 0070 5925     er-photon.app.%Y
 80a4408:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
 80a4418:	007a 7361 7463 6d69 0065 0000               z.asctime...

080a4424 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a442c:	0d41 080a 0d47 080a 0d85 080a 0d55 080a     A...G.......U...
 80a443c:	0d43 080a                                   C...

080a4440 <_ZTV9IPAddress>:
	...
 80a4448:	12d9 080a 12c9 080a 12cb 080a               ............

080a4454 <_ZTV9USBSerial>:
	...
 80a445c:	1395 080a 13fb 080a 13d3 080a 0aa3 080a     ................
 80a446c:	13c5 080a 1397 080a 13a7 080a 13f5 080a     ................
 80a447c:	13b7 080a 1391 080a                         ........

080a4484 <_ZTV11USARTSerial>:
	...
 80a448c:	14f1 080a 1559 080a 1535 080a 0aa3 080a     ....Y...5.......
 80a449c:	1505 080a 1521 080a 1513 080a 152f 080a     ....!......./...
 80a44ac:	14f3 080a 14f7 080a                         ........

080a44b4 <_ZTV7TwoWire>:
	...
 80a44bc:	1641 080a 168b 080a 1663 080a 1643 080a     A.......c...C...
 80a44cc:	166b 080a 1673 080a 167b 080a 1683 080a     k...s...{.......

080a44dc <_ZTVN5spark9WiFiClassE>:
	...
 80a44e4:	1753 080a 1749 080a 173f 080a 16bd 080a     S...I...?.......
 80a44f4:	0b2f 080a 1733 080a 1727 080a 171f 080a     /...3...'.......
 80a4504:	1715 080a 170b 080a 16c7 080a               ............

080a4510 <_ZTVN5spark12NetworkClassE>:
	...
 80a4518:	1771 080a 177b 080a 1785 080a 178f 080a     q...{...........
 80a4528:	1799 080a 17a5 080a 17b1 080a 17bd 080a     ................
 80a4538:	17c5 080a 17cf 080a 17d9 080a               ............

080a4544 <_ZSt7nothrow>:
 80a4544:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

080a4554 <fpi.6203>:
 80a4554:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80a4564:	0000 0000                                   ....

080a4568 <fpinan.6239>:
 80a4568:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

080a4580 <tinytens>:
 80a4580:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80a4590:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80a45a0:	6f43 64ac 0628 1168                         Co.d(.h.

080a45a8 <_ctype_>:
 80a45a8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a45b8:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a45c8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a45d8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a45e8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a45f8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a4608:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a4618:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a4628:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 80a46a8:	2e00 0000                                   ....

080a46ac <_C_numeric_locale>:
 80a46ac:	46a9 080a 46aa 080a 0094 2000 0043 4f50     .F...F..... C.PO
 80a46bc:	4953 0058                                   SIX.

080a46c0 <__mprec_bigtens>:
 80a46c0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80a46d0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80a46e0:	bf3c 7f73 4fdd 7515                         <.s..O.u

080a46e8 <__mprec_tens>:
 80a46e8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80a46f8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80a4708:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80a4718:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80a4728:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80a4738:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80a4748:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80a4758:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80a4768:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80a4778:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80a4788:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80a4798:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80a47a8:	9db4 79d9 7843 44ea                         ...yCx.D

080a47b0 <p05.6127>:
 80a47b0:	0005 0000 0019 0000 007d 0000               ........}...

080a47bc <link_const_variable_data_end>:
 80a47bc:	080a054d 	.word	0x080a054d
 80a47c0:	080a0965 	.word	0x080a0965
 80a47c4:	080a0b75 	.word	0x080a0b75
 80a47c8:	080a0b85 	.word	0x080a0b85
 80a47cc:	080a0bd9 	.word	0x080a0bd9
 80a47d0:	080a175d 	.word	0x080a175d
 80a47d4:	080a1829 	.word	0x080a1829
 80a47d8:	080a1955 	.word	0x080a1955

080a47dc <link_constructors_end>:
 80a47dc:	00000000 	.word	0x00000000
